{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/favicon.ico","path":"favicon.ico","modified":1,"renderable":0},{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.png","path":"images/avatar.png","modified":1,"renderable":1}],"Cache":[{"_id":"source/favicon.ico","hash":"bc4575713d5905501315801cc9d52d8fc2b43178","modified":1483767236000},{"_id":"source/CNAME","hash":"00d09eae4324f411e01562979a81eb9702aa0a16","modified":1483767236000},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1478882347000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1469886538000},{"_id":"themes/next/.gitignore","hash":"5f09fca02e030b7676c1d312cd88ce8fbccf381c","modified":1478882413000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1469886538000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1469886538000},{"_id":"themes/next/README.en.md","hash":"565ba52b3825b85a9f05b41183caca7f18b741d4","modified":1469886538000},{"_id":"themes/next/.javascript_ignore","hash":"de73037693881ad2626e2962e8c5ab243f7b24d0","modified":1478882434000},{"_id":"themes/next/bower.json","hash":"023b5b945bc45c205129a18e26d304fb9caa15c7","modified":1478882459000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1469886538000},{"_id":"themes/next/_config.yml","hash":"e74a9e7056933bb53fbfd5c1206ace064120a51f","modified":1478882203000},{"_id":"themes/next/gulpfile.coffee","hash":"26e5b1b945704c8bc78b928feede895c4c111c95","modified":1469886538000},{"_id":"themes/next/package.json","hash":"63e9c0f1dd9e5d7f51b4ae383981ef939a2ed45d","modified":1469886538000},{"_id":"source/categories/index-1.md","hash":"32c65ffdc4b2b07d95bf52ca7331e2dfa8b84a60","modified":1483767236000},{"_id":"source/categories/index-3.md","hash":"9c2ea31bdcb30eb37c89cf66f3e6a6c2648f72bc","modified":1483767236000},{"_id":"source/categories/index-4.md","hash":"720625e0db913d633e142a4fbccdf771f903d6b2","modified":1483767236000},{"_id":"source/categories/index-2.md","hash":"01c6269ba8f66017829598c89ce35b0fcf041249","modified":1483767236000},{"_id":"source/categories/index.md","hash":"265279f98f069e929ce7a682d3d80f30df999a43","modified":1483767236000},{"_id":"source/_posts/HTML与CSS小记.md","hash":"e2748c4330ecf4d48997079afa7c1d44df9b8fe5","modified":1483767236000},{"_id":"source/_posts/HTTPS小记.md","hash":"50bee3ed10eb6f2ffc8f3909206a046e99a5e392","modified":1483767236000},{"_id":"source/_posts/IoC容器的简单实现.md","hash":"d5bfad4dafbcb8fd754b49094d0c8e80247ef225","modified":1483767236000},{"_id":"source/_posts/.从依赖实现到依赖行为.md.swp","hash":"4bd6cb34b72e9d0d4663ff5faaabf2f6d45de8af","modified":1483767236000},{"_id":"source/_posts/Java内存区域.md","hash":"238363279ad71ab1c5e915cff957a485dc62bc3a","modified":1483767236000},{"_id":"source/_posts/Test.md","hash":"d5f2f315b318e817c04957a40260dd259696dac4","modified":1483768133000},{"_id":"source/_posts/ThreadLocal小记.md","hash":"1ca1eaa05099e1f116f08e289ca3a2b1722ca85d","modified":1483767236000},{"_id":"source/_posts/《Java并发编程实战》读书笔记.md","hash":"033e79c32e98cf613523f359cc33e8fc129ed15d","modified":1483767236000},{"_id":"source/_posts/《函数式编程思维》读书笔记.md","hash":"b3d9ce43d94f8650f1418d501b92a81ae7eb827e","modified":1483767236000},{"_id":"source/_posts/从依赖实现到依赖行为.md","hash":"444e860fc19361494cd70cd193cd283a6123cffb","modified":1483767236000},{"_id":"source/_posts/编译器结构.md","hash":"7b091663eb1f6f6f98bddd0c526d726ebb9246c1","modified":1483767236000},{"_id":"source/_posts/自下而上的开发实践.md","hash":"f1af2467bbccbb5202e9369a463deb2300434f70","modified":1483767236000},{"_id":"source/_posts/使用CI发布Hexo.md","hash":"503e08e5db2dfc9e17471068ece8d66e0e9d35c7","modified":1483767311000},{"_id":"source/_posts/使用Builder模式改进多参数方法.md","hash":"a138468db27bb32713add236e8ada17aeb10ffe4","modified":1483767236000},{"_id":"source/_posts/迪米特法则——合理的封装.md","hash":"dfcd4c4e9d9df2ea50690e849fc2519ed8b37ad5","modified":1483767236000},{"_id":"source/tags/index-1.md","hash":"15f2af37c1cdc21f3dcc572d8017099646cdd617","modified":1483767236000},{"_id":"source/tags/index-2.md","hash":"cf3e574ba065f16e24d019b51eade2060d3c1c62","modified":1483767236000},{"_id":"source/tags/index-3.md","hash":"2bcb7dc8521f2e013f0cd2f49d3b0f52917fa96c","modified":1483767236000},{"_id":"source/tags/index-4.md","hash":"751f69598690223422467db912b81e623d805a88","modified":1483767236000},{"_id":"source/tags/index-5.md","hash":"da17106467a5adc108e9fad7e0f04160a557a185","modified":1483767236000},{"_id":"source/tags/index-6.md","hash":"e9ed82135629d97b29dc691c27b58330b1474966","modified":1483767236000},{"_id":"source/tags/index.md","hash":"7b78e54ef8023d86641b636f341196330582d695","modified":1483767236000},{"_id":"themes/next/.git/ORIG_HEAD","hash":"283a77b25951fbb3b2f10b4be4c80b6519ac6011","modified":1478885895000},{"_id":"themes/next/.git/FETCH_HEAD","hash":"aa6f80bc135fe14594f2e48a14b91f9529ec1c38","modified":1478881184000},{"_id":"themes/next/.git/HEAD","hash":"283a77b25951fbb3b2f10b4be4c80b6519ac6011","modified":1478885435000},{"_id":"themes/next/.git/config","hash":"bf7d1df65cf34d0f25a7184a58c37a09f72e4be7","modified":1469886538000},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1469885645000},{"_id":"themes/next/.git/index","hash":"e3cb0c97ebc630669b2fe32ac576980afdb92f8e","modified":1478885895000},{"_id":"themes/next/.git/packed-refs","hash":"c260c6d28e96faeec8fe2ead52f6103d079e2f0c","modified":1469886538000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ab257af816986cd0e53f9527a92d5934ac70ae9","modified":1469886538000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"c2024ded82143807c28a299c5fe6b927ef3525ff","modified":1469886538000},{"_id":"themes/next/languages/de.yml","hash":"786afba25cfc98845a20d9901823ebeebcd1cbbf","modified":1469886538000},{"_id":"themes/next/languages/default.yml","hash":"9db835c0543ade5a89bc80ec5a898203227cf3d8","modified":1469886538000},{"_id":"themes/next/languages/en.yml","hash":"f03799cbdb5a33064ead080bcac4baca1f6bc5f9","modified":1469886538000},{"_id":"themes/next/languages/fr-FR.yml","hash":"1a084623c39de74301f3e92f9388a3a815a542ca","modified":1469886538000},{"_id":"themes/next/languages/id.yml","hash":"147c01e41b931085ad14250fa900c2249dcbbdd7","modified":1469886538000},{"_id":"themes/next/languages/pt-BR.yml","hash":"462aa865ca3d479bcf6b363cba61247b50f230ff","modified":1469886538000},{"_id":"themes/next/languages/ja.yml","hash":"a2c7b6301b5474aab798946fb700289df237c3cf","modified":1469886538000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"bea452bc49aed171a210d09bd6cddc4e846ea8ab","modified":1469886538000},{"_id":"themes/next/languages/zh-hk.yml","hash":"519ab3d817ec3bc5bfc91159c494b6b3c170bea7","modified":1469886538000},{"_id":"themes/next/languages/ru.yml","hash":"cc7b964a46587aea0e57b0a5269d8fd25570858e","modified":1469886538000},{"_id":"themes/next/languages/pt.yml","hash":"ca239b39bf65c9462e59d51b12f0fe566d453197","modified":1469886538000},{"_id":"themes/next/layout/_layout.swig","hash":"74157f6cfd679ea11febec632542793f37c5e5d4","modified":1469886538000},{"_id":"themes/next/languages/zh-tw.yml","hash":"6b1f345aaefc13e6723dc8a6741b59ac05c20dfd","modified":1469886538000},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1469886538000},{"_id":"themes/next/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1469886538000},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1469886538000},{"_id":"themes/next/scripts/merge-configs.js","hash":"0c56be2e85c694247cfa327ea6d627b99ca265e8","modified":1469886538000},{"_id":"themes/next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1469886538000},{"_id":"themes/next/layout/page.swig","hash":"8019d02232a6dd1a665b6a4d2daef8e5dd2f0049","modified":1469886538000},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1469886538000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1469886538000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1469886538000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1469886538000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1469886538000},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1469885645000},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1469885645000},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1469885645000},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1469885645000},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1469885645000},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1469885645000},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1469885645000},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1469885645000},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1469885645000},{"_id":"themes/next/.git/logs/HEAD","hash":"943be81836fbfc56a0adc2fdfe04975c22a3e370","modified":1478885435000},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1469885645000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"43c3433155ccd9abcbe7dce2e6bfa1f3a66af18b","modified":1469886538000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1469886538000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1469886538000},{"_id":"themes/next/layout/_macro/post.swig","hash":"1ca03011bed92614832b1343b65be92183957dc5","modified":1469886538000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"4fe588ff8ba8587885c2936db2df490774f89e10","modified":1469886538000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"b73f9443bee2d3ea383aad52e49ffca8aa97dcc2","modified":1469886538000},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1469886538000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"1a77843ce5eac62151dc3d38f0a36c43e19e1a74","modified":1469886538000},{"_id":"themes/next/layout/_partials/header.swig","hash":"eb028685cb3c329537bbced06c063d23e6a33817","modified":1469886538000},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b0c495b8154ef8b2d2cb0a554e164ff22cdc962","modified":1469886538000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1469886538000},{"_id":"themes/next/layout/_partials/search.swig","hash":"011b9d6c9f0a2f4654908ea20b9391f9b7981271","modified":1469886538000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1469886538000},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"82d060fe055d6e423bbc9199f82dfe5c68e74779","modified":1469886538000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1469886538000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"0b91cadecead8e0b5211cc42b085998d94af503a","modified":1469886538000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1469886538000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1469886538000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"3acce36db0feb11a982c6c799aa6b6b47df2827c","modified":1469886538000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1469886538000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1469886538000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1469886538000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1469886538000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1469886538000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1469886538000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1469886538000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1469886538000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1469886538000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1469886538000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1469886538000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1469886538000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1469886538000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1469886538000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1469886538000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1469886538000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1469886538000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1469886538000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1469886538000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1469886538000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1469886538000},{"_id":"themes/next/.git/objects/pack/pack-1ba20454ca88bd5c1bc8fb803ae938359c51baac.idx","hash":"aa4103e35c979ff30aa87ae9f4eed8fa68e6af87","modified":1478881184000},{"_id":"themes/next/.git/refs/heads/master","hash":"283a77b25951fbb3b2f10b4be4c80b6519ac6011","modified":1469886538000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1469886538000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"ff5523d5dacaa77a55a24e50e6e6530c3b98bfad","modified":1469886538000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1469886538000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1469886538000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"c07f7b2f264e5215b8ed42d67e8cef2477558364","modified":1469886538000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"7ca5cb4daa58b3504e17f3e02975e794bc634658","modified":1469886538000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1469886538000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1469886538000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1469886538000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1469886538000},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"0a89c04055bade7baa5962f1d5aefe438d83a244","modified":1469886538000},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"907b931d775d32405d02a25b3b0a3ac03bf804d0","modified":1469886538000},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1469886538000},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1469886538000},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"5bafc33f57508d1d04a9930165240f6e9efa8d6d","modified":1469886538000},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"7f7148c8f52e4d3cfc070d964160362179fa8e91","modified":1469886538000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1469886538000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1469886538000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1469886538000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"3ead77befa064d6327dc7afd0a5af7be59a5f196","modified":1469886538000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"17624186f7a1f28daddea258d044f8e03b2f4bea","modified":1469886538000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1469886538000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1469886538000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1469886538000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"7da985a99674e54f514d4fd9fcd3bcea6e7e41d5","modified":1469886538000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1469886538000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1469886538000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1469886538000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1469886538000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1469886538000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1469886538000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1469886538000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1469886538000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1469886538000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1469886538000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1469886538000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1469886538000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1469886538000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1469886538000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1469886538000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1469886538000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1469886538000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1469886538000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1469886538000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1469886538000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1469886538000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1469886538000},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1469886538000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1469886538000},{"_id":"themes/next/source/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1469886538000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1469886538000},{"_id":"themes/next/source/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1469886538000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1469886538000},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1469886538000},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"fa1dbfa843c747b51ff6d52cf1fcf0b097513714","modified":1469886538000},{"_id":"themes/next/.git/refs/remotes/origin/dev","hash":"41ab21bbe0d88c2cc439c0af33807af4e95aef31","modified":1478881184000},{"_id":"themes/next/.git/refs/remotes/origin/master","hash":"41ab21bbe0d88c2cc439c0af33807af4e95aef31","modified":1478881184000},{"_id":"themes/next/.git/refs/remotes/origin/servant","hash":"cc0719ca98bd124977db7d9c89b69ede35e83d88","modified":1478881184000},{"_id":"themes/next/.git/objects/pack/pack-e00f886c9514837626bc8d3993103c1a358412f3.idx","hash":"3f14696ebf407e84c94a306793b234758b4fbdfa","modified":1469886538000},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"f9c6ee91c2a615edd8ca26edcc8a66b71883c238","modified":1469886538000},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1469886538000},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"4fcbf57c4918528ab51d3d042cff92cf5aefb599","modified":1469886538000},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"7c43d66da93cde65b473a7d6db2a86f9a42647d6","modified":1469886538000},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"bff3b18f56175c53f3bc6d733166c4d998e08732","modified":1469886538000},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1469886538000},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"30a23fa7e816496fdec0e932aa42e2d13098a9c2","modified":1469886538000},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"696666141cdd204fd8818ac2ad18f05e320f8587","modified":1469886538000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1469886538000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5304f99581da3a31de3ecec959b7adf9002fde83","modified":1469886538000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1469886538000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"54c90cf7bdbf5c596179d8dae6e671bad1292662","modified":1469886538000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1469886538000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"b49efc66bd055a2d0be7deabfcb02ee72a9a28c8","modified":1469886538000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1469886538000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1469886538000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1469886538000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1469886538000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"10994990d6e0b4d965a728a22cf7f6ee29cae9f6","modified":1469886538000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1469886538000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1469886538000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1469886538000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1469886538000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"4303776991ef28f5742ca51c7dffe6f12f0acf34","modified":1469886538000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1469886538000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1469886538000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1469886538000},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"938d39eedc6e3d33918c1145a5bf1e79991d3fcf","modified":1469886538000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"be22ad34f546a07f6d56b424338cdd898683eea4","modified":1469886538000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"8d7cecde4933900c7df2db9d0a98f5f82f88dc93","modified":1469886538000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"d09280e5b79f3b573edb30f30c7a5f03ac640986","modified":1469886538000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"d4b7bd610ca03dbb2f5b66631c0e84a79fb4660b","modified":1469886538000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1469886538000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"1b10ba2d3ad0c063c418dc94a0b7e0db4b342c53","modified":1469886538000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"6ed60cc621bac096c0ed7534fa25b1a52dc571d4","modified":1469886538000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1469886538000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1469886538000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"c2c6c4f6434b4f94aac2af5861cd769427f0ee10","modified":1469886538000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1469886538000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1469886538000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1469886538000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1469886538000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1469886538000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1469886538000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1469886538000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1469886538000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1469886538000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1469886538000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1469886538000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1469886538000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1469886538000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1469886538000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1469886538000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1469886538000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1469886538000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1469886538000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1469886538000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1469886538000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1469886538000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"e63dc7cea055ca60a95d286f32349d88b10c5a4d","modified":1469886538000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1469886538000},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"fa1dbfa843c747b51ff6d52cf1fcf0b097513714","modified":1469886538000},{"_id":"themes/next/.git/logs/refs/remotes/origin/dev","hash":"db4133b1065e63b43e9712a19bab1c8e9579206e","modified":1478881184000},{"_id":"themes/next/.git/logs/refs/remotes/origin/servant","hash":"80b053c7ecd6bca01903c7900670b3e8340b173e","modified":1478881184000},{"_id":"themes/next/.git/logs/refs/remotes/origin/master","hash":"97fcf1b8f1b2c39a64e5e5f9d455b15302be810b","modified":1478881184000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1469886538000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"c890ce7fe933abad7baf39764a01894924854e92","modified":1469886538000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1469886538000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1469886538000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1469886538000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1469886538000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"90f8f9706cd7fe829cf06e9959a65fd3f8b994fa","modified":1469886538000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"4da051c7f3924fa2db1e73c55b2baf1c2c150255","modified":1469886538000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"3c46efd6601e268093ce6d7b1471d18501878f0d","modified":1469886538000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1469886538000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1469886538000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1469886538000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1469886538000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1469886538000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1469886538000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1469886538000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d543d1377c1f61b70e3adb6da0eb12797552e5f2","modified":1469886538000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"cbca4842a54950e2934b3b8f3cd940f122111aef","modified":1469886538000},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"15063d79b5befc21820baf05d6f20cc1c1787477","modified":1469886538000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1469886538000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1469886538000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1469886538000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"4eb18b12fa0ea6c35925d9a64f64e2a7dae8c7fd","modified":1469886538000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1469886538000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1469886538000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"c44f6a553ec7ea5508f2054a13be33a62a15d3a9","modified":1469886538000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1469886538000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1469886538000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1469886538000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"2d3abbc85b979a648e0e579e45f16a6eba49d1e7","modified":1469886538000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1469886538000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1469886538000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"618f73450cf541f88a4fddc3d22898aee49d105d","modified":1469886538000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1469886538000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1469886538000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"8e66c2635d48e11de616bb29c4b1323698eebc0a","modified":1469886538000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1469886538000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"b03f891883446f3a5548b7cc90d29c77e62f1053","modified":1469886538000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1469886538000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1469886538000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1469886538000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"3afc459442c132c480d1d832f1a872f1070bb048","modified":1469886538000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"795d94561888d31cb7a6ff4a125596809ea69b7d","modified":1469886538000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1469886538000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1469886538000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1469886538000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1469886538000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1469886538000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1469886538000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1469886538000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1469886538000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1469886538000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1469886538000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1469886538000},{"_id":"themes/next/source/images/avatar.png","hash":"9b1c328be2868cd82320037820b2a1b89be37a37","modified":1469888010000},{"_id":"themes/next/.git/objects/pack/pack-1ba20454ca88bd5c1bc8fb803ae938359c51baac.pack","hash":"4424eea0f4a76ebfeed53e794909f80f51630863","modified":1478881184000},{"_id":"themes/next/.git/objects/pack/pack-e00f886c9514837626bc8d3993103c1a358412f3.pack","hash":"e71ec38f27723a63ccd2acb7754e5aa948cdbc5e","modified":1469886538000}],"Category":[{"name":"前端","_id":"cixmu6mrp0005po2ejd1ktmp9"},{"name":"其它","_id":"cixmu6mry000dpo2e7bt6bpqf"},{"name":"Java","_id":"cixmu6ms3000ipo2ert6i74r1"},{"name":"读书笔记","_id":"cixmu6msb000upo2ep73xpvk3"},{"name":"设计模式","_id":"cixmu6mxv001dpo2ed07e8te4"}],"Data":[],"Page":[{"title":"前端","date":"2016-07-31T10:50:48.000Z","type":"categories","comments":0,"_content":"","source":"categories/index-1.md","raw":"---\ntitle: 前端\ndate: 2016-07-31 18:50:48\ntype: \"categories\"\ncomments: false\n---\n","updated":"2017-01-07T05:33:56.000Z","path":"categories/index-1.html","layout":"page","_id":"cixmu6mra0000po2eh04dc7dr","content":"","excerpt":"","more":""},{"title":"设计模式","date":"2016-10-22T11:06:15.000Z","type":"categories","comments":0,"_content":"","source":"categories/index-3.md","raw":"---\ntitle: 设计模式\ndate: 2016-10-22 19:06:15\ntype: \"categories\"\ncomments: false\n---\n","updated":"2017-01-07T05:33:56.000Z","path":"categories/index-3.html","layout":"page","_id":"cixmu6mrh0002po2etysrb8yy","content":"","excerpt":"","more":""},{"title":"其它","date":"2016-10-24T16:01:14.000Z","type":"categories","comments":0,"_content":"","source":"categories/index-4.md","raw":"---\ntitle: 其它\ndate: 2016-10-25 00:01:14\ntype: \"categories\"\ncomments: false\n---\n","updated":"2017-01-07T05:33:56.000Z","path":"categories/index-4.html","layout":"page","_id":"cixmu6mrq0006po2ewzf8ju0g","content":"","excerpt":"","more":""},{"title":"读书笔记","date":"2016-08-27T14:15:37.000Z","type":"categories","comments":0,"_content":"","source":"categories/index-2.md","raw":"---\ntitle: 读书笔记\ndate: 2016-08-27 22:15:37\ntype: \"categories\"\ncomments: false\n---\n","updated":"2017-01-07T05:33:56.000Z","path":"categories/index-2.html","layout":"page","_id":"cixmu6mru0008po2ef2ioi9rv","content":"","excerpt":"","more":""},{"title":"Java","date":"2016-07-30T14:47:23.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: Java\ndate: 2016-07-30 22:47:23\ntype: \"categories\"\ncomments: false\n---\n","updated":"2017-01-07T05:33:56.000Z","path":"categories/index.html","layout":"page","_id":"cixmu6mrw000bpo2e3qnx2fpm","content":"","excerpt":"","more":""},{"title":"HTML","date":"2016-07-31T11:10:04.000Z","type":"tags","comments":0,"_content":"","source":"tags/index-1.md","raw":"---\ntitle: HTML\ndate: 2016-07-31 19:10:04\ntype: \"tags\"\ncomments: false\n---\n","updated":"2017-01-07T05:33:56.000Z","path":"tags/index-1.html","layout":"page","_id":"cixmu6mxk0017po2ed7mk63wu","content":"","excerpt":"","more":""},{"title":"CSS","date":"2016-07-31T11:18:55.000Z","type":"tags","comments":0,"_content":"","source":"tags/index-2.md","raw":"---\ntitle: CSS\ndate: 2016-07-31 19:18:55\ntype: \"tags\"\ncomments: false\n---\n","updated":"2017-01-07T05:33:56.000Z","path":"tags/index-2.html","layout":"page","_id":"cixmu6mxl0019po2e55j7jwpt","content":"","excerpt":"","more":""},{"title":"JVM","date":"2016-08-14T15:09:22.000Z","type":"tags","comments":0,"_content":"","source":"tags/index-3.md","raw":"---\ntitle: JVM\ndate: 2016-08-14 23:09:22\ntype: \"tags\"\ncomments: false\n---\n","updated":"2017-01-07T05:33:56.000Z","path":"tags/index-3.html","layout":"page","_id":"cixmu6mxt001cpo2e2kmvo3sf","content":"","excerpt":"","more":""},{"title":"Java","date":"2016-08-14T15:14:08.000Z","type":"tags","comments":0,"_content":"","source":"tags/index-4.md","raw":"---\ntitle: Java\ndate: 2016-08-14 23:14:08\ntype: \"tags\"\ncomments: false\n---\n","updated":"2017-01-07T05:33:56.000Z","path":"tags/index-4.html","layout":"page","_id":"cixmu6mxx001gpo2ee6d4n93u","content":"","excerpt":"","more":""},{"title":"Functional","date":"2016-08-27T14:01:31.000Z","_content":"","source":"tags/index-5.md","raw":"---\ntitle: Functional\ndate: 2016-08-27 22:01:31\n---\n","updated":"2017-01-07T05:33:56.000Z","path":"tags/index-5.html","comments":1,"layout":"page","_id":"cixmu6my2001jpo2emh7lcjzu","content":"","excerpt":"","more":""},{"title":"设计模式","date":"2016-10-22T11:12:06.000Z","type":"tags","comments":0,"_content":"","source":"tags/index-6.md","raw":"---\ntitle: 设计模式\ndate: 2016-10-22 19:12:06\ntype: \"tags\"\ncomments: false\n---\n","updated":"2017-01-07T05:33:56.000Z","path":"tags/index-6.html","layout":"page","_id":"cixmu6my7001npo2e9vne38kk","content":"","excerpt":"","more":""},{"title":"daily","date":"2016-07-30T14:27:10.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: daily\ndate: 2016-07-30 22:27:10\ntype: \"tags\"\ncomments: false\n---\n","updated":"2017-01-07T05:33:56.000Z","path":"tags/index.html","layout":"page","_id":"cixmu6myb001qpo2eath5s3ej","content":"","excerpt":"","more":""}],"Post":[{"title":"HTML与CSS小记","date":"2016-07-31T10:54:52.000Z","_content":"\n![jjj](https://ooo.0o0.ooo/2016/07/31/579dd779d1389.png)","source":"_posts/HTML与CSS小记.md","raw":"---\ntitle: HTML与CSS小记\ndate: 2016-07-31 18:54:52\ntags: \n  - HTML\n  - CSS\ncategories: 前端\n\n---\n\n![jjj](https://ooo.0o0.ooo/2016/07/31/579dd779d1389.png)","slug":"HTML与CSS小记","published":1,"updated":"2017-01-07T05:33:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixmu6mrc0001po2eytgr3uf9","content":"<p><img src=\"https://ooo.0o0.ooo/2016/07/31/579dd779d1389.png\" alt=\"jjj\"></p>\n","excerpt":"","more":"<p><img src=\"https://ooo.0o0.ooo/2016/07/31/579dd779d1389.png\" alt=\"jjj\"></p>\n"},{"title":"HTTPS小记","date":"2016-10-24T15:58:06.000Z","_content":"\n## 背景\n\n最近好像跟HTTPS较上劲了，前几天的职级答辩问到了相关问题，最近维护的系统升级也碰到相关问题。\n\n自己对HTTPS了解的并不多，今天简单了解了一下，在此做个记录。\n\n首先有几个基本概念，TCP/IP协议，HTTP一些，对称/非对称加密，证书，公钥/私钥。\n\nTCP/TP：\n\n- 传输层协议，主要解决数据如何在网络中传输\n\nHTTP：\n\n- 应用层协议，主要解决如何包装数据，依赖TCP/IP协议\n\n对称加密：\n\n- 加密密钥能够从解密密钥中推算出来，同时解密密钥也可以从加密密钥中推算出来\n\n非对称加密：\n\n- 加密和解密过程使用了不同的密钥。分为公钥和私钥，它们可以互相解密。\n- 公钥加密，私钥解密\n- 私钥数字签名，公钥验证\n\n证书：\n\n- 我理解主要是两个作用：验证证书持有者身份、提供证书持有者公钥\n\n## 为什么用HTTPS\n\n因为HTTP不安全。\n\n1. HTTP使用的是明文传输，容易被窃取\n2. 无法验证报文完整性，可能被篡改\n3. 无法验证通信双方的身份\n\n为了对HTTP提供安全保障，就依赖：\n\n### SSL与TLS\n\nSSL（Secure Socket Layer，安全套接字层）\n\nTLS（Transport Layer Security，传输层安全协议）\n\nTLS可以理解为SSL的增强版。\n\nHTTP直接与TCP通信，而在HTTPS中首先与SSL通信，SSL再与TCP通信。我觉得可以理解成HTTPS = HTTP + SSL。\n\n不论HTTP还是HTTPS，所有的通信、加解密都是最终都是建立在TCP/IP之上的。\n\n## 加密思路\n\n1. 客户端向服务器端索要并验证公钥；\n2. 双方协商生成\"对话密钥\"；\n3. 双方采用\"对话密钥\"进行加密通信；\n\n在通信过程中其实双方使用的还是对称的加密算法，但是为了让这个对称的加密算法足够安全。首先使用非对称的算法来获取对话密钥，之后再用对话密钥来对通信的内容加密解密。\n\n所以关键问题就变成了：\n\n## 对话密钥的创建\n\n我没有仔细阅读相关协议，在网上查了一些资料，下面的内容是根据自己的理解写的。\n\n简单描述一次对话密钥的获取过程：\n\n> C：我想跟服务器A说悄悄话，我支持1,2,3版本的协议。我先跟你说个秘密X。\n>\n> S：我是服务器A。我们用3版本的协议说话吧，我也给你说个秘密Y。我再给你个公钥，使用它加密后的信息就只有我能听懂了。\n>\n> C：让我先看看你是不是服务器A。（确认是服务器A）那我再给你说个秘密Z，这次用你给我的公钥对Z加密，确保其他人都不知道。以后我们用X,Y,Z这三个秘密来验证彼此的消息。我要跟你确认的就这些。\n>\n> S：好的，以后我们用X,Y,Z这三个秘密来验证彼此的消息。我要确认的也就这些内容。网上把上面四个步骤描述\n\n网上把上述的四个步骤描述为：\n\n- 客户端发出请求\n  - 支持的协议版本，比如TLS 1.0版\n  - 一个随机数\n  - 支持的加密方法，比如RSA公钥加密\n  - 支持的压缩方法\n- 服务器回应\n  - 协议的版本\n  - 加密的算法\n  - 生成随机数\n  - 服务器证书\n- 客户端回应\n  - 对服务器下发的证书进行验证\n  - 再次产生一个随机数（第三个随机数）\n  - 使用服务器证书中的公钥进行加密\n  - 发送编码改变的消息\n  - 发送整个前面所有消息的hash值\n  - 根据三个随机数生成对话密钥\n- 服务器最终回应\n  - 使用私钥解密接收到第三个随机数\n  - 验证数据完整性\n  - 使用跟客户端同样的方式生成对话密钥\n  - 告知客户端已经切换到协商过的加密套件状态\n  - 服务端发送消息验证加解密是否成功\n\n如果服务器需要对客户端的身份进行认证，那么在第一次服务器回应中可以向客户端索取证书。客户端提供证书后，服务器通过验证客户端证书，从而验证客户端的身份。\n","source":"_posts/HTTPS小记.md","raw":"---\ntitle: HTTPS小记\ndate: 2016-10-24 23:58:06\ntags: daily\ncategories: 其它\n---\n\n## 背景\n\n最近好像跟HTTPS较上劲了，前几天的职级答辩问到了相关问题，最近维护的系统升级也碰到相关问题。\n\n自己对HTTPS了解的并不多，今天简单了解了一下，在此做个记录。\n\n首先有几个基本概念，TCP/IP协议，HTTP一些，对称/非对称加密，证书，公钥/私钥。\n\nTCP/TP：\n\n- 传输层协议，主要解决数据如何在网络中传输\n\nHTTP：\n\n- 应用层协议，主要解决如何包装数据，依赖TCP/IP协议\n\n对称加密：\n\n- 加密密钥能够从解密密钥中推算出来，同时解密密钥也可以从加密密钥中推算出来\n\n非对称加密：\n\n- 加密和解密过程使用了不同的密钥。分为公钥和私钥，它们可以互相解密。\n- 公钥加密，私钥解密\n- 私钥数字签名，公钥验证\n\n证书：\n\n- 我理解主要是两个作用：验证证书持有者身份、提供证书持有者公钥\n\n## 为什么用HTTPS\n\n因为HTTP不安全。\n\n1. HTTP使用的是明文传输，容易被窃取\n2. 无法验证报文完整性，可能被篡改\n3. 无法验证通信双方的身份\n\n为了对HTTP提供安全保障，就依赖：\n\n### SSL与TLS\n\nSSL（Secure Socket Layer，安全套接字层）\n\nTLS（Transport Layer Security，传输层安全协议）\n\nTLS可以理解为SSL的增强版。\n\nHTTP直接与TCP通信，而在HTTPS中首先与SSL通信，SSL再与TCP通信。我觉得可以理解成HTTPS = HTTP + SSL。\n\n不论HTTP还是HTTPS，所有的通信、加解密都是最终都是建立在TCP/IP之上的。\n\n## 加密思路\n\n1. 客户端向服务器端索要并验证公钥；\n2. 双方协商生成\"对话密钥\"；\n3. 双方采用\"对话密钥\"进行加密通信；\n\n在通信过程中其实双方使用的还是对称的加密算法，但是为了让这个对称的加密算法足够安全。首先使用非对称的算法来获取对话密钥，之后再用对话密钥来对通信的内容加密解密。\n\n所以关键问题就变成了：\n\n## 对话密钥的创建\n\n我没有仔细阅读相关协议，在网上查了一些资料，下面的内容是根据自己的理解写的。\n\n简单描述一次对话密钥的获取过程：\n\n> C：我想跟服务器A说悄悄话，我支持1,2,3版本的协议。我先跟你说个秘密X。\n>\n> S：我是服务器A。我们用3版本的协议说话吧，我也给你说个秘密Y。我再给你个公钥，使用它加密后的信息就只有我能听懂了。\n>\n> C：让我先看看你是不是服务器A。（确认是服务器A）那我再给你说个秘密Z，这次用你给我的公钥对Z加密，确保其他人都不知道。以后我们用X,Y,Z这三个秘密来验证彼此的消息。我要跟你确认的就这些。\n>\n> S：好的，以后我们用X,Y,Z这三个秘密来验证彼此的消息。我要确认的也就这些内容。网上把上面四个步骤描述\n\n网上把上述的四个步骤描述为：\n\n- 客户端发出请求\n  - 支持的协议版本，比如TLS 1.0版\n  - 一个随机数\n  - 支持的加密方法，比如RSA公钥加密\n  - 支持的压缩方法\n- 服务器回应\n  - 协议的版本\n  - 加密的算法\n  - 生成随机数\n  - 服务器证书\n- 客户端回应\n  - 对服务器下发的证书进行验证\n  - 再次产生一个随机数（第三个随机数）\n  - 使用服务器证书中的公钥进行加密\n  - 发送编码改变的消息\n  - 发送整个前面所有消息的hash值\n  - 根据三个随机数生成对话密钥\n- 服务器最终回应\n  - 使用私钥解密接收到第三个随机数\n  - 验证数据完整性\n  - 使用跟客户端同样的方式生成对话密钥\n  - 告知客户端已经切换到协商过的加密套件状态\n  - 服务端发送消息验证加解密是否成功\n\n如果服务器需要对客户端的身份进行认证，那么在第一次服务器回应中可以向客户端索取证书。客户端提供证书后，服务器通过验证客户端证书，从而验证客户端的身份。\n","slug":"HTTPS小记","published":1,"updated":"2017-01-07T05:33:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixmu6mri0003po2ejwol0a1p","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>最近好像跟HTTPS较上劲了，前几天的职级答辩问到了相关问题，最近维护的系统升级也碰到相关问题。</p>\n<p>自己对HTTPS了解的并不多，今天简单了解了一下，在此做个记录。</p>\n<p>首先有几个基本概念，TCP/IP协议，HTTP一些，对称/非对称加密，证书，公钥/私钥。</p>\n<p>TCP/TP：</p>\n<ul>\n<li>传输层协议，主要解决数据如何在网络中传输</li>\n</ul>\n<p>HTTP：</p>\n<ul>\n<li>应用层协议，主要解决如何包装数据，依赖TCP/IP协议</li>\n</ul>\n<p>对称加密：</p>\n<ul>\n<li>加密密钥能够从解密密钥中推算出来，同时解密密钥也可以从加密密钥中推算出来</li>\n</ul>\n<p>非对称加密：</p>\n<ul>\n<li>加密和解密过程使用了不同的密钥。分为公钥和私钥，它们可以互相解密。</li>\n<li>公钥加密，私钥解密</li>\n<li>私钥数字签名，公钥验证</li>\n</ul>\n<p>证书：</p>\n<ul>\n<li>我理解主要是两个作用：验证证书持有者身份、提供证书持有者公钥</li>\n</ul>\n<h2 id=\"为什么用HTTPS\"><a href=\"#为什么用HTTPS\" class=\"headerlink\" title=\"为什么用HTTPS\"></a>为什么用HTTPS</h2><p>因为HTTP不安全。</p>\n<ol>\n<li>HTTP使用的是明文传输，容易被窃取</li>\n<li>无法验证报文完整性，可能被篡改</li>\n<li>无法验证通信双方的身份</li>\n</ol>\n<p>为了对HTTP提供安全保障，就依赖：</p>\n<h3 id=\"SSL与TLS\"><a href=\"#SSL与TLS\" class=\"headerlink\" title=\"SSL与TLS\"></a>SSL与TLS</h3><p>SSL（Secure Socket Layer，安全套接字层）</p>\n<p>TLS（Transport Layer Security，传输层安全协议）</p>\n<p>TLS可以理解为SSL的增强版。</p>\n<p>HTTP直接与TCP通信，而在HTTPS中首先与SSL通信，SSL再与TCP通信。我觉得可以理解成HTTPS = HTTP + SSL。</p>\n<p>不论HTTP还是HTTPS，所有的通信、加解密都是最终都是建立在TCP/IP之上的。</p>\n<h2 id=\"加密思路\"><a href=\"#加密思路\" class=\"headerlink\" title=\"加密思路\"></a>加密思路</h2><ol>\n<li>客户端向服务器端索要并验证公钥；</li>\n<li>双方协商生成”对话密钥”；</li>\n<li>双方采用”对话密钥”进行加密通信；</li>\n</ol>\n<p>在通信过程中其实双方使用的还是对称的加密算法，但是为了让这个对称的加密算法足够安全。首先使用非对称的算法来获取对话密钥，之后再用对话密钥来对通信的内容加密解密。</p>\n<p>所以关键问题就变成了：</p>\n<h2 id=\"对话密钥的创建\"><a href=\"#对话密钥的创建\" class=\"headerlink\" title=\"对话密钥的创建\"></a>对话密钥的创建</h2><p>我没有仔细阅读相关协议，在网上查了一些资料，下面的内容是根据自己的理解写的。</p>\n<p>简单描述一次对话密钥的获取过程：</p>\n<blockquote>\n<p>C：我想跟服务器A说悄悄话，我支持1,2,3版本的协议。我先跟你说个秘密X。</p>\n<p>S：我是服务器A。我们用3版本的协议说话吧，我也给你说个秘密Y。我再给你个公钥，使用它加密后的信息就只有我能听懂了。</p>\n<p>C：让我先看看你是不是服务器A。（确认是服务器A）那我再给你说个秘密Z，这次用你给我的公钥对Z加密，确保其他人都不知道。以后我们用X,Y,Z这三个秘密来验证彼此的消息。我要跟你确认的就这些。</p>\n<p>S：好的，以后我们用X,Y,Z这三个秘密来验证彼此的消息。我要确认的也就这些内容。网上把上面四个步骤描述</p>\n</blockquote>\n<p>网上把上述的四个步骤描述为：</p>\n<ul>\n<li>客户端发出请求<ul>\n<li>支持的协议版本，比如TLS 1.0版</li>\n<li>一个随机数</li>\n<li>支持的加密方法，比如RSA公钥加密</li>\n<li>支持的压缩方法</li>\n</ul>\n</li>\n<li>服务器回应<ul>\n<li>协议的版本</li>\n<li>加密的算法</li>\n<li>生成随机数</li>\n<li>服务器证书</li>\n</ul>\n</li>\n<li>客户端回应<ul>\n<li>对服务器下发的证书进行验证</li>\n<li>再次产生一个随机数（第三个随机数）</li>\n<li>使用服务器证书中的公钥进行加密</li>\n<li>发送编码改变的消息</li>\n<li>发送整个前面所有消息的hash值</li>\n<li>根据三个随机数生成对话密钥</li>\n</ul>\n</li>\n<li>服务器最终回应<ul>\n<li>使用私钥解密接收到第三个随机数</li>\n<li>验证数据完整性</li>\n<li>使用跟客户端同样的方式生成对话密钥</li>\n<li>告知客户端已经切换到协商过的加密套件状态</li>\n<li>服务端发送消息验证加解密是否成功</li>\n</ul>\n</li>\n</ul>\n<p>如果服务器需要对客户端的身份进行认证，那么在第一次服务器回应中可以向客户端索取证书。客户端提供证书后，服务器通过验证客户端证书，从而验证客户端的身份。</p>\n","excerpt":"","more":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>最近好像跟HTTPS较上劲了，前几天的职级答辩问到了相关问题，最近维护的系统升级也碰到相关问题。</p>\n<p>自己对HTTPS了解的并不多，今天简单了解了一下，在此做个记录。</p>\n<p>首先有几个基本概念，TCP/IP协议，HTTP一些，对称/非对称加密，证书，公钥/私钥。</p>\n<p>TCP/TP：</p>\n<ul>\n<li>传输层协议，主要解决数据如何在网络中传输</li>\n</ul>\n<p>HTTP：</p>\n<ul>\n<li>应用层协议，主要解决如何包装数据，依赖TCP/IP协议</li>\n</ul>\n<p>对称加密：</p>\n<ul>\n<li>加密密钥能够从解密密钥中推算出来，同时解密密钥也可以从加密密钥中推算出来</li>\n</ul>\n<p>非对称加密：</p>\n<ul>\n<li>加密和解密过程使用了不同的密钥。分为公钥和私钥，它们可以互相解密。</li>\n<li>公钥加密，私钥解密</li>\n<li>私钥数字签名，公钥验证</li>\n</ul>\n<p>证书：</p>\n<ul>\n<li>我理解主要是两个作用：验证证书持有者身份、提供证书持有者公钥</li>\n</ul>\n<h2 id=\"为什么用HTTPS\"><a href=\"#为什么用HTTPS\" class=\"headerlink\" title=\"为什么用HTTPS\"></a>为什么用HTTPS</h2><p>因为HTTP不安全。</p>\n<ol>\n<li>HTTP使用的是明文传输，容易被窃取</li>\n<li>无法验证报文完整性，可能被篡改</li>\n<li>无法验证通信双方的身份</li>\n</ol>\n<p>为了对HTTP提供安全保障，就依赖：</p>\n<h3 id=\"SSL与TLS\"><a href=\"#SSL与TLS\" class=\"headerlink\" title=\"SSL与TLS\"></a>SSL与TLS</h3><p>SSL（Secure Socket Layer，安全套接字层）</p>\n<p>TLS（Transport Layer Security，传输层安全协议）</p>\n<p>TLS可以理解为SSL的增强版。</p>\n<p>HTTP直接与TCP通信，而在HTTPS中首先与SSL通信，SSL再与TCP通信。我觉得可以理解成HTTPS = HTTP + SSL。</p>\n<p>不论HTTP还是HTTPS，所有的通信、加解密都是最终都是建立在TCP/IP之上的。</p>\n<h2 id=\"加密思路\"><a href=\"#加密思路\" class=\"headerlink\" title=\"加密思路\"></a>加密思路</h2><ol>\n<li>客户端向服务器端索要并验证公钥；</li>\n<li>双方协商生成”对话密钥”；</li>\n<li>双方采用”对话密钥”进行加密通信；</li>\n</ol>\n<p>在通信过程中其实双方使用的还是对称的加密算法，但是为了让这个对称的加密算法足够安全。首先使用非对称的算法来获取对话密钥，之后再用对话密钥来对通信的内容加密解密。</p>\n<p>所以关键问题就变成了：</p>\n<h2 id=\"对话密钥的创建\"><a href=\"#对话密钥的创建\" class=\"headerlink\" title=\"对话密钥的创建\"></a>对话密钥的创建</h2><p>我没有仔细阅读相关协议，在网上查了一些资料，下面的内容是根据自己的理解写的。</p>\n<p>简单描述一次对话密钥的获取过程：</p>\n<blockquote>\n<p>C：我想跟服务器A说悄悄话，我支持1,2,3版本的协议。我先跟你说个秘密X。</p>\n<p>S：我是服务器A。我们用3版本的协议说话吧，我也给你说个秘密Y。我再给你个公钥，使用它加密后的信息就只有我能听懂了。</p>\n<p>C：让我先看看你是不是服务器A。（确认是服务器A）那我再给你说个秘密Z，这次用你给我的公钥对Z加密，确保其他人都不知道。以后我们用X,Y,Z这三个秘密来验证彼此的消息。我要跟你确认的就这些。</p>\n<p>S：好的，以后我们用X,Y,Z这三个秘密来验证彼此的消息。我要确认的也就这些内容。网上把上面四个步骤描述</p>\n</blockquote>\n<p>网上把上述的四个步骤描述为：</p>\n<ul>\n<li>客户端发出请求<ul>\n<li>支持的协议版本，比如TLS 1.0版</li>\n<li>一个随机数</li>\n<li>支持的加密方法，比如RSA公钥加密</li>\n<li>支持的压缩方法</li>\n</ul>\n</li>\n<li>服务器回应<ul>\n<li>协议的版本</li>\n<li>加密的算法</li>\n<li>生成随机数</li>\n<li>服务器证书</li>\n</ul>\n</li>\n<li>客户端回应<ul>\n<li>对服务器下发的证书进行验证</li>\n<li>再次产生一个随机数（第三个随机数）</li>\n<li>使用服务器证书中的公钥进行加密</li>\n<li>发送编码改变的消息</li>\n<li>发送整个前面所有消息的hash值</li>\n<li>根据三个随机数生成对话密钥</li>\n</ul>\n</li>\n<li>服务器最终回应<ul>\n<li>使用私钥解密接收到第三个随机数</li>\n<li>验证数据完整性</li>\n<li>使用跟客户端同样的方式生成对话密钥</li>\n<li>告知客户端已经切换到协商过的加密套件状态</li>\n<li>服务端发送消息验证加解密是否成功</li>\n</ul>\n</li>\n</ul>\n<p>如果服务器需要对客户端的身份进行认证，那么在第一次服务器回应中可以向客户端索取证书。客户端提供证书后，服务器通过验证客户端证书，从而验证客户端的身份。</p>\n"},{"title":"IoC容器的简单实现","date":"2016-11-10T15:44:15.000Z","_content":"\n记录临摹一个IoC容器的过程，使用对象容器进行控制反转，将对象间依赖关系的管理交给容器。\n\n代码在[这里](https://github.com/zhanghTK/HelloIoC)，API参照了Spring IoC部分，实现的具体过程参照了[tiny-spring](https://github.com/code4craft/tiny-spring)和[ioc-sample](https://github.com/kevinlynx/ioc-sample)。先看看如何使用：\n\n# 像Spring一样用\n\n```xml\n<beans>\n    <bean name=\"helloWorldOutputService\"\n          class=\"tk.zhangh.ioc.beans.HelloWorldOutputServiceImpl\">\n        <property name=\"name\" value=\"helloWorld\"/>\n        <property name=\"outputService\" ref=\"outputService\"/>\n    </bean>\n</beans>\n```\n\n```java\n@Test\npublic void register_get_bean_by_ClassPathXmlApplicationContextTest() throws Exception {\n    ApplicationContext applicationContext = new\n      ClassPathXmlApplicationContext(\"ioc.xml\");\n    HelloWorldService helloWorldService = (HelloWorldService)\n      applicationContext.getBean(\"helloWorldOutputService\");\n    helloWorldService.sayHello();\n}\n```\n\n---\n\n整个开发过程是这样的：\n\n# 自下而上\n\n大体的开发步骤以及思路参照了[tiny-spring](https://github.com/code4craft/tiny-spring)，实现步骤可以简述为：\n\n## 1.全手动式的Bean容器\n\n做容器的最重要的就是存取，针对bean容器就是bean信息的保存（注册）和bean实例的获取。\n\n- bean信息注册\n\n  bean的基本信息包括：bean的名称、bean实例、bean的Class信息，bean的属性信息，把这些基本信息封装成了`BeanDefinition`。\n\n  以`key(beanName)=>value(BeanDefinition)`的键值对就可以完成注册的功能\n\n- bean实例获取\n\n  从bean信息到bean实例中间还有一条鸿沟：怎么实例化bean。\n\n  为了方便实现，在初始化`BeanDefinition`实例的时候也对bean进行了初始化。\n\n\n站在客户端角度，怎么注册bean并不重要，因此bean容器接口只声明获取bena的方法。\n\n在`BeanDefinition`中实例化bean带来一个严重问题：bean实例的创建不受容器控制的。\n\n## 2. 定制Bean的实例化过程\n\n针对上面的问题，`AbstractBeanFactory`抽象出实例化bean方法，并在`AutowireCapableBeanFactory`提供基板实现。在`BeanDefinition`中并不需要再实例化了（代码实现到这一步时没有修改,bug）。\n\n新的`AutowireCapableBeanFactory`已经可以做到：\n\n1. 注册保存`BeanDefinition`\n2. 在注册时实例化bean\n3. 提供bean实例的获取\n\n现在，bean的实例化是受控于容器的。\n\n但是初始化的时机不够灵活，整个生命周期只有在注册时刻有唯一一次初始化。\n\n这样会影响bean实例属性的初始化，先看基本属性：\n\n## 3. 支持基本属性依赖\n\n对基本属性支持比较简单，整个过程完全由容器控制：\n\n1. 根据`BeanDefinition`获取bean相关的属性信息\n2. 创建对应的属性对象\n3. 使用反射注入属性\n\n在bean实例构造完成后就对属性注入，但是现有的方案并不能支持bean属性的注入：\n\n1. 属性bean从哪里来\n2. bean属性本身依赖其他bean呢？如果存在循环依赖呢？\n\n## 4. 使用资源文件配置\n\n解决bean属性问题前，先完成支持资源文件的管理。\n\n1. 创建资源文件表示类，以及资源加载类\n2. 创建信息读取接口，抽象类，以及具体的XML配置读取策略类\n\n添加对资源文件配置支持后，整个bean容器的过程为：\n\n1. 读取加载配置文件信息\n2. 创建beanfactory\n3. 注册保存bean信息\n   1. 创建bean实例\n   2. 设置bean实例的属性\n\n支持资源文件配置后原来需要硬编码的bean信息可以以配置文件的形式展示。\n\n但是，bean的实例构造时机、属性注入的时机没有改变，所以依赖存在对bean属性的支持问题。\n\n## 5. 支持bean属性依赖\n\n前面碰到的两个问题：\n\n1. 属性bean从哪里来\n2. bean属性本身依赖其他bean呢？如果存在循环依赖呢？\n\n属性bean也是bean，所以应该从工厂获取，循环依赖问题在Spring里是通过延迟实例化解决。\n\n所以问题变成了怎么调整bean实例构造时机，让这个过程延迟，发生在所有bean注册完成后。\n\n调整：在注册时只保存`BeanDefinition`，不对bena进行实例化。\n\n所有bean的实例化延迟到第一次获取bean实例时再进行：\n\n1. 先创建bean实例\n2. 遍历所有属性，基本属性直接注入，如果是其他bean引用重复以上过程。\n\n## 6. 进一步简化\n\n回头看现在的客户端使用：\n\n1. 加载资源\n2. 解析资源\n3. 创建beanFactory\n4. 注册bean\n5. 获取bean\n\n前四步实际是beanFactory的生命周期内容，客户端不关心这些细节，只要提供配置文件就可以。\n\n所以使用`ApplicationContext`接口对外暴露获取bean的方法。\n\nbean加载，解析，存取功能分别委托给：`BeanDefinitionReader`， `AbstractBeanFactory`。\n\n整个Bean容器生命周期细节都可以封装起来，对外提供简单调用。\n\n\n\n至此，一个简单的IoC容器就完成了\n\n---\n\n# 自上而下\n\n俯视这个IoC容器，基本的生命周期活动包括了：\n\n1. 资源加载\n2. 资源解析\n3. bean factory创建\n4. bean注册\n5. 创建bean实例\n6. bean获取\n\n所有的步骤都是以接口或抽象方法的形式提供或者是多态留白，具体的实现都交由子类实现。\n\n|       步骤       |                   抽象方法                   |\n| :------------: | :--------------------------------------: |\n|      资源加载      |        Resources.getInputStream()        |\n|      资源解析      | BeanDefinitionReader.loadBeanDefinitions(String) |\n| bean factory创建 |      this.beanFactory = beanFactory      |\n|     bean注册     | AbstractBeanFactory.registerBeanDefinition(String, BeanDefinition) |\n|    bean实例化     | AbstractBeanFactory.doCreateBean(BeanDefinition) |\n|     bean获取     |       BeanFactory.getBean(String)        |\n\n各个模块的耦合以接口留白的形式而非具体实现类为扩展带来了极大的灵活。\n\n在实现的时候并没有考虑这些，但实现完成后发现接口带来的灵活极大的方便了修改和扩展。\n","source":"_posts/IoC容器的简单实现.md","raw":"---\ntitle: IoC容器的简单实现\ndate: 2016-11-10 23:44:15\ntags:\n  - Java\ncategories: Java\n\n---\n\n记录临摹一个IoC容器的过程，使用对象容器进行控制反转，将对象间依赖关系的管理交给容器。\n\n代码在[这里](https://github.com/zhanghTK/HelloIoC)，API参照了Spring IoC部分，实现的具体过程参照了[tiny-spring](https://github.com/code4craft/tiny-spring)和[ioc-sample](https://github.com/kevinlynx/ioc-sample)。先看看如何使用：\n\n# 像Spring一样用\n\n```xml\n<beans>\n    <bean name=\"helloWorldOutputService\"\n          class=\"tk.zhangh.ioc.beans.HelloWorldOutputServiceImpl\">\n        <property name=\"name\" value=\"helloWorld\"/>\n        <property name=\"outputService\" ref=\"outputService\"/>\n    </bean>\n</beans>\n```\n\n```java\n@Test\npublic void register_get_bean_by_ClassPathXmlApplicationContextTest() throws Exception {\n    ApplicationContext applicationContext = new\n      ClassPathXmlApplicationContext(\"ioc.xml\");\n    HelloWorldService helloWorldService = (HelloWorldService)\n      applicationContext.getBean(\"helloWorldOutputService\");\n    helloWorldService.sayHello();\n}\n```\n\n---\n\n整个开发过程是这样的：\n\n# 自下而上\n\n大体的开发步骤以及思路参照了[tiny-spring](https://github.com/code4craft/tiny-spring)，实现步骤可以简述为：\n\n## 1.全手动式的Bean容器\n\n做容器的最重要的就是存取，针对bean容器就是bean信息的保存（注册）和bean实例的获取。\n\n- bean信息注册\n\n  bean的基本信息包括：bean的名称、bean实例、bean的Class信息，bean的属性信息，把这些基本信息封装成了`BeanDefinition`。\n\n  以`key(beanName)=>value(BeanDefinition)`的键值对就可以完成注册的功能\n\n- bean实例获取\n\n  从bean信息到bean实例中间还有一条鸿沟：怎么实例化bean。\n\n  为了方便实现，在初始化`BeanDefinition`实例的时候也对bean进行了初始化。\n\n\n站在客户端角度，怎么注册bean并不重要，因此bean容器接口只声明获取bena的方法。\n\n在`BeanDefinition`中实例化bean带来一个严重问题：bean实例的创建不受容器控制的。\n\n## 2. 定制Bean的实例化过程\n\n针对上面的问题，`AbstractBeanFactory`抽象出实例化bean方法，并在`AutowireCapableBeanFactory`提供基板实现。在`BeanDefinition`中并不需要再实例化了（代码实现到这一步时没有修改,bug）。\n\n新的`AutowireCapableBeanFactory`已经可以做到：\n\n1. 注册保存`BeanDefinition`\n2. 在注册时实例化bean\n3. 提供bean实例的获取\n\n现在，bean的实例化是受控于容器的。\n\n但是初始化的时机不够灵活，整个生命周期只有在注册时刻有唯一一次初始化。\n\n这样会影响bean实例属性的初始化，先看基本属性：\n\n## 3. 支持基本属性依赖\n\n对基本属性支持比较简单，整个过程完全由容器控制：\n\n1. 根据`BeanDefinition`获取bean相关的属性信息\n2. 创建对应的属性对象\n3. 使用反射注入属性\n\n在bean实例构造完成后就对属性注入，但是现有的方案并不能支持bean属性的注入：\n\n1. 属性bean从哪里来\n2. bean属性本身依赖其他bean呢？如果存在循环依赖呢？\n\n## 4. 使用资源文件配置\n\n解决bean属性问题前，先完成支持资源文件的管理。\n\n1. 创建资源文件表示类，以及资源加载类\n2. 创建信息读取接口，抽象类，以及具体的XML配置读取策略类\n\n添加对资源文件配置支持后，整个bean容器的过程为：\n\n1. 读取加载配置文件信息\n2. 创建beanfactory\n3. 注册保存bean信息\n   1. 创建bean实例\n   2. 设置bean实例的属性\n\n支持资源文件配置后原来需要硬编码的bean信息可以以配置文件的形式展示。\n\n但是，bean的实例构造时机、属性注入的时机没有改变，所以依赖存在对bean属性的支持问题。\n\n## 5. 支持bean属性依赖\n\n前面碰到的两个问题：\n\n1. 属性bean从哪里来\n2. bean属性本身依赖其他bean呢？如果存在循环依赖呢？\n\n属性bean也是bean，所以应该从工厂获取，循环依赖问题在Spring里是通过延迟实例化解决。\n\n所以问题变成了怎么调整bean实例构造时机，让这个过程延迟，发生在所有bean注册完成后。\n\n调整：在注册时只保存`BeanDefinition`，不对bena进行实例化。\n\n所有bean的实例化延迟到第一次获取bean实例时再进行：\n\n1. 先创建bean实例\n2. 遍历所有属性，基本属性直接注入，如果是其他bean引用重复以上过程。\n\n## 6. 进一步简化\n\n回头看现在的客户端使用：\n\n1. 加载资源\n2. 解析资源\n3. 创建beanFactory\n4. 注册bean\n5. 获取bean\n\n前四步实际是beanFactory的生命周期内容，客户端不关心这些细节，只要提供配置文件就可以。\n\n所以使用`ApplicationContext`接口对外暴露获取bean的方法。\n\nbean加载，解析，存取功能分别委托给：`BeanDefinitionReader`， `AbstractBeanFactory`。\n\n整个Bean容器生命周期细节都可以封装起来，对外提供简单调用。\n\n\n\n至此，一个简单的IoC容器就完成了\n\n---\n\n# 自上而下\n\n俯视这个IoC容器，基本的生命周期活动包括了：\n\n1. 资源加载\n2. 资源解析\n3. bean factory创建\n4. bean注册\n5. 创建bean实例\n6. bean获取\n\n所有的步骤都是以接口或抽象方法的形式提供或者是多态留白，具体的实现都交由子类实现。\n\n|       步骤       |                   抽象方法                   |\n| :------------: | :--------------------------------------: |\n|      资源加载      |        Resources.getInputStream()        |\n|      资源解析      | BeanDefinitionReader.loadBeanDefinitions(String) |\n| bean factory创建 |      this.beanFactory = beanFactory      |\n|     bean注册     | AbstractBeanFactory.registerBeanDefinition(String, BeanDefinition) |\n|    bean实例化     | AbstractBeanFactory.doCreateBean(BeanDefinition) |\n|     bean获取     |       BeanFactory.getBean(String)        |\n\n各个模块的耦合以接口留白的形式而非具体实现类为扩展带来了极大的灵活。\n\n在实现的时候并没有考虑这些，但实现完成后发现接口带来的灵活极大的方便了修改和扩展。\n","slug":"IoC容器的简单实现","published":1,"updated":"2017-01-07T05:33:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixmu6mrr0007po2ege5f2xu6","content":"<p>记录临摹一个IoC容器的过程，使用对象容器进行控制反转，将对象间依赖关系的管理交给容器。</p>\n<p>代码在<a href=\"https://github.com/zhanghTK/HelloIoC\" target=\"_blank\" rel=\"external\">这里</a>，API参照了Spring IoC部分，实现的具体过程参照了<a href=\"https://github.com/code4craft/tiny-spring\" target=\"_blank\" rel=\"external\">tiny-spring</a>和<a href=\"https://github.com/kevinlynx/ioc-sample\" target=\"_blank\" rel=\"external\">ioc-sample</a>。先看看如何使用：</p>\n<h1 id=\"像Spring一样用\"><a href=\"#像Spring一样用\" class=\"headerlink\" title=\"像Spring一样用\"></a>像Spring一样用</h1><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">name</span>=<span class=\"string\">\"helloWorldOutputService\"</span></span></div><div class=\"line\">          <span class=\"attr\">class</span>=<span class=\"string\">\"tk.zhangh.ioc.beans.HelloWorldOutputServiceImpl\"</span>&gt;</div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"helloWorld\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"outputService\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"outputService\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Test</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">register_get_bean_by_ClassPathXmlApplicationContextTest</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">    ApplicationContext applicationContext = <span class=\"keyword\">new</span></div><div class=\"line\">      ClassPathXmlApplicationContext(<span class=\"string\">\"ioc.xml\"</span>);</div><div class=\"line\">    HelloWorldService helloWorldService = (HelloWorldService)</div><div class=\"line\">      applicationContext.getBean(<span class=\"string\">\"helloWorldOutputService\"</span>);</div><div class=\"line\">    helloWorldService.sayHello();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<p>整个开发过程是这样的：</p>\n<h1 id=\"自下而上\"><a href=\"#自下而上\" class=\"headerlink\" title=\"自下而上\"></a>自下而上</h1><p>大体的开发步骤以及思路参照了<a href=\"https://github.com/code4craft/tiny-spring\" target=\"_blank\" rel=\"external\">tiny-spring</a>，实现步骤可以简述为：</p>\n<h2 id=\"1-全手动式的Bean容器\"><a href=\"#1-全手动式的Bean容器\" class=\"headerlink\" title=\"1.全手动式的Bean容器\"></a>1.全手动式的Bean容器</h2><p>做容器的最重要的就是存取，针对bean容器就是bean信息的保存（注册）和bean实例的获取。</p>\n<ul>\n<li><p>bean信息注册</p>\n<p>bean的基本信息包括：bean的名称、bean实例、bean的Class信息，bean的属性信息，把这些基本信息封装成了<code>BeanDefinition</code>。</p>\n<p>以<code>key(beanName)=&gt;value(BeanDefinition)</code>的键值对就可以完成注册的功能</p>\n</li>\n<li><p>bean实例获取</p>\n<p>从bean信息到bean实例中间还有一条鸿沟：怎么实例化bean。</p>\n<p>为了方便实现，在初始化<code>BeanDefinition</code>实例的时候也对bean进行了初始化。</p>\n</li>\n</ul>\n<p>站在客户端角度，怎么注册bean并不重要，因此bean容器接口只声明获取bena的方法。</p>\n<p>在<code>BeanDefinition</code>中实例化bean带来一个严重问题：bean实例的创建不受容器控制的。</p>\n<h2 id=\"2-定制Bean的实例化过程\"><a href=\"#2-定制Bean的实例化过程\" class=\"headerlink\" title=\"2. 定制Bean的实例化过程\"></a>2. 定制Bean的实例化过程</h2><p>针对上面的问题，<code>AbstractBeanFactory</code>抽象出实例化bean方法，并在<code>AutowireCapableBeanFactory</code>提供基板实现。在<code>BeanDefinition</code>中并不需要再实例化了（代码实现到这一步时没有修改,bug）。</p>\n<p>新的<code>AutowireCapableBeanFactory</code>已经可以做到：</p>\n<ol>\n<li>注册保存<code>BeanDefinition</code></li>\n<li>在注册时实例化bean</li>\n<li>提供bean实例的获取</li>\n</ol>\n<p>现在，bean的实例化是受控于容器的。</p>\n<p>但是初始化的时机不够灵活，整个生命周期只有在注册时刻有唯一一次初始化。</p>\n<p>这样会影响bean实例属性的初始化，先看基本属性：</p>\n<h2 id=\"3-支持基本属性依赖\"><a href=\"#3-支持基本属性依赖\" class=\"headerlink\" title=\"3. 支持基本属性依赖\"></a>3. 支持基本属性依赖</h2><p>对基本属性支持比较简单，整个过程完全由容器控制：</p>\n<ol>\n<li>根据<code>BeanDefinition</code>获取bean相关的属性信息</li>\n<li>创建对应的属性对象</li>\n<li>使用反射注入属性</li>\n</ol>\n<p>在bean实例构造完成后就对属性注入，但是现有的方案并不能支持bean属性的注入：</p>\n<ol>\n<li>属性bean从哪里来</li>\n<li>bean属性本身依赖其他bean呢？如果存在循环依赖呢？</li>\n</ol>\n<h2 id=\"4-使用资源文件配置\"><a href=\"#4-使用资源文件配置\" class=\"headerlink\" title=\"4. 使用资源文件配置\"></a>4. 使用资源文件配置</h2><p>解决bean属性问题前，先完成支持资源文件的管理。</p>\n<ol>\n<li>创建资源文件表示类，以及资源加载类</li>\n<li>创建信息读取接口，抽象类，以及具体的XML配置读取策略类</li>\n</ol>\n<p>添加对资源文件配置支持后，整个bean容器的过程为：</p>\n<ol>\n<li>读取加载配置文件信息</li>\n<li>创建beanfactory</li>\n<li>注册保存bean信息<ol>\n<li>创建bean实例</li>\n<li>设置bean实例的属性</li>\n</ol>\n</li>\n</ol>\n<p>支持资源文件配置后原来需要硬编码的bean信息可以以配置文件的形式展示。</p>\n<p>但是，bean的实例构造时机、属性注入的时机没有改变，所以依赖存在对bean属性的支持问题。</p>\n<h2 id=\"5-支持bean属性依赖\"><a href=\"#5-支持bean属性依赖\" class=\"headerlink\" title=\"5. 支持bean属性依赖\"></a>5. 支持bean属性依赖</h2><p>前面碰到的两个问题：</p>\n<ol>\n<li>属性bean从哪里来</li>\n<li>bean属性本身依赖其他bean呢？如果存在循环依赖呢？</li>\n</ol>\n<p>属性bean也是bean，所以应该从工厂获取，循环依赖问题在Spring里是通过延迟实例化解决。</p>\n<p>所以问题变成了怎么调整bean实例构造时机，让这个过程延迟，发生在所有bean注册完成后。</p>\n<p>调整：在注册时只保存<code>BeanDefinition</code>，不对bena进行实例化。</p>\n<p>所有bean的实例化延迟到第一次获取bean实例时再进行：</p>\n<ol>\n<li>先创建bean实例</li>\n<li>遍历所有属性，基本属性直接注入，如果是其他bean引用重复以上过程。</li>\n</ol>\n<h2 id=\"6-进一步简化\"><a href=\"#6-进一步简化\" class=\"headerlink\" title=\"6. 进一步简化\"></a>6. 进一步简化</h2><p>回头看现在的客户端使用：</p>\n<ol>\n<li>加载资源</li>\n<li>解析资源</li>\n<li>创建beanFactory</li>\n<li>注册bean</li>\n<li>获取bean</li>\n</ol>\n<p>前四步实际是beanFactory的生命周期内容，客户端不关心这些细节，只要提供配置文件就可以。</p>\n<p>所以使用<code>ApplicationContext</code>接口对外暴露获取bean的方法。</p>\n<p>bean加载，解析，存取功能分别委托给：<code>BeanDefinitionReader</code>， <code>AbstractBeanFactory</code>。</p>\n<p>整个Bean容器生命周期细节都可以封装起来，对外提供简单调用。</p>\n<p>至此，一个简单的IoC容器就完成了</p>\n<hr>\n<h1 id=\"自上而下\"><a href=\"#自上而下\" class=\"headerlink\" title=\"自上而下\"></a>自上而下</h1><p>俯视这个IoC容器，基本的生命周期活动包括了：</p>\n<ol>\n<li>资源加载</li>\n<li>资源解析</li>\n<li>bean factory创建</li>\n<li>bean注册</li>\n<li>创建bean实例</li>\n<li>bean获取</li>\n</ol>\n<p>所有的步骤都是以接口或抽象方法的形式提供或者是多态留白，具体的实现都交由子类实现。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">步骤</th>\n<th style=\"text-align:center\">抽象方法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">资源加载</td>\n<td style=\"text-align:center\">Resources.getInputStream()</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">资源解析</td>\n<td style=\"text-align:center\">BeanDefinitionReader.loadBeanDefinitions(String)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">bean factory创建</td>\n<td style=\"text-align:center\">this.beanFactory = beanFactory</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">bean注册</td>\n<td style=\"text-align:center\">AbstractBeanFactory.registerBeanDefinition(String, BeanDefinition)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">bean实例化</td>\n<td style=\"text-align:center\">AbstractBeanFactory.doCreateBean(BeanDefinition)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">bean获取</td>\n<td style=\"text-align:center\">BeanFactory.getBean(String)</td>\n</tr>\n</tbody>\n</table>\n<p>各个模块的耦合以接口留白的形式而非具体实现类为扩展带来了极大的灵活。</p>\n<p>在实现的时候并没有考虑这些，但实现完成后发现接口带来的灵活极大的方便了修改和扩展。</p>\n","excerpt":"","more":"<p>记录临摹一个IoC容器的过程，使用对象容器进行控制反转，将对象间依赖关系的管理交给容器。</p>\n<p>代码在<a href=\"https://github.com/zhanghTK/HelloIoC\">这里</a>，API参照了Spring IoC部分，实现的具体过程参照了<a href=\"https://github.com/code4craft/tiny-spring\">tiny-spring</a>和<a href=\"https://github.com/kevinlynx/ioc-sample\">ioc-sample</a>。先看看如何使用：</p>\n<h1 id=\"像Spring一样用\"><a href=\"#像Spring一样用\" class=\"headerlink\" title=\"像Spring一样用\"></a>像Spring一样用</h1><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">name</span>=<span class=\"string\">\"helloWorldOutputService\"</span></div><div class=\"line\">          <span class=\"attr\">class</span>=<span class=\"string\">\"tk.zhangh.ioc.beans.HelloWorldOutputServiceImpl\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"helloWorld\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"outputService\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"outputService\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Test</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">register_get_bean_by_ClassPathXmlApplicationContextTest</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">    ApplicationContext applicationContext = <span class=\"keyword\">new</span></div><div class=\"line\">      ClassPathXmlApplicationContext(<span class=\"string\">\"ioc.xml\"</span>);</div><div class=\"line\">    HelloWorldService helloWorldService = (HelloWorldService)</div><div class=\"line\">      applicationContext.getBean(<span class=\"string\">\"helloWorldOutputService\"</span>);</div><div class=\"line\">    helloWorldService.sayHello();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<p>整个开发过程是这样的：</p>\n<h1 id=\"自下而上\"><a href=\"#自下而上\" class=\"headerlink\" title=\"自下而上\"></a>自下而上</h1><p>大体的开发步骤以及思路参照了<a href=\"https://github.com/code4craft/tiny-spring\">tiny-spring</a>，实现步骤可以简述为：</p>\n<h2 id=\"1-全手动式的Bean容器\"><a href=\"#1-全手动式的Bean容器\" class=\"headerlink\" title=\"1.全手动式的Bean容器\"></a>1.全手动式的Bean容器</h2><p>做容器的最重要的就是存取，针对bean容器就是bean信息的保存（注册）和bean实例的获取。</p>\n<ul>\n<li><p>bean信息注册</p>\n<p>bean的基本信息包括：bean的名称、bean实例、bean的Class信息，bean的属性信息，把这些基本信息封装成了<code>BeanDefinition</code>。</p>\n<p>以<code>key(beanName)=&gt;value(BeanDefinition)</code>的键值对就可以完成注册的功能</p>\n</li>\n<li><p>bean实例获取</p>\n<p>从bean信息到bean实例中间还有一条鸿沟：怎么实例化bean。</p>\n<p>为了方便实现，在初始化<code>BeanDefinition</code>实例的时候也对bean进行了初始化。</p>\n</li>\n</ul>\n<p>站在客户端角度，怎么注册bean并不重要，因此bean容器接口只声明获取bena的方法。</p>\n<p>在<code>BeanDefinition</code>中实例化bean带来一个严重问题：bean实例的创建不受容器控制的。</p>\n<h2 id=\"2-定制Bean的实例化过程\"><a href=\"#2-定制Bean的实例化过程\" class=\"headerlink\" title=\"2. 定制Bean的实例化过程\"></a>2. 定制Bean的实例化过程</h2><p>针对上面的问题，<code>AbstractBeanFactory</code>抽象出实例化bean方法，并在<code>AutowireCapableBeanFactory</code>提供基板实现。在<code>BeanDefinition</code>中并不需要再实例化了（代码实现到这一步时没有修改,bug）。</p>\n<p>新的<code>AutowireCapableBeanFactory</code>已经可以做到：</p>\n<ol>\n<li>注册保存<code>BeanDefinition</code></li>\n<li>在注册时实例化bean</li>\n<li>提供bean实例的获取</li>\n</ol>\n<p>现在，bean的实例化是受控于容器的。</p>\n<p>但是初始化的时机不够灵活，整个生命周期只有在注册时刻有唯一一次初始化。</p>\n<p>这样会影响bean实例属性的初始化，先看基本属性：</p>\n<h2 id=\"3-支持基本属性依赖\"><a href=\"#3-支持基本属性依赖\" class=\"headerlink\" title=\"3. 支持基本属性依赖\"></a>3. 支持基本属性依赖</h2><p>对基本属性支持比较简单，整个过程完全由容器控制：</p>\n<ol>\n<li>根据<code>BeanDefinition</code>获取bean相关的属性信息</li>\n<li>创建对应的属性对象</li>\n<li>使用反射注入属性</li>\n</ol>\n<p>在bean实例构造完成后就对属性注入，但是现有的方案并不能支持bean属性的注入：</p>\n<ol>\n<li>属性bean从哪里来</li>\n<li>bean属性本身依赖其他bean呢？如果存在循环依赖呢？</li>\n</ol>\n<h2 id=\"4-使用资源文件配置\"><a href=\"#4-使用资源文件配置\" class=\"headerlink\" title=\"4. 使用资源文件配置\"></a>4. 使用资源文件配置</h2><p>解决bean属性问题前，先完成支持资源文件的管理。</p>\n<ol>\n<li>创建资源文件表示类，以及资源加载类</li>\n<li>创建信息读取接口，抽象类，以及具体的XML配置读取策略类</li>\n</ol>\n<p>添加对资源文件配置支持后，整个bean容器的过程为：</p>\n<ol>\n<li>读取加载配置文件信息</li>\n<li>创建beanfactory</li>\n<li>注册保存bean信息<ol>\n<li>创建bean实例</li>\n<li>设置bean实例的属性</li>\n</ol>\n</li>\n</ol>\n<p>支持资源文件配置后原来需要硬编码的bean信息可以以配置文件的形式展示。</p>\n<p>但是，bean的实例构造时机、属性注入的时机没有改变，所以依赖存在对bean属性的支持问题。</p>\n<h2 id=\"5-支持bean属性依赖\"><a href=\"#5-支持bean属性依赖\" class=\"headerlink\" title=\"5. 支持bean属性依赖\"></a>5. 支持bean属性依赖</h2><p>前面碰到的两个问题：</p>\n<ol>\n<li>属性bean从哪里来</li>\n<li>bean属性本身依赖其他bean呢？如果存在循环依赖呢？</li>\n</ol>\n<p>属性bean也是bean，所以应该从工厂获取，循环依赖问题在Spring里是通过延迟实例化解决。</p>\n<p>所以问题变成了怎么调整bean实例构造时机，让这个过程延迟，发生在所有bean注册完成后。</p>\n<p>调整：在注册时只保存<code>BeanDefinition</code>，不对bena进行实例化。</p>\n<p>所有bean的实例化延迟到第一次获取bean实例时再进行：</p>\n<ol>\n<li>先创建bean实例</li>\n<li>遍历所有属性，基本属性直接注入，如果是其他bean引用重复以上过程。</li>\n</ol>\n<h2 id=\"6-进一步简化\"><a href=\"#6-进一步简化\" class=\"headerlink\" title=\"6. 进一步简化\"></a>6. 进一步简化</h2><p>回头看现在的客户端使用：</p>\n<ol>\n<li>加载资源</li>\n<li>解析资源</li>\n<li>创建beanFactory</li>\n<li>注册bean</li>\n<li>获取bean</li>\n</ol>\n<p>前四步实际是beanFactory的生命周期内容，客户端不关心这些细节，只要提供配置文件就可以。</p>\n<p>所以使用<code>ApplicationContext</code>接口对外暴露获取bean的方法。</p>\n<p>bean加载，解析，存取功能分别委托给：<code>BeanDefinitionReader</code>， <code>AbstractBeanFactory</code>。</p>\n<p>整个Bean容器生命周期细节都可以封装起来，对外提供简单调用。</p>\n<p>至此，一个简单的IoC容器就完成了</p>\n<hr>\n<h1 id=\"自上而下\"><a href=\"#自上而下\" class=\"headerlink\" title=\"自上而下\"></a>自上而下</h1><p>俯视这个IoC容器，基本的生命周期活动包括了：</p>\n<ol>\n<li>资源加载</li>\n<li>资源解析</li>\n<li>bean factory创建</li>\n<li>bean注册</li>\n<li>创建bean实例</li>\n<li>bean获取</li>\n</ol>\n<p>所有的步骤都是以接口或抽象方法的形式提供或者是多态留白，具体的实现都交由子类实现。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">步骤</th>\n<th style=\"text-align:center\">抽象方法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">资源加载</td>\n<td style=\"text-align:center\">Resources.getInputStream()</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">资源解析</td>\n<td style=\"text-align:center\">BeanDefinitionReader.loadBeanDefinitions(String)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">bean factory创建</td>\n<td style=\"text-align:center\">this.beanFactory = beanFactory</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">bean注册</td>\n<td style=\"text-align:center\">AbstractBeanFactory.registerBeanDefinition(String, BeanDefinition)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">bean实例化</td>\n<td style=\"text-align:center\">AbstractBeanFactory.doCreateBean(BeanDefinition)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">bean获取</td>\n<td style=\"text-align:center\">BeanFactory.getBean(String)</td>\n</tr>\n</tbody>\n</table>\n<p>各个模块的耦合以接口留白的形式而非具体实现类为扩展带来了极大的灵活。</p>\n<p>在实现的时候并没有考虑这些，但实现完成后发现接口带来的灵活极大的方便了修改和扩展。</p>\n"},{"title":"Test","date":"2017-01-07T05:48:23.000Z","_content":"\nTEST CI.\n","source":"_posts/Test.md","raw":"---\ntitle: Test\ndate: 2017-01-07 13:48:23\ntags:\n---\n\nTEST CI.\n","slug":"Test","published":1,"updated":"2017-01-07T05:48:53.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixmu6mru0009po2ev9us2yid","content":"<p>TEST CI.</p>\n","excerpt":"","more":"<p>TEST CI.</p>\n"},{"title":"Java内存区域","date":"2016-08-14T15:02:39.000Z","_content":"\n![Java内存区域.png](https://ooo.0o0.ooo/2016/08/14/57b08be587b3a.png)\n","source":"_posts/Java内存区域.md","raw":"---\ntitle: Java内存区域\ndate: 2016-08-14 23:02:39\ntags:\n  - daily\n  - JVM\n  - Java\ncategories: Java\n\n---\n\n![Java内存区域.png](https://ooo.0o0.ooo/2016/08/14/57b08be587b3a.png)\n","slug":"Java内存区域","published":1,"updated":"2017-01-07T05:33:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixmu6mrx000cpo2e66iqho9u","content":"<p><img src=\"https://ooo.0o0.ooo/2016/08/14/57b08be587b3a.png\" alt=\"Java内存区域.png\"></p>\n","excerpt":"","more":"<p><img src=\"https://ooo.0o0.ooo/2016/08/14/57b08be587b3a.png\" alt=\"Java内存区域.png\"></p>\n"},{"title":"ThreadLocal小记","date":"2016-09-11T11:33:39.000Z","_content":"\n# ThreadLocal\n\n最近《Java并发编程实战》第三章谈及了对象共享的问题。对共享的可变数据最简单粗暴的做法当然是同步，但是同步的缺点也很明显，代码复杂可维护性降低。针对这个问题，书上谈及到了通过线程封闭避免同步，其中的ThreadLocal类就是帮助维持线程封闭性的。\n\n之前对ThreadLocal的认识非常简单，就是把一个变量绑定到线程上。参照网上的例子自己也实现了类似功能的例子ThreadLocalVariable(https://github.com/zhanghTK/HelloJava/blob/master/src/main/java/tk/zhangh/java/thread/ThreadLocalVariable.java)，但总的来说没什么体会。今天参照别人的文章看了一下ThreadLocal的实现，发现还是有蛮多注意点的。\n\n看JDK之前想当然的以为ThreadLocal应该就是简单对`Map<Thread, Object>`做一个封装，然而实际并没有这么简单。参照了网上一些文章的说法，早期的ThreadLocal确实是这样实现的。但是这样实现存在一些问题：\n\n1. 线程安全问题，如果使用线程安全的Map实现那么就会带来性能问题，当有大量的线程使用ThreadLocal，伴随着线程生命周期ThreadLocal也需要频繁向底层的Map添加删除数据。\n2. 内存回收问题，用Thread当key，除非手动调用remove，否则即使线程退出了会导致：1)该Thread对象无法回收；2)该线程在所有ThreadLocal中对应的value也无法回收。\n\nThreadLocal实际给出了不同的实现方式。首先绑定到线程的变量没有维护在ThreadLocal内，而是维护在各个Thread类实例内——在Thread类内使用了ThreadLocal的静态内部类`ThreadLocalMap`实例去维护需要绑定到线程的变量。这样原本需要维护在ThreadLocal内的数据现在就分散到了各个线程内去维护。\n\n\n\n在Thread中ThreadLocalMap的声明长这样：\n\n```java\n// 真的就只是声明了一下，什么都没干    \nThreadLocal.ThreadLocalMap threadLocals = null;\n```\n\n\n\nThreadLocal一共只有五个非私有的方法，首先是两个并没有什么卵用的方法：\n\n```java\n// 构造，什么都没干\npublic ThreadLocal() {}\n\n// 设置ThreadLocal的初始值，protected很明显是希望子类重写\nprotected T initialValue() {return null}\n```\n\n看看其余三个方法的实现（JDK8）\n\n```java\n    public T get() {\n        Thread t = Thread.currentThread();\n        // 从线程里获取ThreadLocalMap\n        ThreadLocalMap map = getMap(t);\n        if (map != null) {\n            // 根据ThreadLocal实例获取Entity\n            // 一会看ThreadLocal的实现\n            // 暂时可以看做类似Map<ThreadLocal,Object>\n            // 注意key类型是ThreadLocal，不是Thread\n            ThreadLocalMap.Entry e = map.getEntry(this);\n            if (e != null) {\n                @SuppressWarnings(\"unchecked\")\n                T result = (T)e.value;\n                return result;\n            }\n        }\n        // 如果获得的map为null或者从map通过key获取的value为空时获取一个初始值\n        // setInitialValue方法里调用了initialValue方法\n        // 宝宝不管，反正宝宝想要有值，宝宝不想为null\n        return setInitialValue();\n    }\n\n    public void set(T value) {\n        Thread t = Thread.currentThread();\n        ThreadLocalMap map = getMap(t);\n        if (map != null)\n            // 没什么说的set进去\n            map.set(this, value);\n        else\n            // 当map不存在时，使用初始值创建一个\n            createMap(t, value);\n    }\n\n     public void remove() {\n         ThreadLocalMap m = getMap(Thread.currentThread());\n         if (m != null)\n             // 没什么说的，remove掉\n             m.remove(this);\n     }\n    \n    ThreadLocalMap getMap(Thread t) {\n        // 你给我一个线程，我换你一个map\n        return t.threadLocals;\n    }\n```\nThreadLocal所有的操作都是围绕着内部类ThreadLocalMap的，ThreadLocal只是让ThreadLocalMap更加容易访问。咦，有点耳熟，没错外观模式。\n\n下面看一下ThreadLocal的静态内部类ThreadLocalMap，JDK文档对它的描述主要集中在一下几点：\n\n1. 是什么：定制的hash map用于维护本地线程变量\n2. 可见性：ThreadLocal之外没有任何方法可访问，Thread类使用它定义了私有属性\n3. 特殊性：为了管理大对象、长生命周期对象，使用WeakReference包装ThreadLocal对象作为key\n\n前面两点没什么好说的，主要是第三点：key使用了弱引用类型管理（关于弱引用可以先参考https://github.com/zhanghTK/HelloJava/blob/master/src/main/java/tk/zhangh/java/jvm/reference/ReferenceTest.java，后面我会单独写文章记录Java引用的使用，先挖个坑）。\n\n![image](http://img.blog.csdn.net/20160121000731607)\n\n图片来自互联网，实线表示强引用，虚线表示弱引用。\n\n简而言之，一个对象在没有强引用引用，只有弱引用引用时，当GC发生这个对象就会被标记回收。将ThreadLocal对象设置成弱引用作为key的好处是显而易见：当ThreadLocal没有任何强引用引用时，只有ThreadLocalMap的Entry对它存在弱引用，这样GC的时候这个ThreadLocal对象就可以被回收了。但是这又带来了一个问题：Entry的key可能被回收了，但留下了一个并没有什么卵用的value。只要线程生命周期不结束，那么这个value对象始终保持了一个强引用链条：\n\nThread Ref -> Thread -> ThreadLocalMap -> Entry -> value\n\n当内存有大量驻留的线程时，因为强引用存在，GC始终无法回收，就导致了内存泄漏。\n\n真对这个问题ThreadLocalMap在实现的时候也采取了一些防护措施，比如ThreadLocalMap的get（set，remove方法也类似，限于篇幅不展开了）：\n\n```java\n    private Entry getEntry(ThreadLocal<?> key) {\n        // hash函数获取索引位置\n        int i = key.threadLocalHashCode & (table.length - 1);\n        Entry e = table[i];\n        if (e != null && e.get() == key)\n            // 命中了\n            return e;\n        else\n            // miss了\n            return getEntryAfterMiss(key, i, e);\n    }\n\n    private Entry getEntryAfterMiss(ThreadLocal<?> key, int i, Entry e) {\n        Entry[] tab = table;\n        int len = tab.length;\n\t\t\n        // 遍历table\n        while (e != null) {\n            ThreadLocal<?> k = e.get();\n            if (k == key)\n                // 找到了\n                return e;\n            if (k == null)\n                // 发现key为空（也就是上面描述的内存泄漏的情况），做删除\n                expungeStaleEntry(i);\n            else\n                // 找下一个Entty位置\n                i = nextIndex(i, len);\n            e = tab[i];\n        }\n        return null;\n    }\n```\n\n在get的过程中凡是碰到了key为null的Entry，这个Entry就会被擦除，从而避免内存泄漏。类似的思路在set，remove方法中都有实现。针对内存泄漏问题ThreadLocal实际是需要手动触发函数删除key为null的Entry，所以当不要再需要一个变量当定到线程时手动的remove还是很有必要的。\n\n\n\n最后，在网上看到对ThreadLocal有多种说法：ThreadLocal为解决多线程程序的并发问题提供了一种新的思路；ThreadLocal的目的是为了解决多线程访问资源时的共享问题。\n\n关于第一种说法我觉得是部分正确的，ThreadLocal将需要共享的对象封闭在了线程内确实解决了并发的一部分问题，但并不是万能的。比如重写initialValue方法时返回的是一个全局共享的对象，那实际上ThreadLocal只是把这个全局共享的对象又封装到了Thread对象里，ThreadLocal本身并没有做类似深拷贝的操作，因此这个变量依然是线程不安全的（逸出）。\n\n关于第二种说法，我觉得问题就比较大了。ThreadLocal根本不是为了线程间共享，实际是为了将状态封闭在线程内以确保线程安全。这样做确实带来了访问共享状态的便利，但这个状态的共享是在单个线程内的，而不是线程之间的。比如在action中将session对象绑定在线程内，在service、dao里都可以方便的共享，但所有的共享都是在单个的线程内部，而不是在多个的线程之间共享。\n\n\n\n参考资料：\n\n《Java并发编程实战》\n\nJDK8帮助手册\n\nhttp://qifuguang.me/2015/09/02/[Java%E5%B9%B6%E5%8F%91%E5%8C%85%E5%AD%A6%E4%B9%A0%E4%B8%83]%E8%A7%A3%E5%AF%86ThreadLocal/\n\nhttp://my.oschina.net/xianggao/blog/392440#navbar-header\n","source":"_posts/ThreadLocal小记.md","raw":"---\ntitle: ThreadLocal小记\ndate: 2016-09-11 19:33:39\ntags: Java\ncategories: Java\n---\n\n# ThreadLocal\n\n最近《Java并发编程实战》第三章谈及了对象共享的问题。对共享的可变数据最简单粗暴的做法当然是同步，但是同步的缺点也很明显，代码复杂可维护性降低。针对这个问题，书上谈及到了通过线程封闭避免同步，其中的ThreadLocal类就是帮助维持线程封闭性的。\n\n之前对ThreadLocal的认识非常简单，就是把一个变量绑定到线程上。参照网上的例子自己也实现了类似功能的例子ThreadLocalVariable(https://github.com/zhanghTK/HelloJava/blob/master/src/main/java/tk/zhangh/java/thread/ThreadLocalVariable.java)，但总的来说没什么体会。今天参照别人的文章看了一下ThreadLocal的实现，发现还是有蛮多注意点的。\n\n看JDK之前想当然的以为ThreadLocal应该就是简单对`Map<Thread, Object>`做一个封装，然而实际并没有这么简单。参照了网上一些文章的说法，早期的ThreadLocal确实是这样实现的。但是这样实现存在一些问题：\n\n1. 线程安全问题，如果使用线程安全的Map实现那么就会带来性能问题，当有大量的线程使用ThreadLocal，伴随着线程生命周期ThreadLocal也需要频繁向底层的Map添加删除数据。\n2. 内存回收问题，用Thread当key，除非手动调用remove，否则即使线程退出了会导致：1)该Thread对象无法回收；2)该线程在所有ThreadLocal中对应的value也无法回收。\n\nThreadLocal实际给出了不同的实现方式。首先绑定到线程的变量没有维护在ThreadLocal内，而是维护在各个Thread类实例内——在Thread类内使用了ThreadLocal的静态内部类`ThreadLocalMap`实例去维护需要绑定到线程的变量。这样原本需要维护在ThreadLocal内的数据现在就分散到了各个线程内去维护。\n\n\n\n在Thread中ThreadLocalMap的声明长这样：\n\n```java\n// 真的就只是声明了一下，什么都没干    \nThreadLocal.ThreadLocalMap threadLocals = null;\n```\n\n\n\nThreadLocal一共只有五个非私有的方法，首先是两个并没有什么卵用的方法：\n\n```java\n// 构造，什么都没干\npublic ThreadLocal() {}\n\n// 设置ThreadLocal的初始值，protected很明显是希望子类重写\nprotected T initialValue() {return null}\n```\n\n看看其余三个方法的实现（JDK8）\n\n```java\n    public T get() {\n        Thread t = Thread.currentThread();\n        // 从线程里获取ThreadLocalMap\n        ThreadLocalMap map = getMap(t);\n        if (map != null) {\n            // 根据ThreadLocal实例获取Entity\n            // 一会看ThreadLocal的实现\n            // 暂时可以看做类似Map<ThreadLocal,Object>\n            // 注意key类型是ThreadLocal，不是Thread\n            ThreadLocalMap.Entry e = map.getEntry(this);\n            if (e != null) {\n                @SuppressWarnings(\"unchecked\")\n                T result = (T)e.value;\n                return result;\n            }\n        }\n        // 如果获得的map为null或者从map通过key获取的value为空时获取一个初始值\n        // setInitialValue方法里调用了initialValue方法\n        // 宝宝不管，反正宝宝想要有值，宝宝不想为null\n        return setInitialValue();\n    }\n\n    public void set(T value) {\n        Thread t = Thread.currentThread();\n        ThreadLocalMap map = getMap(t);\n        if (map != null)\n            // 没什么说的set进去\n            map.set(this, value);\n        else\n            // 当map不存在时，使用初始值创建一个\n            createMap(t, value);\n    }\n\n     public void remove() {\n         ThreadLocalMap m = getMap(Thread.currentThread());\n         if (m != null)\n             // 没什么说的，remove掉\n             m.remove(this);\n     }\n    \n    ThreadLocalMap getMap(Thread t) {\n        // 你给我一个线程，我换你一个map\n        return t.threadLocals;\n    }\n```\nThreadLocal所有的操作都是围绕着内部类ThreadLocalMap的，ThreadLocal只是让ThreadLocalMap更加容易访问。咦，有点耳熟，没错外观模式。\n\n下面看一下ThreadLocal的静态内部类ThreadLocalMap，JDK文档对它的描述主要集中在一下几点：\n\n1. 是什么：定制的hash map用于维护本地线程变量\n2. 可见性：ThreadLocal之外没有任何方法可访问，Thread类使用它定义了私有属性\n3. 特殊性：为了管理大对象、长生命周期对象，使用WeakReference包装ThreadLocal对象作为key\n\n前面两点没什么好说的，主要是第三点：key使用了弱引用类型管理（关于弱引用可以先参考https://github.com/zhanghTK/HelloJava/blob/master/src/main/java/tk/zhangh/java/jvm/reference/ReferenceTest.java，后面我会单独写文章记录Java引用的使用，先挖个坑）。\n\n![image](http://img.blog.csdn.net/20160121000731607)\n\n图片来自互联网，实线表示强引用，虚线表示弱引用。\n\n简而言之，一个对象在没有强引用引用，只有弱引用引用时，当GC发生这个对象就会被标记回收。将ThreadLocal对象设置成弱引用作为key的好处是显而易见：当ThreadLocal没有任何强引用引用时，只有ThreadLocalMap的Entry对它存在弱引用，这样GC的时候这个ThreadLocal对象就可以被回收了。但是这又带来了一个问题：Entry的key可能被回收了，但留下了一个并没有什么卵用的value。只要线程生命周期不结束，那么这个value对象始终保持了一个强引用链条：\n\nThread Ref -> Thread -> ThreadLocalMap -> Entry -> value\n\n当内存有大量驻留的线程时，因为强引用存在，GC始终无法回收，就导致了内存泄漏。\n\n真对这个问题ThreadLocalMap在实现的时候也采取了一些防护措施，比如ThreadLocalMap的get（set，remove方法也类似，限于篇幅不展开了）：\n\n```java\n    private Entry getEntry(ThreadLocal<?> key) {\n        // hash函数获取索引位置\n        int i = key.threadLocalHashCode & (table.length - 1);\n        Entry e = table[i];\n        if (e != null && e.get() == key)\n            // 命中了\n            return e;\n        else\n            // miss了\n            return getEntryAfterMiss(key, i, e);\n    }\n\n    private Entry getEntryAfterMiss(ThreadLocal<?> key, int i, Entry e) {\n        Entry[] tab = table;\n        int len = tab.length;\n\t\t\n        // 遍历table\n        while (e != null) {\n            ThreadLocal<?> k = e.get();\n            if (k == key)\n                // 找到了\n                return e;\n            if (k == null)\n                // 发现key为空（也就是上面描述的内存泄漏的情况），做删除\n                expungeStaleEntry(i);\n            else\n                // 找下一个Entty位置\n                i = nextIndex(i, len);\n            e = tab[i];\n        }\n        return null;\n    }\n```\n\n在get的过程中凡是碰到了key为null的Entry，这个Entry就会被擦除，从而避免内存泄漏。类似的思路在set，remove方法中都有实现。针对内存泄漏问题ThreadLocal实际是需要手动触发函数删除key为null的Entry，所以当不要再需要一个变量当定到线程时手动的remove还是很有必要的。\n\n\n\n最后，在网上看到对ThreadLocal有多种说法：ThreadLocal为解决多线程程序的并发问题提供了一种新的思路；ThreadLocal的目的是为了解决多线程访问资源时的共享问题。\n\n关于第一种说法我觉得是部分正确的，ThreadLocal将需要共享的对象封闭在了线程内确实解决了并发的一部分问题，但并不是万能的。比如重写initialValue方法时返回的是一个全局共享的对象，那实际上ThreadLocal只是把这个全局共享的对象又封装到了Thread对象里，ThreadLocal本身并没有做类似深拷贝的操作，因此这个变量依然是线程不安全的（逸出）。\n\n关于第二种说法，我觉得问题就比较大了。ThreadLocal根本不是为了线程间共享，实际是为了将状态封闭在线程内以确保线程安全。这样做确实带来了访问共享状态的便利，但这个状态的共享是在单个线程内的，而不是线程之间的。比如在action中将session对象绑定在线程内，在service、dao里都可以方便的共享，但所有的共享都是在单个的线程内部，而不是在多个的线程之间共享。\n\n\n\n参考资料：\n\n《Java并发编程实战》\n\nJDK8帮助手册\n\nhttp://qifuguang.me/2015/09/02/[Java%E5%B9%B6%E5%8F%91%E5%8C%85%E5%AD%A6%E4%B9%A0%E4%B8%83]%E8%A7%A3%E5%AF%86ThreadLocal/\n\nhttp://my.oschina.net/xianggao/blog/392440#navbar-header\n","slug":"ThreadLocal小记","published":1,"updated":"2017-01-07T05:33:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixmu6mrz000epo2eysh139cc","content":"<h1 id=\"ThreadLocal\"><a href=\"#ThreadLocal\" class=\"headerlink\" title=\"ThreadLocal\"></a>ThreadLocal</h1><p>最近《Java并发编程实战》第三章谈及了对象共享的问题。对共享的可变数据最简单粗暴的做法当然是同步，但是同步的缺点也很明显，代码复杂可维护性降低。针对这个问题，书上谈及到了通过线程封闭避免同步，其中的ThreadLocal类就是帮助维持线程封闭性的。</p>\n<p>之前对ThreadLocal的认识非常简单，就是把一个变量绑定到线程上。参照网上的例子自己也实现了类似功能的例子ThreadLocalVariable(<a href=\"https://github.com/zhanghTK/HelloJava/blob/master/src/main/java/tk/zhangh/java/thread/ThreadLocalVariable.java)，但总的来说没什么体会。今天参照别人的文章看了一下ThreadLocal的实现，发现还是有蛮多注意点的。\" target=\"_blank\" rel=\"external\">https://github.com/zhanghTK/HelloJava/blob/master/src/main/java/tk/zhangh/java/thread/ThreadLocalVariable.java)，但总的来说没什么体会。今天参照别人的文章看了一下ThreadLocal的实现，发现还是有蛮多注意点的。</a></p>\n<p>看JDK之前想当然的以为ThreadLocal应该就是简单对<code>Map&lt;Thread, Object&gt;</code>做一个封装，然而实际并没有这么简单。参照了网上一些文章的说法，早期的ThreadLocal确实是这样实现的。但是这样实现存在一些问题：</p>\n<ol>\n<li>线程安全问题，如果使用线程安全的Map实现那么就会带来性能问题，当有大量的线程使用ThreadLocal，伴随着线程生命周期ThreadLocal也需要频繁向底层的Map添加删除数据。</li>\n<li>内存回收问题，用Thread当key，除非手动调用remove，否则即使线程退出了会导致：1)该Thread对象无法回收；2)该线程在所有ThreadLocal中对应的value也无法回收。</li>\n</ol>\n<p>ThreadLocal实际给出了不同的实现方式。首先绑定到线程的变量没有维护在ThreadLocal内，而是维护在各个Thread类实例内——在Thread类内使用了ThreadLocal的静态内部类<code>ThreadLocalMap</code>实例去维护需要绑定到线程的变量。这样原本需要维护在ThreadLocal内的数据现在就分散到了各个线程内去维护。</p>\n<p>在Thread中ThreadLocalMap的声明长这样：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 真的就只是声明了一下，什么都没干    </span></div><div class=\"line\">ThreadLocal.ThreadLocalMap threadLocals = <span class=\"keyword\">null</span>;</div></pre></td></tr></table></figure>\n<p>ThreadLocal一共只有五个非私有的方法，首先是两个并没有什么卵用的方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 构造，什么都没干</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ThreadLocal</span><span class=\"params\">()</span> </span>&#123;&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 设置ThreadLocal的初始值，protected很明显是希望子类重写</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> T <span class=\"title\">initialValue</span><span class=\"params\">()</span> </span>&#123;<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>&#125;</div></pre></td></tr></table></figure>\n<p>看看其余三个方法的实现（JDK8）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">get</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    Thread t = Thread.currentThread();</div><div class=\"line\">    <span class=\"comment\">// 从线程里获取ThreadLocalMap</span></div><div class=\"line\">    ThreadLocalMap map = getMap(t);</div><div class=\"line\">    <span class=\"keyword\">if</span> (map != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">// 根据ThreadLocal实例获取Entity</span></div><div class=\"line\">        <span class=\"comment\">// 一会看ThreadLocal的实现</span></div><div class=\"line\">        <span class=\"comment\">// 暂时可以看做类似Map&lt;ThreadLocal,Object&gt;</span></div><div class=\"line\">        <span class=\"comment\">// 注意key类型是ThreadLocal，不是Thread</span></div><div class=\"line\">        ThreadLocalMap.Entry e = map.getEntry(<span class=\"keyword\">this</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (e != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</div><div class=\"line\">            T result = (T)e.value;</div><div class=\"line\">            <span class=\"keyword\">return</span> result;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 如果获得的map为null或者从map通过key获取的value为空时获取一个初始值</span></div><div class=\"line\">    <span class=\"comment\">// setInitialValue方法里调用了initialValue方法</span></div><div class=\"line\">    <span class=\"comment\">// 宝宝不管，反正宝宝想要有值，宝宝不想为null</span></div><div class=\"line\">    <span class=\"keyword\">return</span> setInitialValue();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">set</span><span class=\"params\">(T value)</span> </span>&#123;</div><div class=\"line\">    Thread t = Thread.currentThread();</div><div class=\"line\">    ThreadLocalMap map = getMap(t);</div><div class=\"line\">    <span class=\"keyword\">if</span> (map != <span class=\"keyword\">null</span>)</div><div class=\"line\">        <span class=\"comment\">// 没什么说的set进去</span></div><div class=\"line\">        map.set(<span class=\"keyword\">this</span>, value);</div><div class=\"line\">    <span class=\"keyword\">else</span></div><div class=\"line\">        <span class=\"comment\">// 当map不存在时，使用初始值创建一个</span></div><div class=\"line\">        createMap(t, value);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">remove</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">     ThreadLocalMap m = getMap(Thread.currentThread());</div><div class=\"line\">     <span class=\"keyword\">if</span> (m != <span class=\"keyword\">null</span>)</div><div class=\"line\">         <span class=\"comment\">// 没什么说的，remove掉</span></div><div class=\"line\">         m.remove(<span class=\"keyword\">this</span>);</div><div class=\"line\"> &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\">ThreadLocalMap <span class=\"title\">getMap</span><span class=\"params\">(Thread t)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 你给我一个线程，我换你一个map</span></div><div class=\"line\">    <span class=\"keyword\">return</span> t.threadLocals;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>ThreadLocal所有的操作都是围绕着内部类ThreadLocalMap的，ThreadLocal只是让ThreadLocalMap更加容易访问。咦，有点耳熟，没错外观模式。</p>\n<p>下面看一下ThreadLocal的静态内部类ThreadLocalMap，JDK文档对它的描述主要集中在一下几点：</p>\n<ol>\n<li>是什么：定制的hash map用于维护本地线程变量</li>\n<li>可见性：ThreadLocal之外没有任何方法可访问，Thread类使用它定义了私有属性</li>\n<li>特殊性：为了管理大对象、长生命周期对象，使用WeakReference包装ThreadLocal对象作为key</li>\n</ol>\n<p>前面两点没什么好说的，主要是第三点：key使用了弱引用类型管理（关于弱引用可以先参考<a href=\"https://github.com/zhanghTK/HelloJava/blob/master/src/main/java/tk/zhangh/java/jvm/reference/ReferenceTest.java，后面我会单独写文章记录Java引用的使用，先挖个坑）。\" target=\"_blank\" rel=\"external\">https://github.com/zhanghTK/HelloJava/blob/master/src/main/java/tk/zhangh/java/jvm/reference/ReferenceTest.java，后面我会单独写文章记录Java引用的使用，先挖个坑）。</a></p>\n<p><img src=\"http://img.blog.csdn.net/20160121000731607\" alt=\"image\"></p>\n<p>图片来自互联网，实线表示强引用，虚线表示弱引用。</p>\n<p>简而言之，一个对象在没有强引用引用，只有弱引用引用时，当GC发生这个对象就会被标记回收。将ThreadLocal对象设置成弱引用作为key的好处是显而易见：当ThreadLocal没有任何强引用引用时，只有ThreadLocalMap的Entry对它存在弱引用，这样GC的时候这个ThreadLocal对象就可以被回收了。但是这又带来了一个问题：Entry的key可能被回收了，但留下了一个并没有什么卵用的value。只要线程生命周期不结束，那么这个value对象始终保持了一个强引用链条：</p>\n<p>Thread Ref -&gt; Thread -&gt; ThreadLocalMap -&gt; Entry -&gt; value</p>\n<p>当内存有大量驻留的线程时，因为强引用存在，GC始终无法回收，就导致了内存泄漏。</p>\n<p>真对这个问题ThreadLocalMap在实现的时候也采取了一些防护措施，比如ThreadLocalMap的get（set，remove方法也类似，限于篇幅不展开了）：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Entry <span class=\"title\">getEntry</span><span class=\"params\">(ThreadLocal&lt;?&gt; key)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// hash函数获取索引位置</span></div><div class=\"line\">    <span class=\"keyword\">int</span> i = key.threadLocalHashCode &amp; (table.length - <span class=\"number\">1</span>);</div><div class=\"line\">    Entry e = table[i];</div><div class=\"line\">    <span class=\"keyword\">if</span> (e != <span class=\"keyword\">null</span> &amp;&amp; e.get() == key)</div><div class=\"line\">        <span class=\"comment\">// 命中了</span></div><div class=\"line\">        <span class=\"keyword\">return</span> e;</div><div class=\"line\">    <span class=\"keyword\">else</span></div><div class=\"line\">        <span class=\"comment\">// miss了</span></div><div class=\"line\">        <span class=\"keyword\">return</span> getEntryAfterMiss(key, i, e);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Entry <span class=\"title\">getEntryAfterMiss</span><span class=\"params\">(ThreadLocal&lt;?&gt; key, <span class=\"keyword\">int</span> i, Entry e)</span> </span>&#123;</div><div class=\"line\">    Entry[] tab = table;</div><div class=\"line\">    <span class=\"keyword\">int</span> len = tab.length;</div><div class=\"line\">\t\t</div><div class=\"line\">    <span class=\"comment\">// 遍历table</span></div><div class=\"line\">    <span class=\"keyword\">while</span> (e != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        ThreadLocal&lt;?&gt; k = e.get();</div><div class=\"line\">        <span class=\"keyword\">if</span> (k == key)</div><div class=\"line\">            <span class=\"comment\">// 找到了</span></div><div class=\"line\">            <span class=\"keyword\">return</span> e;</div><div class=\"line\">        <span class=\"keyword\">if</span> (k == <span class=\"keyword\">null</span>)</div><div class=\"line\">            <span class=\"comment\">// 发现key为空（也就是上面描述的内存泄漏的情况），做删除</span></div><div class=\"line\">            expungeStaleEntry(i);</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">            <span class=\"comment\">// 找下一个Entty位置</span></div><div class=\"line\">            i = nextIndex(i, len);</div><div class=\"line\">        e = tab[i];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在get的过程中凡是碰到了key为null的Entry，这个Entry就会被擦除，从而避免内存泄漏。类似的思路在set，remove方法中都有实现。针对内存泄漏问题ThreadLocal实际是需要手动触发函数删除key为null的Entry，所以当不要再需要一个变量当定到线程时手动的remove还是很有必要的。</p>\n<p>最后，在网上看到对ThreadLocal有多种说法：ThreadLocal为解决多线程程序的并发问题提供了一种新的思路；ThreadLocal的目的是为了解决多线程访问资源时的共享问题。</p>\n<p>关于第一种说法我觉得是部分正确的，ThreadLocal将需要共享的对象封闭在了线程内确实解决了并发的一部分问题，但并不是万能的。比如重写initialValue方法时返回的是一个全局共享的对象，那实际上ThreadLocal只是把这个全局共享的对象又封装到了Thread对象里，ThreadLocal本身并没有做类似深拷贝的操作，因此这个变量依然是线程不安全的（逸出）。</p>\n<p>关于第二种说法，我觉得问题就比较大了。ThreadLocal根本不是为了线程间共享，实际是为了将状态封闭在线程内以确保线程安全。这样做确实带来了访问共享状态的便利，但这个状态的共享是在单个线程内的，而不是线程之间的。比如在action中将session对象绑定在线程内，在service、dao里都可以方便的共享，但所有的共享都是在单个的线程内部，而不是在多个的线程之间共享。</p>\n<p>参考资料：</p>\n<p>《Java并发编程实战》</p>\n<p>JDK8帮助手册</p>\n<p><a href=\"http://qifuguang.me/2015/09/02/[Java%E5%B9%B6%E5%8F%91%E5%8C%85%E5%AD%A6%E4%B9%A0%E4%B8%83]%E8%A7%A3%E5%AF%86ThreadLocal/\" target=\"_blank\" rel=\"external\">http://qifuguang.me/2015/09/02/[Java%E5%B9%B6%E5%8F%91%E5%8C%85%E5%AD%A6%E4%B9%A0%E4%B8%83]%E8%A7%A3%E5%AF%86ThreadLocal/</a></p>\n<p><a href=\"http://my.oschina.net/xianggao/blog/392440#navbar-header\" target=\"_blank\" rel=\"external\">http://my.oschina.net/xianggao/blog/392440#navbar-header</a></p>\n","excerpt":"","more":"<h1 id=\"ThreadLocal\"><a href=\"#ThreadLocal\" class=\"headerlink\" title=\"ThreadLocal\"></a>ThreadLocal</h1><p>最近《Java并发编程实战》第三章谈及了对象共享的问题。对共享的可变数据最简单粗暴的做法当然是同步，但是同步的缺点也很明显，代码复杂可维护性降低。针对这个问题，书上谈及到了通过线程封闭避免同步，其中的ThreadLocal类就是帮助维持线程封闭性的。</p>\n<p>之前对ThreadLocal的认识非常简单，就是把一个变量绑定到线程上。参照网上的例子自己也实现了类似功能的例子ThreadLocalVariable(<a href=\"https://github.com/zhanghTK/HelloJava/blob/master/src/main/java/tk/zhangh/java/thread/ThreadLocalVariable.java)，但总的来说没什么体会。今天参照别人的文章看了一下ThreadLocal的实现，发现还是有蛮多注意点的。\">https://github.com/zhanghTK/HelloJava/blob/master/src/main/java/tk/zhangh/java/thread/ThreadLocalVariable.java)，但总的来说没什么体会。今天参照别人的文章看了一下ThreadLocal的实现，发现还是有蛮多注意点的。</a></p>\n<p>看JDK之前想当然的以为ThreadLocal应该就是简单对<code>Map&lt;Thread, Object&gt;</code>做一个封装，然而实际并没有这么简单。参照了网上一些文章的说法，早期的ThreadLocal确实是这样实现的。但是这样实现存在一些问题：</p>\n<ol>\n<li>线程安全问题，如果使用线程安全的Map实现那么就会带来性能问题，当有大量的线程使用ThreadLocal，伴随着线程生命周期ThreadLocal也需要频繁向底层的Map添加删除数据。</li>\n<li>内存回收问题，用Thread当key，除非手动调用remove，否则即使线程退出了会导致：1)该Thread对象无法回收；2)该线程在所有ThreadLocal中对应的value也无法回收。</li>\n</ol>\n<p>ThreadLocal实际给出了不同的实现方式。首先绑定到线程的变量没有维护在ThreadLocal内，而是维护在各个Thread类实例内——在Thread类内使用了ThreadLocal的静态内部类<code>ThreadLocalMap</code>实例去维护需要绑定到线程的变量。这样原本需要维护在ThreadLocal内的数据现在就分散到了各个线程内去维护。</p>\n<p>在Thread中ThreadLocalMap的声明长这样：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 真的就只是声明了一下，什么都没干    </span></div><div class=\"line\">ThreadLocal.ThreadLocalMap threadLocals = <span class=\"keyword\">null</span>;</div></pre></td></tr></table></figure>\n<p>ThreadLocal一共只有五个非私有的方法，首先是两个并没有什么卵用的方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 构造，什么都没干</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ThreadLocal</span><span class=\"params\">()</span> </span>&#123;&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 设置ThreadLocal的初始值，protected很明显是希望子类重写</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> T <span class=\"title\">initialValue</span><span class=\"params\">()</span> </span>&#123;<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>&#125;</div></pre></td></tr></table></figure>\n<p>看看其余三个方法的实现（JDK8）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">get</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    Thread t = Thread.currentThread();</div><div class=\"line\">    <span class=\"comment\">// 从线程里获取ThreadLocalMap</span></div><div class=\"line\">    ThreadLocalMap map = getMap(t);</div><div class=\"line\">    <span class=\"keyword\">if</span> (map != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">// 根据ThreadLocal实例获取Entity</span></div><div class=\"line\">        <span class=\"comment\">// 一会看ThreadLocal的实现</span></div><div class=\"line\">        <span class=\"comment\">// 暂时可以看做类似Map&lt;ThreadLocal,Object&gt;</span></div><div class=\"line\">        <span class=\"comment\">// 注意key类型是ThreadLocal，不是Thread</span></div><div class=\"line\">        ThreadLocalMap.Entry e = map.getEntry(<span class=\"keyword\">this</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (e != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</div><div class=\"line\">            T result = (T)e.value;</div><div class=\"line\">            <span class=\"keyword\">return</span> result;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 如果获得的map为null或者从map通过key获取的value为空时获取一个初始值</span></div><div class=\"line\">    <span class=\"comment\">// setInitialValue方法里调用了initialValue方法</span></div><div class=\"line\">    <span class=\"comment\">// 宝宝不管，反正宝宝想要有值，宝宝不想为null</span></div><div class=\"line\">    <span class=\"keyword\">return</span> setInitialValue();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">set</span><span class=\"params\">(T value)</span> </span>&#123;</div><div class=\"line\">    Thread t = Thread.currentThread();</div><div class=\"line\">    ThreadLocalMap map = getMap(t);</div><div class=\"line\">    <span class=\"keyword\">if</span> (map != <span class=\"keyword\">null</span>)</div><div class=\"line\">        <span class=\"comment\">// 没什么说的set进去</span></div><div class=\"line\">        map.set(<span class=\"keyword\">this</span>, value);</div><div class=\"line\">    <span class=\"keyword\">else</span></div><div class=\"line\">        <span class=\"comment\">// 当map不存在时，使用初始值创建一个</span></div><div class=\"line\">        createMap(t, value);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">remove</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">     ThreadLocalMap m = getMap(Thread.currentThread());</div><div class=\"line\">     <span class=\"keyword\">if</span> (m != <span class=\"keyword\">null</span>)</div><div class=\"line\">         <span class=\"comment\">// 没什么说的，remove掉</span></div><div class=\"line\">         m.remove(<span class=\"keyword\">this</span>);</div><div class=\"line\"> &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\">ThreadLocalMap <span class=\"title\">getMap</span><span class=\"params\">(Thread t)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 你给我一个线程，我换你一个map</span></div><div class=\"line\">    <span class=\"keyword\">return</span> t.threadLocals;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>ThreadLocal所有的操作都是围绕着内部类ThreadLocalMap的，ThreadLocal只是让ThreadLocalMap更加容易访问。咦，有点耳熟，没错外观模式。</p>\n<p>下面看一下ThreadLocal的静态内部类ThreadLocalMap，JDK文档对它的描述主要集中在一下几点：</p>\n<ol>\n<li>是什么：定制的hash map用于维护本地线程变量</li>\n<li>可见性：ThreadLocal之外没有任何方法可访问，Thread类使用它定义了私有属性</li>\n<li>特殊性：为了管理大对象、长生命周期对象，使用WeakReference包装ThreadLocal对象作为key</li>\n</ol>\n<p>前面两点没什么好说的，主要是第三点：key使用了弱引用类型管理（关于弱引用可以先参考<a href=\"https://github.com/zhanghTK/HelloJava/blob/master/src/main/java/tk/zhangh/java/jvm/reference/ReferenceTest.java，后面我会单独写文章记录Java引用的使用，先挖个坑）。\">https://github.com/zhanghTK/HelloJava/blob/master/src/main/java/tk/zhangh/java/jvm/reference/ReferenceTest.java，后面我会单独写文章记录Java引用的使用，先挖个坑）。</a></p>\n<p><img src=\"http://img.blog.csdn.net/20160121000731607\" alt=\"image\"></p>\n<p>图片来自互联网，实线表示强引用，虚线表示弱引用。</p>\n<p>简而言之，一个对象在没有强引用引用，只有弱引用引用时，当GC发生这个对象就会被标记回收。将ThreadLocal对象设置成弱引用作为key的好处是显而易见：当ThreadLocal没有任何强引用引用时，只有ThreadLocalMap的Entry对它存在弱引用，这样GC的时候这个ThreadLocal对象就可以被回收了。但是这又带来了一个问题：Entry的key可能被回收了，但留下了一个并没有什么卵用的value。只要线程生命周期不结束，那么这个value对象始终保持了一个强引用链条：</p>\n<p>Thread Ref -&gt; Thread -&gt; ThreadLocalMap -&gt; Entry -&gt; value</p>\n<p>当内存有大量驻留的线程时，因为强引用存在，GC始终无法回收，就导致了内存泄漏。</p>\n<p>真对这个问题ThreadLocalMap在实现的时候也采取了一些防护措施，比如ThreadLocalMap的get（set，remove方法也类似，限于篇幅不展开了）：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Entry <span class=\"title\">getEntry</span><span class=\"params\">(ThreadLocal&lt;?&gt; key)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// hash函数获取索引位置</span></div><div class=\"line\">    <span class=\"keyword\">int</span> i = key.threadLocalHashCode &amp; (table.length - <span class=\"number\">1</span>);</div><div class=\"line\">    Entry e = table[i];</div><div class=\"line\">    <span class=\"keyword\">if</span> (e != <span class=\"keyword\">null</span> &amp;&amp; e.get() == key)</div><div class=\"line\">        <span class=\"comment\">// 命中了</span></div><div class=\"line\">        <span class=\"keyword\">return</span> e;</div><div class=\"line\">    <span class=\"keyword\">else</span></div><div class=\"line\">        <span class=\"comment\">// miss了</span></div><div class=\"line\">        <span class=\"keyword\">return</span> getEntryAfterMiss(key, i, e);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Entry <span class=\"title\">getEntryAfterMiss</span><span class=\"params\">(ThreadLocal&lt;?&gt; key, <span class=\"keyword\">int</span> i, Entry e)</span> </span>&#123;</div><div class=\"line\">    Entry[] tab = table;</div><div class=\"line\">    <span class=\"keyword\">int</span> len = tab.length;</div><div class=\"line\">\t\t</div><div class=\"line\">    <span class=\"comment\">// 遍历table</span></div><div class=\"line\">    <span class=\"keyword\">while</span> (e != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        ThreadLocal&lt;?&gt; k = e.get();</div><div class=\"line\">        <span class=\"keyword\">if</span> (k == key)</div><div class=\"line\">            <span class=\"comment\">// 找到了</span></div><div class=\"line\">            <span class=\"keyword\">return</span> e;</div><div class=\"line\">        <span class=\"keyword\">if</span> (k == <span class=\"keyword\">null</span>)</div><div class=\"line\">            <span class=\"comment\">// 发现key为空（也就是上面描述的内存泄漏的情况），做删除</span></div><div class=\"line\">            expungeStaleEntry(i);</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">            <span class=\"comment\">// 找下一个Entty位置</span></div><div class=\"line\">            i = nextIndex(i, len);</div><div class=\"line\">        e = tab[i];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在get的过程中凡是碰到了key为null的Entry，这个Entry就会被擦除，从而避免内存泄漏。类似的思路在set，remove方法中都有实现。针对内存泄漏问题ThreadLocal实际是需要手动触发函数删除key为null的Entry，所以当不要再需要一个变量当定到线程时手动的remove还是很有必要的。</p>\n<p>最后，在网上看到对ThreadLocal有多种说法：ThreadLocal为解决多线程程序的并发问题提供了一种新的思路；ThreadLocal的目的是为了解决多线程访问资源时的共享问题。</p>\n<p>关于第一种说法我觉得是部分正确的，ThreadLocal将需要共享的对象封闭在了线程内确实解决了并发的一部分问题，但并不是万能的。比如重写initialValue方法时返回的是一个全局共享的对象，那实际上ThreadLocal只是把这个全局共享的对象又封装到了Thread对象里，ThreadLocal本身并没有做类似深拷贝的操作，因此这个变量依然是线程不安全的（逸出）。</p>\n<p>关于第二种说法，我觉得问题就比较大了。ThreadLocal根本不是为了线程间共享，实际是为了将状态封闭在线程内以确保线程安全。这样做确实带来了访问共享状态的便利，但这个状态的共享是在单个线程内的，而不是线程之间的。比如在action中将session对象绑定在线程内，在service、dao里都可以方便的共享，但所有的共享都是在单个的线程内部，而不是在多个的线程之间共享。</p>\n<p>参考资料：</p>\n<p>《Java并发编程实战》</p>\n<p>JDK8帮助手册</p>\n<p><a href=\"http://qifuguang.me/2015/09/02/[Java%E5%B9%B6%E5%8F%91%E5%8C%85%E5%AD%A6%E4%B9%A0%E4%B8%83]%E8%A7%A3%E5%AF%86ThreadLocal/\">http://qifuguang.me/2015/09/02/[Java%E5%B9%B6%E5%8F%91%E5%8C%85%E5%AD%A6%E4%B9%A0%E4%B8%83]%E8%A7%A3%E5%AF%86ThreadLocal/</a></p>\n<p><a href=\"http://my.oschina.net/xianggao/blog/392440#navbar-header\">http://my.oschina.net/xianggao/blog/392440#navbar-header</a></p>\n"},{"title":"《Java并发编程实战》读书笔记","date":"2016-09-29T05:14:27.000Z","_content":"右键->新标签页中打开图片->放大预览\n![Java并发编程实战.png](https://ooo.0o0.ooo/2016/09/29/57eca40868441.png)\n","source":"_posts/《Java并发编程实战》读书笔记.md","raw":"---\ntitle: 《Java并发编程实战》读书笔记\ndate: 2016-09-29 13:14:27\ntags:\n  - Java\ncategories: 读书笔记\n---\n右键->新标签页中打开图片->放大预览\n![Java并发编程实战.png](https://ooo.0o0.ooo/2016/09/29/57eca40868441.png)\n","slug":"《Java并发编程实战》读书笔记","published":1,"updated":"2017-01-07T05:33:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixmu6ms0000gpo2ejhuc5458","content":"<p>右键-&gt;新标签页中打开图片-&gt;放大预览<br><img src=\"https://ooo.0o0.ooo/2016/09/29/57eca40868441.png\" alt=\"Java并发编程实战.png\"></p>\n","excerpt":"","more":"<p>右键-&gt;新标签页中打开图片-&gt;放大预览<br><img src=\"https://ooo.0o0.ooo/2016/09/29/57eca40868441.png\" alt=\"Java并发编程实战.png\"></p>\n"},{"title":"《函数式编程思维》读书笔记","date":"2016-08-27T14:20:48.000Z","_content":"\n![函数式编程思维.png](http://i2.buimg.com/4851/efe49260863d5566.png)","source":"_posts/《函数式编程思维》读书笔记.md","raw":"---\ntitle: 《函数式编程思维》读书笔记\ndate: 2016-08-27 22:20:48\ntags:\n  - Functional\ncategories: 读书笔记\n---\n\n![函数式编程思维.png](http://i2.buimg.com/4851/efe49260863d5566.png)","slug":"《函数式编程思维》读书笔记","published":1,"updated":"2017-01-07T05:33:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixmu6mxj0016po2e3gdbga67","content":"<p><img src=\"http://i2.buimg.com/4851/efe49260863d5566.png\" alt=\"函数式编程思维.png\"></p>\n","excerpt":"","more":"<p><img src=\"http://i2.buimg.com/4851/efe49260863d5566.png\" alt=\"函数式编程思维.png\"></p>\n"},{"title":"从依赖实现到依赖行为","date":"2016-10-22T10:59:11.000Z","_content":"\n## 背景\n\n一个报表程序需要初始化报表参数。具体的参数分为三种类型，都实现了`Parameter`类型，具体的初始化过程由子类实现。\n\n对报表参数初始化的过程，从对具体实现过程的依赖，依次经历对接口、对数据结构，最终对行为依赖，不断抽象依赖，实现更大程度的复用。\n\n## 对实现的依赖\n\n```java\npublic class ParameterCollector {\n    public void fillParameters(ServletHttpRequest request, \n                                ParameterGraph parameterGraph) {\n        for (Parameter para : parameterGraph.getParmaeters()) {\n            if (para instanceof SimpleParameter) {\n                SimpleParameter simplePara = (SimpleParameter) para;\n                String[] values = request.getParameterValues(para.getName());\n                simplePara.setValue(values);\n            } else {\n                if (para instanceof ItemParameter) {\n                    ItemParameter itemPara = (ItemParameter) para;\n                    for (Item item : itemPara.getItems()) {\n                        String[] values = request.getParameterValues(item.getName());\n                        item.setValues(values);\n                    }\n                } else {\n                    TableParameter tablePara = (TableParameter) para;\n                    String[] rows =\n                            request.getParameterValues(tablePara.getRowName());\n                    String[] columns =\n                            request.getParameterValues(tablePara.getColumnName());\n                    String[] dataCells =\n                            request.getParameterValues(tablePara.getDataCellName());\n\n                    int columnSize = columns.length;\n                    for (int i = 0; i < rows.length; i++) {\n                        for (int j = 0; j < columns.length; j++) {\n                            TableParameterElement element = new TableParameterElement();\n                            element.setRow(rows[i]);\n                            element.setColumn(columns[j]);\n                            element.setDataCell(dataCells[columnSize * i + j]);\n                            tablePara.addElement(element);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n```\n坏代码的味道：\n\n1. 多层次的循环、IF嵌套，如果要在这个层次上加一个期限，那就是大于2。\n2. `IF/SWITCH instanceof Class`式的样板代码\n\n##  对接口的依赖\n\n多态替换分支语句，重构：\n\n```java\npublic class ParameterCollector {\n    public void fillParameters(ServletHttpRequest request, \n                                ParameterGraph parameterGraph) {\n        for (Parameter para : parameterGraph.getParmaeters()) {\n            para.fillParamter(request);\n        }\n    }\n}\n```\n## 对数据结构的依赖\n\n上面的重构使用多态极大简化了`ParameterCollector`，同时也让不同实现的`Parameter`更加容易维护。但是在Parameter的方法中传递了request，这使得Parameter类所在的包也必须依赖ServletHttpRequest。这种包之间不必要的耦合可以使用Map保存需要的键值映射关系，弱化这种依赖关系。\n\n进一步重构：\n\n```java\npublic class ParameterCollector {\n    public void fillParameters(ServletHttpRequest request, \n                                ParameterGraph parameterGraph) {\n        Map parmaeters = getParameterMap();           \n        for (Parameter para : parameterGraph.getParmaeters()) {\n            para.fillParamter(parmaeters);\n        }\n    }\n}\n```\n\n进一步重构后的代码虽然避免了对ServletHttpRequest的依赖，但是无法避免的对Map进行了依赖。\n\n对类似Map这样具体的数据结构依赖，让人无法清晰知道方法参数含义并不是好的编码风格。\n\n## 对行为的依赖\n\n在回头看最初的代码，与Servlet API强耦合的是这样一句`request.getParameterValues(para.getName())`\n\n依赖的到底是什么？站在函数式编程的角度，依赖的其实是一种行为：\n\n```java\nstring ->  request.getParameterValues(string)\n```\n\n在Java语法中为了传递一个方法，必须让方法附属在一个接口上，像这样：\n\n```java\npublic interface ParamterRequest {\n    String[] getParameterValues(String string);\n}\n```\n\n为了让ServletHttpRequest与ParamterRequest相关联，必须适配器模式，对象的适配器实现像下面这样：\n\n```java\nprivate class ParameterRequestAdapter implements ParamterRequest {\n    ServletHttpRequest servletHttpRequest;\n\n    public ParameterRequestAdapter(ServletHttpRequest servletHttpRequest) {\n        this.servletHttpRequest = servletHttpRequest;\n    }\n\n    @Override\n    public String[] getParameterValues(String string) {\n        return servletHttpRequest.getParameterValues(string);\n    }\n}\n```\n\n使用上面的适配器再进一步重构：\n\n```java\npublic void fillParameters(ServletHttpRequest request, ParameterGraph parameterGraph) {\n\tfor (Parameter para : parameterGraph.getParmaeters()) {\n\t\tpara.fillParamter(new ParameterRequestAdapter(request));\n\t}\n}\n```\n\n我们还可以使用匿名内部类：\n\n```java\npublic void fillParameters(ServletHttpRequest request, ParameterGraph parameterGraph) {\n  for (Parameter para : parameterGraph.getParmaeters()) {\n    para.fillParamter(new ParamterRequest() {\n      @Override\n      public String[] getParameterValues(String string) {\n        return request.getParameterValues(string);\n      }\n    });\n  }\n}\n```\n\n在Java8我们还可以这样写：\n\n```java\npublic void fillParameters(ServletHttpRequest request, ParameterGraph parameterGraph) {\n  for (Parameter para : parameterGraph.getParmaeters()) {\n    para.fillParamter(string ->  request.getParameterValues(string));\n  }\n}\n```\n\n甚至还可以这样：\n\n```java\npublic void fillParameters(ServletHttpRequest request, ParameterGraph parameterGraph) {\n  for (Parameter para : parameterGraph.getParmaeters()) {\n    para.fillParamter(request::getParameterValues);\n  }\n}\n```\n回头看一眼原有大篇幅的方法，再看看多次重构过的代码。\n\n最明显的感受`fillParameters`方法比以前薄了：\n\n不相关的职责从方法中抽取出来放到单独的类维护了（职责单一）\n\n当有更多参数类型需要添加时`fillParameters`不需要做任何的修改，只要添加对应类型就好（开闭原则）\n\n之前对实现类的依赖现在变成了对接口的依赖（依赖倒置）\n\n重构过程中`Parameter`从对`request`的依赖变为对数据结构（Map）的依赖，避免了Parameter所在模块与`Servlet API`之间的耦合。\n\n从对数据结构的依赖最后变成了对接口（行为）的依赖，抽象程度进一步提高，可维护性也更好。\n\n\n\n## 面向对象与函数式编程\n\n面向对象强调对事物的抽象，强调名词\n\n函数式编程强调对行为的抽象，强调动词\n\n例如：\n\n```java\npublic class People {\n    private List<Person> persons = new ArrayList<Person>();\n\n    public List<Person> findByName(String name) {\n        List<Person> result = new ArrayList<Person>();\n        for (Person person : persons) {\n            if (person.getName().equals(name)) {\n                result.add(person);\n            }\n        }\n        return result;\n    }\n}\n```\n例如我们有一个方法findByName，以后可能还需要更多方法例如findByAge，findByGender，findChildren等等方法，所有的方法其实都只有查找的过滤条件不同，可以抽象出函数式的写法：\n\n```java\npublic List<Person> findPersons(Predicate<Person> predicate, Person people) {\n  List<Person> result = new ArrayList<>();\n  for (Person person : persons) {\n    if (predicate.test(people)) {\n      result.add(person);\n    }\n  }\n  return result;\n}\n```\n\nJava8可以简写成：\n\n\n```java\npublic List<Person> findPersons(Predicate<Person> predicate, Person people) {\n  return persons.stream().filter(predicate).collect(Collectors.toList());\n}\n```\n\n","source":"_posts/从依赖实现到依赖行为.md","raw":"---\ntitle: 从依赖实现到依赖行为\ndate: 2016-10-22 18:59:11\ntags:\n  - Java\n  - 设计模式\n  - Functional\ncategories: 设计模式\n---\n\n## 背景\n\n一个报表程序需要初始化报表参数。具体的参数分为三种类型，都实现了`Parameter`类型，具体的初始化过程由子类实现。\n\n对报表参数初始化的过程，从对具体实现过程的依赖，依次经历对接口、对数据结构，最终对行为依赖，不断抽象依赖，实现更大程度的复用。\n\n## 对实现的依赖\n\n```java\npublic class ParameterCollector {\n    public void fillParameters(ServletHttpRequest request, \n                                ParameterGraph parameterGraph) {\n        for (Parameter para : parameterGraph.getParmaeters()) {\n            if (para instanceof SimpleParameter) {\n                SimpleParameter simplePara = (SimpleParameter) para;\n                String[] values = request.getParameterValues(para.getName());\n                simplePara.setValue(values);\n            } else {\n                if (para instanceof ItemParameter) {\n                    ItemParameter itemPara = (ItemParameter) para;\n                    for (Item item : itemPara.getItems()) {\n                        String[] values = request.getParameterValues(item.getName());\n                        item.setValues(values);\n                    }\n                } else {\n                    TableParameter tablePara = (TableParameter) para;\n                    String[] rows =\n                            request.getParameterValues(tablePara.getRowName());\n                    String[] columns =\n                            request.getParameterValues(tablePara.getColumnName());\n                    String[] dataCells =\n                            request.getParameterValues(tablePara.getDataCellName());\n\n                    int columnSize = columns.length;\n                    for (int i = 0; i < rows.length; i++) {\n                        for (int j = 0; j < columns.length; j++) {\n                            TableParameterElement element = new TableParameterElement();\n                            element.setRow(rows[i]);\n                            element.setColumn(columns[j]);\n                            element.setDataCell(dataCells[columnSize * i + j]);\n                            tablePara.addElement(element);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n```\n坏代码的味道：\n\n1. 多层次的循环、IF嵌套，如果要在这个层次上加一个期限，那就是大于2。\n2. `IF/SWITCH instanceof Class`式的样板代码\n\n##  对接口的依赖\n\n多态替换分支语句，重构：\n\n```java\npublic class ParameterCollector {\n    public void fillParameters(ServletHttpRequest request, \n                                ParameterGraph parameterGraph) {\n        for (Parameter para : parameterGraph.getParmaeters()) {\n            para.fillParamter(request);\n        }\n    }\n}\n```\n## 对数据结构的依赖\n\n上面的重构使用多态极大简化了`ParameterCollector`，同时也让不同实现的`Parameter`更加容易维护。但是在Parameter的方法中传递了request，这使得Parameter类所在的包也必须依赖ServletHttpRequest。这种包之间不必要的耦合可以使用Map保存需要的键值映射关系，弱化这种依赖关系。\n\n进一步重构：\n\n```java\npublic class ParameterCollector {\n    public void fillParameters(ServletHttpRequest request, \n                                ParameterGraph parameterGraph) {\n        Map parmaeters = getParameterMap();           \n        for (Parameter para : parameterGraph.getParmaeters()) {\n            para.fillParamter(parmaeters);\n        }\n    }\n}\n```\n\n进一步重构后的代码虽然避免了对ServletHttpRequest的依赖，但是无法避免的对Map进行了依赖。\n\n对类似Map这样具体的数据结构依赖，让人无法清晰知道方法参数含义并不是好的编码风格。\n\n## 对行为的依赖\n\n在回头看最初的代码，与Servlet API强耦合的是这样一句`request.getParameterValues(para.getName())`\n\n依赖的到底是什么？站在函数式编程的角度，依赖的其实是一种行为：\n\n```java\nstring ->  request.getParameterValues(string)\n```\n\n在Java语法中为了传递一个方法，必须让方法附属在一个接口上，像这样：\n\n```java\npublic interface ParamterRequest {\n    String[] getParameterValues(String string);\n}\n```\n\n为了让ServletHttpRequest与ParamterRequest相关联，必须适配器模式，对象的适配器实现像下面这样：\n\n```java\nprivate class ParameterRequestAdapter implements ParamterRequest {\n    ServletHttpRequest servletHttpRequest;\n\n    public ParameterRequestAdapter(ServletHttpRequest servletHttpRequest) {\n        this.servletHttpRequest = servletHttpRequest;\n    }\n\n    @Override\n    public String[] getParameterValues(String string) {\n        return servletHttpRequest.getParameterValues(string);\n    }\n}\n```\n\n使用上面的适配器再进一步重构：\n\n```java\npublic void fillParameters(ServletHttpRequest request, ParameterGraph parameterGraph) {\n\tfor (Parameter para : parameterGraph.getParmaeters()) {\n\t\tpara.fillParamter(new ParameterRequestAdapter(request));\n\t}\n}\n```\n\n我们还可以使用匿名内部类：\n\n```java\npublic void fillParameters(ServletHttpRequest request, ParameterGraph parameterGraph) {\n  for (Parameter para : parameterGraph.getParmaeters()) {\n    para.fillParamter(new ParamterRequest() {\n      @Override\n      public String[] getParameterValues(String string) {\n        return request.getParameterValues(string);\n      }\n    });\n  }\n}\n```\n\n在Java8我们还可以这样写：\n\n```java\npublic void fillParameters(ServletHttpRequest request, ParameterGraph parameterGraph) {\n  for (Parameter para : parameterGraph.getParmaeters()) {\n    para.fillParamter(string ->  request.getParameterValues(string));\n  }\n}\n```\n\n甚至还可以这样：\n\n```java\npublic void fillParameters(ServletHttpRequest request, ParameterGraph parameterGraph) {\n  for (Parameter para : parameterGraph.getParmaeters()) {\n    para.fillParamter(request::getParameterValues);\n  }\n}\n```\n回头看一眼原有大篇幅的方法，再看看多次重构过的代码。\n\n最明显的感受`fillParameters`方法比以前薄了：\n\n不相关的职责从方法中抽取出来放到单独的类维护了（职责单一）\n\n当有更多参数类型需要添加时`fillParameters`不需要做任何的修改，只要添加对应类型就好（开闭原则）\n\n之前对实现类的依赖现在变成了对接口的依赖（依赖倒置）\n\n重构过程中`Parameter`从对`request`的依赖变为对数据结构（Map）的依赖，避免了Parameter所在模块与`Servlet API`之间的耦合。\n\n从对数据结构的依赖最后变成了对接口（行为）的依赖，抽象程度进一步提高，可维护性也更好。\n\n\n\n## 面向对象与函数式编程\n\n面向对象强调对事物的抽象，强调名词\n\n函数式编程强调对行为的抽象，强调动词\n\n例如：\n\n```java\npublic class People {\n    private List<Person> persons = new ArrayList<Person>();\n\n    public List<Person> findByName(String name) {\n        List<Person> result = new ArrayList<Person>();\n        for (Person person : persons) {\n            if (person.getName().equals(name)) {\n                result.add(person);\n            }\n        }\n        return result;\n    }\n}\n```\n例如我们有一个方法findByName，以后可能还需要更多方法例如findByAge，findByGender，findChildren等等方法，所有的方法其实都只有查找的过滤条件不同，可以抽象出函数式的写法：\n\n```java\npublic List<Person> findPersons(Predicate<Person> predicate, Person people) {\n  List<Person> result = new ArrayList<>();\n  for (Person person : persons) {\n    if (predicate.test(people)) {\n      result.add(person);\n    }\n  }\n  return result;\n}\n```\n\nJava8可以简写成：\n\n\n```java\npublic List<Person> findPersons(Predicate<Person> predicate, Person people) {\n  return persons.stream().filter(predicate).collect(Collectors.toList());\n}\n```\n\n","slug":"从依赖实现到依赖行为","published":1,"updated":"2017-01-07T05:33:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixmu6mxl0018po2ezos01vju","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>一个报表程序需要初始化报表参数。具体的参数分为三种类型，都实现了<code>Parameter</code>类型，具体的初始化过程由子类实现。</p>\n<p>对报表参数初始化的过程，从对具体实现过程的依赖，依次经历对接口、对数据结构，最终对行为依赖，不断抽象依赖，实现更大程度的复用。</p>\n<h2 id=\"对实现的依赖\"><a href=\"#对实现的依赖\" class=\"headerlink\" title=\"对实现的依赖\"></a>对实现的依赖</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ParameterCollector</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">fillParameters</span><span class=\"params\">(ServletHttpRequest request, </span></span></div><div class=\"line\">                                ParameterGraph parameterGraph) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (Parameter para : parameterGraph.getParmaeters()) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (para <span class=\"keyword\">instanceof</span> SimpleParameter) &#123;</div><div class=\"line\">                SimpleParameter simplePara = (SimpleParameter) para;</div><div class=\"line\">                String[] values = request.getParameterValues(para.getName());</div><div class=\"line\">                simplePara.setValue(values);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (para <span class=\"keyword\">instanceof</span> ItemParameter) &#123;</div><div class=\"line\">                    ItemParameter itemPara = (ItemParameter) para;</div><div class=\"line\">                    <span class=\"keyword\">for</span> (Item item : itemPara.getItems()) &#123;</div><div class=\"line\">                        String[] values = request.getParameterValues(item.getName());</div><div class=\"line\">                        item.setValues(values);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    TableParameter tablePara = (TableParameter) para;</div><div class=\"line\">                    String[] rows =</div><div class=\"line\">                            request.getParameterValues(tablePara.getRowName());</div><div class=\"line\">                    String[] columns =</div><div class=\"line\">                            request.getParameterValues(tablePara.getColumnName());</div><div class=\"line\">                    String[] dataCells =</div><div class=\"line\">                            request.getParameterValues(tablePara.getDataCellName());</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">int</span> columnSize = columns.length;</div><div class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; rows.length; i++) &#123;</div><div class=\"line\">                        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; columns.length; j++) &#123;</div><div class=\"line\">                            TableParameterElement element = <span class=\"keyword\">new</span> TableParameterElement();</div><div class=\"line\">                            element.setRow(rows[i]);</div><div class=\"line\">                            element.setColumn(columns[j]);</div><div class=\"line\">                            element.setDataCell(dataCells[columnSize * i + j]);</div><div class=\"line\">                            tablePara.addElement(element);</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>坏代码的味道：</p>\n<ol>\n<li>多层次的循环、IF嵌套，如果要在这个层次上加一个期限，那就是大于2。</li>\n<li><code>IF/SWITCH instanceof Class</code>式的样板代码</li>\n</ol>\n<h2 id=\"对接口的依赖\"><a href=\"#对接口的依赖\" class=\"headerlink\" title=\"对接口的依赖\"></a>对接口的依赖</h2><p>多态替换分支语句，重构：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ParameterCollector</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">fillParameters</span><span class=\"params\">(ServletHttpRequest request, </span></span></div><div class=\"line\">                                ParameterGraph parameterGraph) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (Parameter para : parameterGraph.getParmaeters()) &#123;</div><div class=\"line\">            para.fillParamter(request);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"对数据结构的依赖\"><a href=\"#对数据结构的依赖\" class=\"headerlink\" title=\"对数据结构的依赖\"></a>对数据结构的依赖</h2><p>上面的重构使用多态极大简化了<code>ParameterCollector</code>，同时也让不同实现的<code>Parameter</code>更加容易维护。但是在Parameter的方法中传递了request，这使得Parameter类所在的包也必须依赖ServletHttpRequest。这种包之间不必要的耦合可以使用Map保存需要的键值映射关系，弱化这种依赖关系。</p>\n<p>进一步重构：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ParameterCollector</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">fillParameters</span><span class=\"params\">(ServletHttpRequest request, </span></span></div><div class=\"line\">                                ParameterGraph parameterGraph) &#123;</div><div class=\"line\">        Map parmaeters = getParameterMap();           </div><div class=\"line\">        <span class=\"keyword\">for</span> (Parameter para : parameterGraph.getParmaeters()) &#123;</div><div class=\"line\">            para.fillParamter(parmaeters);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>进一步重构后的代码虽然避免了对ServletHttpRequest的依赖，但是无法避免的对Map进行了依赖。</p>\n<p>对类似Map这样具体的数据结构依赖，让人无法清晰知道方法参数含义并不是好的编码风格。</p>\n<h2 id=\"对行为的依赖\"><a href=\"#对行为的依赖\" class=\"headerlink\" title=\"对行为的依赖\"></a>对行为的依赖</h2><p>在回头看最初的代码，与Servlet API强耦合的是这样一句<code>request.getParameterValues(para.getName())</code></p>\n<p>依赖的到底是什么？站在函数式编程的角度，依赖的其实是一种行为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">string -&gt;  request.getParameterValues(string)</div></pre></td></tr></table></figure>\n<p>在Java语法中为了传递一个方法，必须让方法附属在一个接口上，像这样：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ParamterRequest</span> </span>&#123;</div><div class=\"line\">    String[] getParameterValues(String string);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>为了让ServletHttpRequest与ParamterRequest相关联，必须适配器模式，对象的适配器实现像下面这样：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ParameterRequestAdapter</span> <span class=\"keyword\">implements</span> <span class=\"title\">ParamterRequest</span> </span>&#123;</div><div class=\"line\">    ServletHttpRequest servletHttpRequest;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ParameterRequestAdapter</span><span class=\"params\">(ServletHttpRequest servletHttpRequest)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.servletHttpRequest = servletHttpRequest;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"keyword\">public</span> String[] getParameterValues(String string) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> servletHttpRequest.getParameterValues(string);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>使用上面的适配器再进一步重构：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">fillParameters</span><span class=\"params\">(ServletHttpRequest request, ParameterGraph parameterGraph)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (Parameter para : parameterGraph.getParmaeters()) &#123;</div><div class=\"line\">\t\tpara.fillParamter(<span class=\"keyword\">new</span> ParameterRequestAdapter(request));</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我们还可以使用匿名内部类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">fillParameters</span><span class=\"params\">(ServletHttpRequest request, ParameterGraph parameterGraph)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">for</span> (Parameter para : parameterGraph.getParmaeters()) &#123;</div><div class=\"line\">    para.fillParamter(<span class=\"keyword\">new</span> ParamterRequest() &#123;</div><div class=\"line\">      <span class=\"meta\">@Override</span></div><div class=\"line\">      <span class=\"keyword\">public</span> String[] getParameterValues(String string) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> request.getParameterValues(string);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在Java8我们还可以这样写：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">fillParameters</span><span class=\"params\">(ServletHttpRequest request, ParameterGraph parameterGraph)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">for</span> (Parameter para : parameterGraph.getParmaeters()) &#123;</div><div class=\"line\">    para.fillParamter(string -&gt;  request.getParameterValues(string));</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>甚至还可以这样：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">fillParameters</span><span class=\"params\">(ServletHttpRequest request, ParameterGraph parameterGraph)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">for</span> (Parameter para : parameterGraph.getParmaeters()) &#123;</div><div class=\"line\">    para.fillParamter(request::getParameterValues);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>回头看一眼原有大篇幅的方法，再看看多次重构过的代码。</p>\n<p>最明显的感受<code>fillParameters</code>方法比以前薄了：</p>\n<p>不相关的职责从方法中抽取出来放到单独的类维护了（职责单一）</p>\n<p>当有更多参数类型需要添加时<code>fillParameters</code>不需要做任何的修改，只要添加对应类型就好（开闭原则）</p>\n<p>之前对实现类的依赖现在变成了对接口的依赖（依赖倒置）</p>\n<p>重构过程中<code>Parameter</code>从对<code>request</code>的依赖变为对数据结构（Map）的依赖，避免了Parameter所在模块与<code>Servlet API</code>之间的耦合。</p>\n<p>从对数据结构的依赖最后变成了对接口（行为）的依赖，抽象程度进一步提高，可维护性也更好。</p>\n<h2 id=\"面向对象与函数式编程\"><a href=\"#面向对象与函数式编程\" class=\"headerlink\" title=\"面向对象与函数式编程\"></a>面向对象与函数式编程</h2><p>面向对象强调对事物的抽象，强调名词</p>\n<p>函数式编程强调对行为的抽象，强调动词</p>\n<p>例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">People</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> List&lt;Person&gt; persons = <span class=\"keyword\">new</span> ArrayList&lt;Person&gt;();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Person&gt; <span class=\"title\">findByName</span><span class=\"params\">(String name)</span> </span>&#123;</div><div class=\"line\">        List&lt;Person&gt; result = <span class=\"keyword\">new</span> ArrayList&lt;Person&gt;();</div><div class=\"line\">        <span class=\"keyword\">for</span> (Person person : persons) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (person.getName().equals(name)) &#123;</div><div class=\"line\">                result.add(person);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> result;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>例如我们有一个方法findByName，以后可能还需要更多方法例如findByAge，findByGender，findChildren等等方法，所有的方法其实都只有查找的过滤条件不同，可以抽象出函数式的写法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;Person&gt; <span class=\"title\">findPersons</span><span class=\"params\">(Predicate&lt;Person&gt; predicate, Person people)</span> </span>&#123;</div><div class=\"line\">  List&lt;Person&gt; result = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">  <span class=\"keyword\">for</span> (Person person : persons) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (predicate.test(people)) &#123;</div><div class=\"line\">      result.add(person);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Java8可以简写成：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;Person&gt; <span class=\"title\">findPersons</span><span class=\"params\">(Predicate&lt;Person&gt; predicate, Person people)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> persons.stream().filter(predicate).collect(Collectors.toList());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>一个报表程序需要初始化报表参数。具体的参数分为三种类型，都实现了<code>Parameter</code>类型，具体的初始化过程由子类实现。</p>\n<p>对报表参数初始化的过程，从对具体实现过程的依赖，依次经历对接口、对数据结构，最终对行为依赖，不断抽象依赖，实现更大程度的复用。</p>\n<h2 id=\"对实现的依赖\"><a href=\"#对实现的依赖\" class=\"headerlink\" title=\"对实现的依赖\"></a>对实现的依赖</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ParameterCollector</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">fillParameters</span><span class=\"params\">(ServletHttpRequest request, </div><div class=\"line\">                                ParameterGraph parameterGraph)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (Parameter para : parameterGraph.getParmaeters()) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (para <span class=\"keyword\">instanceof</span> SimpleParameter) &#123;</div><div class=\"line\">                SimpleParameter simplePara = (SimpleParameter) para;</div><div class=\"line\">                String[] values = request.getParameterValues(para.getName());</div><div class=\"line\">                simplePara.setValue(values);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (para <span class=\"keyword\">instanceof</span> ItemParameter) &#123;</div><div class=\"line\">                    ItemParameter itemPara = (ItemParameter) para;</div><div class=\"line\">                    <span class=\"keyword\">for</span> (Item item : itemPara.getItems()) &#123;</div><div class=\"line\">                        String[] values = request.getParameterValues(item.getName());</div><div class=\"line\">                        item.setValues(values);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    TableParameter tablePara = (TableParameter) para;</div><div class=\"line\">                    String[] rows =</div><div class=\"line\">                            request.getParameterValues(tablePara.getRowName());</div><div class=\"line\">                    String[] columns =</div><div class=\"line\">                            request.getParameterValues(tablePara.getColumnName());</div><div class=\"line\">                    String[] dataCells =</div><div class=\"line\">                            request.getParameterValues(tablePara.getDataCellName());</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">int</span> columnSize = columns.length;</div><div class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; rows.length; i++) &#123;</div><div class=\"line\">                        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; columns.length; j++) &#123;</div><div class=\"line\">                            TableParameterElement element = <span class=\"keyword\">new</span> TableParameterElement();</div><div class=\"line\">                            element.setRow(rows[i]);</div><div class=\"line\">                            element.setColumn(columns[j]);</div><div class=\"line\">                            element.setDataCell(dataCells[columnSize * i + j]);</div><div class=\"line\">                            tablePara.addElement(element);</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>坏代码的味道：</p>\n<ol>\n<li>多层次的循环、IF嵌套，如果要在这个层次上加一个期限，那就是大于2。</li>\n<li><code>IF/SWITCH instanceof Class</code>式的样板代码</li>\n</ol>\n<h2 id=\"对接口的依赖\"><a href=\"#对接口的依赖\" class=\"headerlink\" title=\"对接口的依赖\"></a>对接口的依赖</h2><p>多态替换分支语句，重构：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ParameterCollector</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">fillParameters</span><span class=\"params\">(ServletHttpRequest request, </div><div class=\"line\">                                ParameterGraph parameterGraph)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (Parameter para : parameterGraph.getParmaeters()) &#123;</div><div class=\"line\">            para.fillParamter(request);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"对数据结构的依赖\"><a href=\"#对数据结构的依赖\" class=\"headerlink\" title=\"对数据结构的依赖\"></a>对数据结构的依赖</h2><p>上面的重构使用多态极大简化了<code>ParameterCollector</code>，同时也让不同实现的<code>Parameter</code>更加容易维护。但是在Parameter的方法中传递了request，这使得Parameter类所在的包也必须依赖ServletHttpRequest。这种包之间不必要的耦合可以使用Map保存需要的键值映射关系，弱化这种依赖关系。</p>\n<p>进一步重构：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ParameterCollector</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">fillParameters</span><span class=\"params\">(ServletHttpRequest request, </div><div class=\"line\">                                ParameterGraph parameterGraph)</span> </span>&#123;</div><div class=\"line\">        Map parmaeters = getParameterMap();           </div><div class=\"line\">        <span class=\"keyword\">for</span> (Parameter para : parameterGraph.getParmaeters()) &#123;</div><div class=\"line\">            para.fillParamter(parmaeters);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>进一步重构后的代码虽然避免了对ServletHttpRequest的依赖，但是无法避免的对Map进行了依赖。</p>\n<p>对类似Map这样具体的数据结构依赖，让人无法清晰知道方法参数含义并不是好的编码风格。</p>\n<h2 id=\"对行为的依赖\"><a href=\"#对行为的依赖\" class=\"headerlink\" title=\"对行为的依赖\"></a>对行为的依赖</h2><p>在回头看最初的代码，与Servlet API强耦合的是这样一句<code>request.getParameterValues(para.getName())</code></p>\n<p>依赖的到底是什么？站在函数式编程的角度，依赖的其实是一种行为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">string -&gt;  request.getParameterValues(string)</div></pre></td></tr></table></figure>\n<p>在Java语法中为了传递一个方法，必须让方法附属在一个接口上，像这样：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ParamterRequest</span> </span>&#123;</div><div class=\"line\">    String[] getParameterValues(String string);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>为了让ServletHttpRequest与ParamterRequest相关联，必须适配器模式，对象的适配器实现像下面这样：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ParameterRequestAdapter</span> <span class=\"keyword\">implements</span> <span class=\"title\">ParamterRequest</span> </span>&#123;</div><div class=\"line\">    ServletHttpRequest servletHttpRequest;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ParameterRequestAdapter</span><span class=\"params\">(ServletHttpRequest servletHttpRequest)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.servletHttpRequest = servletHttpRequest;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"keyword\">public</span> String[] getParameterValues(String string) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> servletHttpRequest.getParameterValues(string);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>使用上面的适配器再进一步重构：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">fillParameters</span><span class=\"params\">(ServletHttpRequest request, ParameterGraph parameterGraph)</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (Parameter para : parameterGraph.getParmaeters()) &#123;</div><div class=\"line\">\t\tpara.fillParamter(<span class=\"keyword\">new</span> ParameterRequestAdapter(request));</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我们还可以使用匿名内部类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">fillParameters</span><span class=\"params\">(ServletHttpRequest request, ParameterGraph parameterGraph)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">for</span> (Parameter para : parameterGraph.getParmaeters()) &#123;</div><div class=\"line\">    para.fillParamter(<span class=\"keyword\">new</span> ParamterRequest() &#123;</div><div class=\"line\">      <span class=\"meta\">@Override</span></div><div class=\"line\">      <span class=\"keyword\">public</span> String[] getParameterValues(String string) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> request.getParameterValues(string);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在Java8我们还可以这样写：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">fillParameters</span><span class=\"params\">(ServletHttpRequest request, ParameterGraph parameterGraph)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">for</span> (Parameter para : parameterGraph.getParmaeters()) &#123;</div><div class=\"line\">    para.fillParamter(string -&gt;  request.getParameterValues(string));</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>甚至还可以这样：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">fillParameters</span><span class=\"params\">(ServletHttpRequest request, ParameterGraph parameterGraph)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">for</span> (Parameter para : parameterGraph.getParmaeters()) &#123;</div><div class=\"line\">    para.fillParamter(request::getParameterValues);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>回头看一眼原有大篇幅的方法，再看看多次重构过的代码。</p>\n<p>最明显的感受<code>fillParameters</code>方法比以前薄了：</p>\n<p>不相关的职责从方法中抽取出来放到单独的类维护了（职责单一）</p>\n<p>当有更多参数类型需要添加时<code>fillParameters</code>不需要做任何的修改，只要添加对应类型就好（开闭原则）</p>\n<p>之前对实现类的依赖现在变成了对接口的依赖（依赖倒置）</p>\n<p>重构过程中<code>Parameter</code>从对<code>request</code>的依赖变为对数据结构（Map）的依赖，避免了Parameter所在模块与<code>Servlet API</code>之间的耦合。</p>\n<p>从对数据结构的依赖最后变成了对接口（行为）的依赖，抽象程度进一步提高，可维护性也更好。</p>\n<h2 id=\"面向对象与函数式编程\"><a href=\"#面向对象与函数式编程\" class=\"headerlink\" title=\"面向对象与函数式编程\"></a>面向对象与函数式编程</h2><p>面向对象强调对事物的抽象，强调名词</p>\n<p>函数式编程强调对行为的抽象，强调动词</p>\n<p>例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">People</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> List&lt;Person&gt; persons = <span class=\"keyword\">new</span> ArrayList&lt;Person&gt;();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Person&gt; <span class=\"title\">findByName</span><span class=\"params\">(String name)</span> </span>&#123;</div><div class=\"line\">        List&lt;Person&gt; result = <span class=\"keyword\">new</span> ArrayList&lt;Person&gt;();</div><div class=\"line\">        <span class=\"keyword\">for</span> (Person person : persons) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (person.getName().equals(name)) &#123;</div><div class=\"line\">                result.add(person);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> result;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>例如我们有一个方法findByName，以后可能还需要更多方法例如findByAge，findByGender，findChildren等等方法，所有的方法其实都只有查找的过滤条件不同，可以抽象出函数式的写法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;Person&gt; <span class=\"title\">findPersons</span><span class=\"params\">(Predicate&lt;Person&gt; predicate, Person people)</span> </span>&#123;</div><div class=\"line\">  List&lt;Person&gt; result = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">  <span class=\"keyword\">for</span> (Person person : persons) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (predicate.test(people)) &#123;</div><div class=\"line\">      result.add(person);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Java8可以简写成：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;Person&gt; <span class=\"title\">findPersons</span><span class=\"params\">(Predicate&lt;Person&gt; predicate, Person people)</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> persons.stream().filter(predicate).collect(Collectors.toList());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n"},{"_content":"什么是编译器\n\n编译器是一个程序\n\n核心功能:源程序代码翻译成目标代码\n\n解释器:也是处理程序的一种程序\n\n编译器输出可执行程序:离线\n\n解释器输出结果:在线\n\n第一个编译器:Fortran语言编译器1954~1957\n\n影响:\n\n理论上:形式语言,自动机,文法,语法执导的翻译\n\n实践上:算法,数据结构\n\n编译器架构\n\n\n\n# 编译器结构\n\n编译器具有非常模块化的高层结构\n\n内部结构:\n\n- 前端:输入相关部分,语言,语法规则,约束等\n  - 词法\n  - 语法\n- 后端:目标机器指令集,前端约束到指令集的映射等\n  - 指令生成\n  - 指令优化\n\n可以看成多个阶段构成的\"流水线\"结构(串行结构)\n\n没有优化的编译器结构(所有阶段与符号表关联)\n\n字符序列\n\n​\t词法分析\n\n记号序列\n\n​\t语法分析\n\n抽象语法树\n\n​\t语法分析\n\n中间代码\n\n​\t目标代码\n\n目标代码\n\n编译器由多个阶段组成,每个阶段处理不同问题(使用不同理论,数据结构,算法)\n\n如何划分\n\n- 接口清晰\n- 易于维护,实现\n\n例子:\n\n源语言:加法表达式语言Sum,两种语法形式:\n\n- 整数数字n\n- 加法e1+e2\n\n目标机器:栈式计算机Stack\n\n两条指令:\n\n- push n\n- add\n\n编译1+2+3到栈式计算机上\n\n前端:语法分析产生:抽象语法树(AST)\n\n后端:树的后端遍历 n:push + :add\n\n```\npush 1\npush 2\nadd \npush 3\nadd\n```\n\n增加一个代码优化阶段:\n\n\n\n# 词法分析\n\n阶段划分:\n\n源程序->前端->中间表示->后端->目标程序\n\n前端:\n\n源程序->词法分析->`记号`->语法分析器->`抽象语法树`->语义分析器->中间表示\n\n例子\n\n```\nif (x > 5)\n  y = \"hello\";\nelse\n  z = 1;\n```\n\n隐含的换行符,文件结束标示符\n\n处理后:\n\n```\nIF LPAREN INDENT(x) GT INT(5) RPAREN\n   IDENT(y) ASSIGN STRING(\"hello\") SEMICOLON\nELSE\n   IDENT(z) ASSIGN INT(1) SEMICOLON EOD\n```\n\nLPAREN->单词,记号\n\n词法分析任务:字符流到单词流的切分\n\n1. 记号的数据结构定义\n\n   ```\n   enum kind {IF, LPAREN, ID, INTLIT,...}  // 枚举类型\n   struct token {\n     enum kind k;\n     char *lexeme;  // 所识别单词具体的值\n   }\n   ```\n\n   if(x>5)转化:\n\n   ```\n   token{k=IF,LEXEM = 0};\n   token{k=lp,LEXEM = 0};\n   token{k=ID,LEXEM = \"x\"};\n   ...\n   ```\n\n词法分析实现方法:\n\n1. 手工编码实现法\n   1. 复杂,容易出错\n   2. 可控性比较好\n   3. 流行的方式:GCC,LLVM\n2. 词法分析器的生成器\n   1. 可快速原型,代码量较少\n   2. 但较难控制细节\n\n","source":"_posts/编译器结构.md","raw":"什么是编译器\n\n编译器是一个程序\n\n核心功能:源程序代码翻译成目标代码\n\n解释器:也是处理程序的一种程序\n\n编译器输出可执行程序:离线\n\n解释器输出结果:在线\n\n第一个编译器:Fortran语言编译器1954~1957\n\n影响:\n\n理论上:形式语言,自动机,文法,语法执导的翻译\n\n实践上:算法,数据结构\n\n编译器架构\n\n\n\n# 编译器结构\n\n编译器具有非常模块化的高层结构\n\n内部结构:\n\n- 前端:输入相关部分,语言,语法规则,约束等\n  - 词法\n  - 语法\n- 后端:目标机器指令集,前端约束到指令集的映射等\n  - 指令生成\n  - 指令优化\n\n可以看成多个阶段构成的\"流水线\"结构(串行结构)\n\n没有优化的编译器结构(所有阶段与符号表关联)\n\n字符序列\n\n​\t词法分析\n\n记号序列\n\n​\t语法分析\n\n抽象语法树\n\n​\t语法分析\n\n中间代码\n\n​\t目标代码\n\n目标代码\n\n编译器由多个阶段组成,每个阶段处理不同问题(使用不同理论,数据结构,算法)\n\n如何划分\n\n- 接口清晰\n- 易于维护,实现\n\n例子:\n\n源语言:加法表达式语言Sum,两种语法形式:\n\n- 整数数字n\n- 加法e1+e2\n\n目标机器:栈式计算机Stack\n\n两条指令:\n\n- push n\n- add\n\n编译1+2+3到栈式计算机上\n\n前端:语法分析产生:抽象语法树(AST)\n\n后端:树的后端遍历 n:push + :add\n\n```\npush 1\npush 2\nadd \npush 3\nadd\n```\n\n增加一个代码优化阶段:\n\n\n\n# 词法分析\n\n阶段划分:\n\n源程序->前端->中间表示->后端->目标程序\n\n前端:\n\n源程序->词法分析->`记号`->语法分析器->`抽象语法树`->语义分析器->中间表示\n\n例子\n\n```\nif (x > 5)\n  y = \"hello\";\nelse\n  z = 1;\n```\n\n隐含的换行符,文件结束标示符\n\n处理后:\n\n```\nIF LPAREN INDENT(x) GT INT(5) RPAREN\n   IDENT(y) ASSIGN STRING(\"hello\") SEMICOLON\nELSE\n   IDENT(z) ASSIGN INT(1) SEMICOLON EOD\n```\n\nLPAREN->单词,记号\n\n词法分析任务:字符流到单词流的切分\n\n1. 记号的数据结构定义\n\n   ```\n   enum kind {IF, LPAREN, ID, INTLIT,...}  // 枚举类型\n   struct token {\n     enum kind k;\n     char *lexeme;  // 所识别单词具体的值\n   }\n   ```\n\n   if(x>5)转化:\n\n   ```\n   token{k=IF,LEXEM = 0};\n   token{k=lp,LEXEM = 0};\n   token{k=ID,LEXEM = \"x\"};\n   ...\n   ```\n\n词法分析实现方法:\n\n1. 手工编码实现法\n   1. 复杂,容易出错\n   2. 可控性比较好\n   3. 流行的方式:GCC,LLVM\n2. 词法分析器的生成器\n   1. 可快速原型,代码量较少\n   2. 但较难控制细节\n\n","slug":"编译器结构","published":1,"date":"2017-01-07T05:33:56.000Z","updated":"2017-01-07T05:33:56.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cixmu6mxr001bpo2eawhep1dy","content":"<p>什么是编译器</p>\n<p>编译器是一个程序</p>\n<p>核心功能:源程序代码翻译成目标代码</p>\n<p>解释器:也是处理程序的一种程序</p>\n<p>编译器输出可执行程序:离线</p>\n<p>解释器输出结果:在线</p>\n<p>第一个编译器:Fortran语言编译器1954~1957</p>\n<p>影响:</p>\n<p>理论上:形式语言,自动机,文法,语法执导的翻译</p>\n<p>实践上:算法,数据结构</p>\n<p>编译器架构</p>\n<h1 id=\"编译器结构\"><a href=\"#编译器结构\" class=\"headerlink\" title=\"编译器结构\"></a>编译器结构</h1><p>编译器具有非常模块化的高层结构</p>\n<p>内部结构:</p>\n<ul>\n<li>前端:输入相关部分,语言,语法规则,约束等<ul>\n<li>词法</li>\n<li>语法</li>\n</ul>\n</li>\n<li>后端:目标机器指令集,前端约束到指令集的映射等<ul>\n<li>指令生成</li>\n<li>指令优化</li>\n</ul>\n</li>\n</ul>\n<p>可以看成多个阶段构成的”流水线”结构(串行结构)</p>\n<p>没有优化的编译器结构(所有阶段与符号表关联)</p>\n<p>字符序列</p>\n<p>​    词法分析</p>\n<p>记号序列</p>\n<p>​    语法分析</p>\n<p>抽象语法树</p>\n<p>​    语法分析</p>\n<p>中间代码</p>\n<p>​    目标代码</p>\n<p>目标代码</p>\n<p>编译器由多个阶段组成,每个阶段处理不同问题(使用不同理论,数据结构,算法)</p>\n<p>如何划分</p>\n<ul>\n<li>接口清晰</li>\n<li>易于维护,实现</li>\n</ul>\n<p>例子:</p>\n<p>源语言:加法表达式语言Sum,两种语法形式:</p>\n<ul>\n<li>整数数字n</li>\n<li>加法e1+e2</li>\n</ul>\n<p>目标机器:栈式计算机Stack</p>\n<p>两条指令:</p>\n<ul>\n<li>push n</li>\n<li>add</li>\n</ul>\n<p>编译1+2+3到栈式计算机上</p>\n<p>前端:语法分析产生:抽象语法树(AST)</p>\n<p>后端:树的后端遍历 n:push + :add</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">push 1</div><div class=\"line\">push 2</div><div class=\"line\">add </div><div class=\"line\">push 3</div><div class=\"line\">add</div></pre></td></tr></table></figure>\n<p>增加一个代码优化阶段:</p>\n<h1 id=\"词法分析\"><a href=\"#词法分析\" class=\"headerlink\" title=\"词法分析\"></a>词法分析</h1><p>阶段划分:</p>\n<p>源程序-&gt;前端-&gt;中间表示-&gt;后端-&gt;目标程序</p>\n<p>前端:</p>\n<p>源程序-&gt;词法分析-&gt;<code>记号</code>-&gt;语法分析器-&gt;<code>抽象语法树</code>-&gt;语义分析器-&gt;中间表示</p>\n<p>例子</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">if (x &gt; 5)</div><div class=\"line\">  y = &quot;hello&quot;;</div><div class=\"line\">else</div><div class=\"line\">  z = 1;</div></pre></td></tr></table></figure>\n<p>隐含的换行符,文件结束标示符</p>\n<p>处理后:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">IF LPAREN INDENT(x) GT INT(5) RPAREN</div><div class=\"line\">   IDENT(y) ASSIGN STRING(&quot;hello&quot;) SEMICOLON</div><div class=\"line\">ELSE</div><div class=\"line\">   IDENT(z) ASSIGN INT(1) SEMICOLON EOD</div></pre></td></tr></table></figure>\n<p>LPAREN-&gt;单词,记号</p>\n<p>词法分析任务:字符流到单词流的切分</p>\n<ol>\n<li><p>记号的数据结构定义</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">enum kind &#123;IF, LPAREN, ID, INTLIT,...&#125;  // 枚举类型</div><div class=\"line\">struct token &#123;</div><div class=\"line\">  enum kind k;</div><div class=\"line\">  char *lexeme;  // 所识别单词具体的值</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>if(x&gt;5)转化:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">token&#123;k=IF,LEXEM = 0&#125;;</div><div class=\"line\">token&#123;k=lp,LEXEM = 0&#125;;</div><div class=\"line\">token&#123;k=ID,LEXEM = &quot;x&quot;&#125;;</div><div class=\"line\">...</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>词法分析实现方法:</p>\n<ol>\n<li>手工编码实现法<ol>\n<li>复杂,容易出错</li>\n<li>可控性比较好</li>\n<li>流行的方式:GCC,LLVM</li>\n</ol>\n</li>\n<li>词法分析器的生成器<ol>\n<li>可快速原型,代码量较少</li>\n<li>但较难控制细节</li>\n</ol>\n</li>\n</ol>\n","excerpt":"","more":"<p>什么是编译器</p>\n<p>编译器是一个程序</p>\n<p>核心功能:源程序代码翻译成目标代码</p>\n<p>解释器:也是处理程序的一种程序</p>\n<p>编译器输出可执行程序:离线</p>\n<p>解释器输出结果:在线</p>\n<p>第一个编译器:Fortran语言编译器1954~1957</p>\n<p>影响:</p>\n<p>理论上:形式语言,自动机,文法,语法执导的翻译</p>\n<p>实践上:算法,数据结构</p>\n<p>编译器架构</p>\n<h1 id=\"编译器结构\"><a href=\"#编译器结构\" class=\"headerlink\" title=\"编译器结构\"></a>编译器结构</h1><p>编译器具有非常模块化的高层结构</p>\n<p>内部结构:</p>\n<ul>\n<li>前端:输入相关部分,语言,语法规则,约束等<ul>\n<li>词法</li>\n<li>语法</li>\n</ul>\n</li>\n<li>后端:目标机器指令集,前端约束到指令集的映射等<ul>\n<li>指令生成</li>\n<li>指令优化</li>\n</ul>\n</li>\n</ul>\n<p>可以看成多个阶段构成的”流水线”结构(串行结构)</p>\n<p>没有优化的编译器结构(所有阶段与符号表关联)</p>\n<p>字符序列</p>\n<p>​    词法分析</p>\n<p>记号序列</p>\n<p>​    语法分析</p>\n<p>抽象语法树</p>\n<p>​    语法分析</p>\n<p>中间代码</p>\n<p>​    目标代码</p>\n<p>目标代码</p>\n<p>编译器由多个阶段组成,每个阶段处理不同问题(使用不同理论,数据结构,算法)</p>\n<p>如何划分</p>\n<ul>\n<li>接口清晰</li>\n<li>易于维护,实现</li>\n</ul>\n<p>例子:</p>\n<p>源语言:加法表达式语言Sum,两种语法形式:</p>\n<ul>\n<li>整数数字n</li>\n<li>加法e1+e2</li>\n</ul>\n<p>目标机器:栈式计算机Stack</p>\n<p>两条指令:</p>\n<ul>\n<li>push n</li>\n<li>add</li>\n</ul>\n<p>编译1+2+3到栈式计算机上</p>\n<p>前端:语法分析产生:抽象语法树(AST)</p>\n<p>后端:树的后端遍历 n:push + :add</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">push 1</div><div class=\"line\">push 2</div><div class=\"line\">add </div><div class=\"line\">push 3</div><div class=\"line\">add</div></pre></td></tr></table></figure>\n<p>增加一个代码优化阶段:</p>\n<h1 id=\"词法分析\"><a href=\"#词法分析\" class=\"headerlink\" title=\"词法分析\"></a>词法分析</h1><p>阶段划分:</p>\n<p>源程序-&gt;前端-&gt;中间表示-&gt;后端-&gt;目标程序</p>\n<p>前端:</p>\n<p>源程序-&gt;词法分析-&gt;<code>记号</code>-&gt;语法分析器-&gt;<code>抽象语法树</code>-&gt;语义分析器-&gt;中间表示</p>\n<p>例子</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">if (x &gt; 5)</div><div class=\"line\">  y = &quot;hello&quot;;</div><div class=\"line\">else</div><div class=\"line\">  z = 1;</div></pre></td></tr></table></figure>\n<p>隐含的换行符,文件结束标示符</p>\n<p>处理后:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">IF LPAREN INDENT(x) GT INT(5) RPAREN</div><div class=\"line\">   IDENT(y) ASSIGN STRING(&quot;hello&quot;) SEMICOLON</div><div class=\"line\">ELSE</div><div class=\"line\">   IDENT(z) ASSIGN INT(1) SEMICOLON EOD</div></pre></td></tr></table></figure>\n<p>LPAREN-&gt;单词,记号</p>\n<p>词法分析任务:字符流到单词流的切分</p>\n<ol>\n<li><p>记号的数据结构定义</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">enum kind &#123;IF, LPAREN, ID, INTLIT,...&#125;  // 枚举类型</div><div class=\"line\">struct token &#123;</div><div class=\"line\">  enum kind k;</div><div class=\"line\">  char *lexeme;  // 所识别单词具体的值</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>if(x&gt;5)转化:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">token&#123;k=IF,LEXEM = 0&#125;;</div><div class=\"line\">token&#123;k=lp,LEXEM = 0&#125;;</div><div class=\"line\">token&#123;k=ID,LEXEM = &quot;x&quot;&#125;;</div><div class=\"line\">...</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>词法分析实现方法:</p>\n<ol>\n<li>手工编码实现法<ol>\n<li>复杂,容易出错</li>\n<li>可控性比较好</li>\n<li>流行的方式:GCC,LLVM</li>\n</ol>\n</li>\n<li>词法分析器的生成器<ol>\n<li>可快速原型,代码量较少</li>\n<li>但较难控制细节</li>\n</ol>\n</li>\n</ol>\n"},{"title":"自下而上的开发实践","date":"2016-10-22T11:23:25.000Z","_content":"\n## 两种开发思路\n\n**自上而下**：设计先行，根据设计开发\n\n**自下而上**：开发先行，给予开发重构\n\n## 关注点分离\n\n类似于文章段落的划分，代码拆分的简单过程可以概括为：\n\n- 分行\n  - 方法真实逻辑与业务支撑逻辑的划分\n  - 基于模块层次的划分，而不是语句行数的划分\n- 注释\n  - 良好命名要胜过写大量的注释\n- 抽象提取方法\n  - 合理封装\n  - 参数内联\n  - 方法名、可访问性\n- 删除不必要的分行与注释\n\n## 共性与可变性分析\n\n软件工程的两个敌人：\n\n* 共性：开发成本、维护成本 \n* 可变性：维护成本\n\n共性的复用两种模式：\n\n- 继承\n  - 强耦合关系，父类的修改影响所有子类\n  - 单继承限制\n  - 多态\n  - 差异式编程\n  - 钩子方法\n- 组合\n  - 优先使用\n  - 依赖注入\n  - 优先组合接口而非实现\n    - 控制翻转\n\n## 接口\n\ncontext+role+collaborator\n\n好处：类型确定，但实现可变、不确定\n\n类与接口的关系类似于人与角色的关系：\n\n- 人可以有多个角色，类可以有多个接口\n- 人的某一个角色的确定是由环境决定的，类某一接口的确定是由上下文环境决定的\n\n接口设计应当遵循的原则：**接口隔离原则（SIP）**\n\n接口应该是干净的，单一的，细粒度的，而不是混合过多的方法，职责单一\n\n## 扩展式设计的一般过程：\n\n1. 分离职责各司其职：关注点分离\n   - 向上分离：继承\n   - 向外分离：组合\n2. 统一接口：\n   - 提炼接口，提供多态\n   - 面向接口编程\n3. 引用接口预留空白\n   - 依赖注入\n\n以一个事务为例子展示扩展式设计的一般过程：\n\n首先，有一个Service，在方法中业务逻辑与JDBC事务粘合在一起：\n\n\n```java\npublic class OrderService {\n    private DatabasePool dbPool;\n\n    public void subscribTrainings(List<Training> trainings, \n                                  Customer customer) throws SQLException {\n        // 初始化方法\n      \tConnection c = null;\n        PreparedStatement ps = null;\n        Statement s = null;\n        ResultSet rs = null;\n        boolean transactionState = false;\n      \n        try {\n          \t// 开启事务 \n            s = c.createStatement();\n            transactionState = c.getAutoCommit();\n            c.setAutoCommit(false);\n          \n          \t// 业务操作\n            for (Training training : trainings) {\n                addTrainingItem(customer, training);\n            }\n            addOrder(customer, trainings);\n            \n          \t// 提交事务\n          \tc.commit();\n        } catch (SQLException sqlx) {\n          \t// 回滚\n            c.rollback();\n          \n            throw sqlx;\n        } finally {\n          \t// 关闭操作\n            try {\n                c.setAutoCommit(transactionState);\n                dbPool.release(c);\n                if (s != null) s.close();\n                if (ps != null) ps.close();\n                if (rs != null) rs.close();\n            } catch (SQLException ignored) {\n            }\n        }\n    }\n\n    private void addOrder(Customer customer, List<Training> trainings) {\n\t\n    }\n\n    private void addTrainingItem(Customer customer, Training training) {\n\n    }\n}\n```\n\n第一步在原始代码上分段并添加注释后代码如上所示。对每段代码提取方法，向上抽象：\n\n```java\npublic class TransactionScope {\n    private DatabasePool dbPool;\n    private Connection connection;\n    private PreparedStatement preparedStatement;\n    private Statement statement;\n    private ResultSet resultSet;\n    private boolean transactionState;\n\n    public void using() throws SQLException {\n        setup();\n        try {\n            beginTransaction();\n            // 留白一个具体的业务的实现:\n            //      1. (模板方法)继承->钩子方法\n            //      2. (委派)传递一个方法(方法接口)\n            commitTransaction();\n        } catch (SQLException sqlx) {\n            rollbackTransaction();\n            throw sqlx;\n        } finally {\n            teardown();\n        }\n    }\n\n    private void rollbackTransaction() throws SQLException {\n        connection.rollback();\n    }\n\n    private void setup() {\n        connection = null;\n        preparedStatement = null;\n        statement = null;\n        resultSet = null;\n        transactionState = false;\n    }\n\n    private void teardown() {\n        try {\n            connection.setAutoCommit(transactionState);\n            dbPool.release(connection);\n            if (statement != null) statement.close();\n            if (preparedStatement != null) preparedStatement.close();\n            if (resultSet != null) resultSet.close();\n        } catch (SQLException ignored) {\n        }\n    }\n\n    private void commitTransaction() throws SQLException {\n        connection.commit();\n    }\n\n    private void beginTransaction() throws SQLException {\n        statement = connection.createStatement();\n        transactionState = connection.getAutoCommit();\n        connection.setAutoCommit(false);\n    }\n}\n\npublic interface Command {\n    void execute();\n}\n\n```\n现在提炼出了一个本地事务的基本控制模板，实现了事务控制与业务逻辑控制基本分离。\n\n继续提炼事务控制类的接口，用于横向扩展继承使用：\n\n```java\npublic interface TransactionScope {\n    void using(Command command) throws SQLException;\n}\n\npublic class LocalTransactionScope implements TransactionScope {\n  \t@Override\n    public void using(Command action) throws SQLException {\n        setup();\n        try {\n            beginTransaction();\n            action.execute();  // 具体的业务逻辑\n            commitTransaction();\n        } catch (SQLException sqlx) {\n            rollbackTransaction();\n            throw sqlx;\n        } finally {\n            teardown();\n        }\n    }\n}\n\npublic class DistructedTransactionScope implements TransactionScope {\n    @Override\n    public void using(Command command) throws SQLException {\n      \n    }\n}\n```\n调用方通过接口留白，实现依赖注入：\n\n```java\npublic class OrderService {\n    private TransactionScope transactionScope;\n\n    public void setTransactionScope(TransactionScope transactionScope) {\n        this.transactionScope = transactionScope;\n    }\n\n    public void subscribTrainings(List<Training> trainings, \n                                  Customer customer) throws SQLException {\n        transactionScope.using(() -> {\n                for (Training training : trainings) {\n                    addTrainingItem(customer, training);\n                }\n                addOrder(customer, trainings);\n        });\n    }\n}\n```\n","source":"_posts/自下而上的开发实践.md","raw":"---\ntitle: 自下而上的开发实践\ndate: 2016-10-22 19:23:25\ntags:\n  - 设计模式\n  - Java\ncategories: 设计模式\n---\n\n## 两种开发思路\n\n**自上而下**：设计先行，根据设计开发\n\n**自下而上**：开发先行，给予开发重构\n\n## 关注点分离\n\n类似于文章段落的划分，代码拆分的简单过程可以概括为：\n\n- 分行\n  - 方法真实逻辑与业务支撑逻辑的划分\n  - 基于模块层次的划分，而不是语句行数的划分\n- 注释\n  - 良好命名要胜过写大量的注释\n- 抽象提取方法\n  - 合理封装\n  - 参数内联\n  - 方法名、可访问性\n- 删除不必要的分行与注释\n\n## 共性与可变性分析\n\n软件工程的两个敌人：\n\n* 共性：开发成本、维护成本 \n* 可变性：维护成本\n\n共性的复用两种模式：\n\n- 继承\n  - 强耦合关系，父类的修改影响所有子类\n  - 单继承限制\n  - 多态\n  - 差异式编程\n  - 钩子方法\n- 组合\n  - 优先使用\n  - 依赖注入\n  - 优先组合接口而非实现\n    - 控制翻转\n\n## 接口\n\ncontext+role+collaborator\n\n好处：类型确定，但实现可变、不确定\n\n类与接口的关系类似于人与角色的关系：\n\n- 人可以有多个角色，类可以有多个接口\n- 人的某一个角色的确定是由环境决定的，类某一接口的确定是由上下文环境决定的\n\n接口设计应当遵循的原则：**接口隔离原则（SIP）**\n\n接口应该是干净的，单一的，细粒度的，而不是混合过多的方法，职责单一\n\n## 扩展式设计的一般过程：\n\n1. 分离职责各司其职：关注点分离\n   - 向上分离：继承\n   - 向外分离：组合\n2. 统一接口：\n   - 提炼接口，提供多态\n   - 面向接口编程\n3. 引用接口预留空白\n   - 依赖注入\n\n以一个事务为例子展示扩展式设计的一般过程：\n\n首先，有一个Service，在方法中业务逻辑与JDBC事务粘合在一起：\n\n\n```java\npublic class OrderService {\n    private DatabasePool dbPool;\n\n    public void subscribTrainings(List<Training> trainings, \n                                  Customer customer) throws SQLException {\n        // 初始化方法\n      \tConnection c = null;\n        PreparedStatement ps = null;\n        Statement s = null;\n        ResultSet rs = null;\n        boolean transactionState = false;\n      \n        try {\n          \t// 开启事务 \n            s = c.createStatement();\n            transactionState = c.getAutoCommit();\n            c.setAutoCommit(false);\n          \n          \t// 业务操作\n            for (Training training : trainings) {\n                addTrainingItem(customer, training);\n            }\n            addOrder(customer, trainings);\n            \n          \t// 提交事务\n          \tc.commit();\n        } catch (SQLException sqlx) {\n          \t// 回滚\n            c.rollback();\n          \n            throw sqlx;\n        } finally {\n          \t// 关闭操作\n            try {\n                c.setAutoCommit(transactionState);\n                dbPool.release(c);\n                if (s != null) s.close();\n                if (ps != null) ps.close();\n                if (rs != null) rs.close();\n            } catch (SQLException ignored) {\n            }\n        }\n    }\n\n    private void addOrder(Customer customer, List<Training> trainings) {\n\t\n    }\n\n    private void addTrainingItem(Customer customer, Training training) {\n\n    }\n}\n```\n\n第一步在原始代码上分段并添加注释后代码如上所示。对每段代码提取方法，向上抽象：\n\n```java\npublic class TransactionScope {\n    private DatabasePool dbPool;\n    private Connection connection;\n    private PreparedStatement preparedStatement;\n    private Statement statement;\n    private ResultSet resultSet;\n    private boolean transactionState;\n\n    public void using() throws SQLException {\n        setup();\n        try {\n            beginTransaction();\n            // 留白一个具体的业务的实现:\n            //      1. (模板方法)继承->钩子方法\n            //      2. (委派)传递一个方法(方法接口)\n            commitTransaction();\n        } catch (SQLException sqlx) {\n            rollbackTransaction();\n            throw sqlx;\n        } finally {\n            teardown();\n        }\n    }\n\n    private void rollbackTransaction() throws SQLException {\n        connection.rollback();\n    }\n\n    private void setup() {\n        connection = null;\n        preparedStatement = null;\n        statement = null;\n        resultSet = null;\n        transactionState = false;\n    }\n\n    private void teardown() {\n        try {\n            connection.setAutoCommit(transactionState);\n            dbPool.release(connection);\n            if (statement != null) statement.close();\n            if (preparedStatement != null) preparedStatement.close();\n            if (resultSet != null) resultSet.close();\n        } catch (SQLException ignored) {\n        }\n    }\n\n    private void commitTransaction() throws SQLException {\n        connection.commit();\n    }\n\n    private void beginTransaction() throws SQLException {\n        statement = connection.createStatement();\n        transactionState = connection.getAutoCommit();\n        connection.setAutoCommit(false);\n    }\n}\n\npublic interface Command {\n    void execute();\n}\n\n```\n现在提炼出了一个本地事务的基本控制模板，实现了事务控制与业务逻辑控制基本分离。\n\n继续提炼事务控制类的接口，用于横向扩展继承使用：\n\n```java\npublic interface TransactionScope {\n    void using(Command command) throws SQLException;\n}\n\npublic class LocalTransactionScope implements TransactionScope {\n  \t@Override\n    public void using(Command action) throws SQLException {\n        setup();\n        try {\n            beginTransaction();\n            action.execute();  // 具体的业务逻辑\n            commitTransaction();\n        } catch (SQLException sqlx) {\n            rollbackTransaction();\n            throw sqlx;\n        } finally {\n            teardown();\n        }\n    }\n}\n\npublic class DistructedTransactionScope implements TransactionScope {\n    @Override\n    public void using(Command command) throws SQLException {\n      \n    }\n}\n```\n调用方通过接口留白，实现依赖注入：\n\n```java\npublic class OrderService {\n    private TransactionScope transactionScope;\n\n    public void setTransactionScope(TransactionScope transactionScope) {\n        this.transactionScope = transactionScope;\n    }\n\n    public void subscribTrainings(List<Training> trainings, \n                                  Customer customer) throws SQLException {\n        transactionScope.using(() -> {\n                for (Training training : trainings) {\n                    addTrainingItem(customer, training);\n                }\n                addOrder(customer, trainings);\n        });\n    }\n}\n```\n","slug":"自下而上的开发实践","published":1,"updated":"2017-01-07T05:33:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixmu6mxw001fpo2e3vdajyg4","content":"<h2 id=\"两种开发思路\"><a href=\"#两种开发思路\" class=\"headerlink\" title=\"两种开发思路\"></a>两种开发思路</h2><p><strong>自上而下</strong>：设计先行，根据设计开发</p>\n<p><strong>自下而上</strong>：开发先行，给予开发重构</p>\n<h2 id=\"关注点分离\"><a href=\"#关注点分离\" class=\"headerlink\" title=\"关注点分离\"></a>关注点分离</h2><p>类似于文章段落的划分，代码拆分的简单过程可以概括为：</p>\n<ul>\n<li>分行<ul>\n<li>方法真实逻辑与业务支撑逻辑的划分</li>\n<li>基于模块层次的划分，而不是语句行数的划分</li>\n</ul>\n</li>\n<li>注释<ul>\n<li>良好命名要胜过写大量的注释</li>\n</ul>\n</li>\n<li>抽象提取方法<ul>\n<li>合理封装</li>\n<li>参数内联</li>\n<li>方法名、可访问性</li>\n</ul>\n</li>\n<li>删除不必要的分行与注释</li>\n</ul>\n<h2 id=\"共性与可变性分析\"><a href=\"#共性与可变性分析\" class=\"headerlink\" title=\"共性与可变性分析\"></a>共性与可变性分析</h2><p>软件工程的两个敌人：</p>\n<ul>\n<li>共性：开发成本、维护成本 </li>\n<li>可变性：维护成本</li>\n</ul>\n<p>共性的复用两种模式：</p>\n<ul>\n<li>继承<ul>\n<li>强耦合关系，父类的修改影响所有子类</li>\n<li>单继承限制</li>\n<li>多态</li>\n<li>差异式编程</li>\n<li>钩子方法</li>\n</ul>\n</li>\n<li>组合<ul>\n<li>优先使用</li>\n<li>依赖注入</li>\n<li>优先组合接口而非实现<ul>\n<li>控制翻转</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h2><p>context+role+collaborator</p>\n<p>好处：类型确定，但实现可变、不确定</p>\n<p>类与接口的关系类似于人与角色的关系：</p>\n<ul>\n<li>人可以有多个角色，类可以有多个接口</li>\n<li>人的某一个角色的确定是由环境决定的，类某一接口的确定是由上下文环境决定的</li>\n</ul>\n<p>接口设计应当遵循的原则：<strong>接口隔离原则（SIP）</strong></p>\n<p>接口应该是干净的，单一的，细粒度的，而不是混合过多的方法，职责单一</p>\n<h2 id=\"扩展式设计的一般过程：\"><a href=\"#扩展式设计的一般过程：\" class=\"headerlink\" title=\"扩展式设计的一般过程：\"></a>扩展式设计的一般过程：</h2><ol>\n<li>分离职责各司其职：关注点分离<ul>\n<li>向上分离：继承</li>\n<li>向外分离：组合</li>\n</ul>\n</li>\n<li>统一接口：<ul>\n<li>提炼接口，提供多态</li>\n<li>面向接口编程</li>\n</ul>\n</li>\n<li>引用接口预留空白<ul>\n<li>依赖注入</li>\n</ul>\n</li>\n</ol>\n<p>以一个事务为例子展示扩展式设计的一般过程：</p>\n<p>首先，有一个Service，在方法中业务逻辑与JDBC事务粘合在一起：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OrderService</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> DatabasePool dbPool;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">subscribTrainings</span><span class=\"params\">(List&lt;Training&gt; trainings, </span></span></div><div class=\"line\">                                  Customer customer) <span class=\"keyword\">throws</span> SQLException &#123;</div><div class=\"line\">        <span class=\"comment\">// 初始化方法</span></div><div class=\"line\">      \tConnection c = <span class=\"keyword\">null</span>;</div><div class=\"line\">        PreparedStatement ps = <span class=\"keyword\">null</span>;</div><div class=\"line\">        Statement s = <span class=\"keyword\">null</span>;</div><div class=\"line\">        ResultSet rs = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">boolean</span> transactionState = <span class=\"keyword\">false</span>;</div><div class=\"line\">      </div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">          \t<span class=\"comment\">// 开启事务 </span></div><div class=\"line\">            s = c.createStatement();</div><div class=\"line\">            transactionState = c.getAutoCommit();</div><div class=\"line\">            c.setAutoCommit(<span class=\"keyword\">false</span>);</div><div class=\"line\">          </div><div class=\"line\">          \t<span class=\"comment\">// 业务操作</span></div><div class=\"line\">            <span class=\"keyword\">for</span> (Training training : trainings) &#123;</div><div class=\"line\">                addTrainingItem(customer, training);</div><div class=\"line\">            &#125;</div><div class=\"line\">            addOrder(customer, trainings);</div><div class=\"line\">            </div><div class=\"line\">          \t<span class=\"comment\">// 提交事务</span></div><div class=\"line\">          \tc.commit();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (SQLException sqlx) &#123;</div><div class=\"line\">          \t<span class=\"comment\">// 回滚</span></div><div class=\"line\">            c.rollback();</div><div class=\"line\">          </div><div class=\"line\">            <span class=\"keyword\">throw</span> sqlx;</div><div class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">          \t<span class=\"comment\">// 关闭操作</span></div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                c.setAutoCommit(transactionState);</div><div class=\"line\">                dbPool.release(c);</div><div class=\"line\">                <span class=\"keyword\">if</span> (s != <span class=\"keyword\">null</span>) s.close();</div><div class=\"line\">                <span class=\"keyword\">if</span> (ps != <span class=\"keyword\">null</span>) ps.close();</div><div class=\"line\">                <span class=\"keyword\">if</span> (rs != <span class=\"keyword\">null</span>) rs.close();</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (SQLException ignored) &#123;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">addOrder</span><span class=\"params\">(Customer customer, List&lt;Training&gt; trainings)</span> </span>&#123;</div><div class=\"line\">\t</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">addTrainingItem</span><span class=\"params\">(Customer customer, Training training)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>第一步在原始代码上分段并添加注释后代码如上所示。对每段代码提取方法，向上抽象：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TransactionScope</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> DatabasePool dbPool;</div><div class=\"line\">    <span class=\"keyword\">private</span> Connection connection;</div><div class=\"line\">    <span class=\"keyword\">private</span> PreparedStatement preparedStatement;</div><div class=\"line\">    <span class=\"keyword\">private</span> Statement statement;</div><div class=\"line\">    <span class=\"keyword\">private</span> ResultSet resultSet;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> transactionState;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">using</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</div><div class=\"line\">        setup();</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            beginTransaction();</div><div class=\"line\">            <span class=\"comment\">// 留白一个具体的业务的实现:</span></div><div class=\"line\">            <span class=\"comment\">//      1. (模板方法)继承-&gt;钩子方法</span></div><div class=\"line\">            <span class=\"comment\">//      2. (委派)传递一个方法(方法接口)</span></div><div class=\"line\">            commitTransaction();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (SQLException sqlx) &#123;</div><div class=\"line\">            rollbackTransaction();</div><div class=\"line\">            <span class=\"keyword\">throw</span> sqlx;</div><div class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">            teardown();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">rollbackTransaction</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</div><div class=\"line\">        connection.rollback();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setup</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        connection = <span class=\"keyword\">null</span>;</div><div class=\"line\">        preparedStatement = <span class=\"keyword\">null</span>;</div><div class=\"line\">        statement = <span class=\"keyword\">null</span>;</div><div class=\"line\">        resultSet = <span class=\"keyword\">null</span>;</div><div class=\"line\">        transactionState = <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">teardown</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            connection.setAutoCommit(transactionState);</div><div class=\"line\">            dbPool.release(connection);</div><div class=\"line\">            <span class=\"keyword\">if</span> (statement != <span class=\"keyword\">null</span>) statement.close();</div><div class=\"line\">            <span class=\"keyword\">if</span> (preparedStatement != <span class=\"keyword\">null</span>) preparedStatement.close();</div><div class=\"line\">            <span class=\"keyword\">if</span> (resultSet != <span class=\"keyword\">null</span>) resultSet.close();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (SQLException ignored) &#123;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">commitTransaction</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</div><div class=\"line\">        connection.commit();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">beginTransaction</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</div><div class=\"line\">        statement = connection.createStatement();</div><div class=\"line\">        transactionState = connection.getAutoCommit();</div><div class=\"line\">        connection.setAutoCommit(<span class=\"keyword\">false</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Command</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>现在提炼出了一个本地事务的基本控制模板，实现了事务控制与业务逻辑控制基本分离。</p>\n<p>继续提炼事务控制类的接口，用于横向扩展继承使用：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">TransactionScope</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">using</span><span class=\"params\">(Command command)</span> <span class=\"keyword\">throws</span> SQLException</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LocalTransactionScope</span> <span class=\"keyword\">implements</span> <span class=\"title\">TransactionScope</span> </span>&#123;</div><div class=\"line\">  \t<span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">using</span><span class=\"params\">(Command action)</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</div><div class=\"line\">        setup();</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            beginTransaction();</div><div class=\"line\">            action.execute();  <span class=\"comment\">// 具体的业务逻辑</span></div><div class=\"line\">            commitTransaction();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (SQLException sqlx) &#123;</div><div class=\"line\">            rollbackTransaction();</div><div class=\"line\">            <span class=\"keyword\">throw</span> sqlx;</div><div class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">            teardown();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DistructedTransactionScope</span> <span class=\"keyword\">implements</span> <span class=\"title\">TransactionScope</span> </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">using</span><span class=\"params\">(Command command)</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</div><div class=\"line\">      </div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>调用方通过接口留白，实现依赖注入：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OrderService</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> TransactionScope transactionScope;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setTransactionScope</span><span class=\"params\">(TransactionScope transactionScope)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.transactionScope = transactionScope;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">subscribTrainings</span><span class=\"params\">(List&lt;Training&gt; trainings, </span></span></div><div class=\"line\">                                  Customer customer) <span class=\"keyword\">throws</span> SQLException &#123;</div><div class=\"line\">        transactionScope.using(() -&gt; &#123;</div><div class=\"line\">                <span class=\"keyword\">for</span> (Training training : trainings) &#123;</div><div class=\"line\">                    addTrainingItem(customer, training);</div><div class=\"line\">                &#125;</div><div class=\"line\">                addOrder(customer, trainings);</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"两种开发思路\"><a href=\"#两种开发思路\" class=\"headerlink\" title=\"两种开发思路\"></a>两种开发思路</h2><p><strong>自上而下</strong>：设计先行，根据设计开发</p>\n<p><strong>自下而上</strong>：开发先行，给予开发重构</p>\n<h2 id=\"关注点分离\"><a href=\"#关注点分离\" class=\"headerlink\" title=\"关注点分离\"></a>关注点分离</h2><p>类似于文章段落的划分，代码拆分的简单过程可以概括为：</p>\n<ul>\n<li>分行<ul>\n<li>方法真实逻辑与业务支撑逻辑的划分</li>\n<li>基于模块层次的划分，而不是语句行数的划分</li>\n</ul>\n</li>\n<li>注释<ul>\n<li>良好命名要胜过写大量的注释</li>\n</ul>\n</li>\n<li>抽象提取方法<ul>\n<li>合理封装</li>\n<li>参数内联</li>\n<li>方法名、可访问性</li>\n</ul>\n</li>\n<li>删除不必要的分行与注释</li>\n</ul>\n<h2 id=\"共性与可变性分析\"><a href=\"#共性与可变性分析\" class=\"headerlink\" title=\"共性与可变性分析\"></a>共性与可变性分析</h2><p>软件工程的两个敌人：</p>\n<ul>\n<li>共性：开发成本、维护成本 </li>\n<li>可变性：维护成本</li>\n</ul>\n<p>共性的复用两种模式：</p>\n<ul>\n<li>继承<ul>\n<li>强耦合关系，父类的修改影响所有子类</li>\n<li>单继承限制</li>\n<li>多态</li>\n<li>差异式编程</li>\n<li>钩子方法</li>\n</ul>\n</li>\n<li>组合<ul>\n<li>优先使用</li>\n<li>依赖注入</li>\n<li>优先组合接口而非实现<ul>\n<li>控制翻转</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h2><p>context+role+collaborator</p>\n<p>好处：类型确定，但实现可变、不确定</p>\n<p>类与接口的关系类似于人与角色的关系：</p>\n<ul>\n<li>人可以有多个角色，类可以有多个接口</li>\n<li>人的某一个角色的确定是由环境决定的，类某一接口的确定是由上下文环境决定的</li>\n</ul>\n<p>接口设计应当遵循的原则：<strong>接口隔离原则（SIP）</strong></p>\n<p>接口应该是干净的，单一的，细粒度的，而不是混合过多的方法，职责单一</p>\n<h2 id=\"扩展式设计的一般过程：\"><a href=\"#扩展式设计的一般过程：\" class=\"headerlink\" title=\"扩展式设计的一般过程：\"></a>扩展式设计的一般过程：</h2><ol>\n<li>分离职责各司其职：关注点分离<ul>\n<li>向上分离：继承</li>\n<li>向外分离：组合</li>\n</ul>\n</li>\n<li>统一接口：<ul>\n<li>提炼接口，提供多态</li>\n<li>面向接口编程</li>\n</ul>\n</li>\n<li>引用接口预留空白<ul>\n<li>依赖注入</li>\n</ul>\n</li>\n</ol>\n<p>以一个事务为例子展示扩展式设计的一般过程：</p>\n<p>首先，有一个Service，在方法中业务逻辑与JDBC事务粘合在一起：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OrderService</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> DatabasePool dbPool;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">subscribTrainings</span><span class=\"params\">(List&lt;Training&gt; trainings, </div><div class=\"line\">                                  Customer customer)</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// 初始化方法</span></div><div class=\"line\">      \tConnection c = <span class=\"keyword\">null</span>;</div><div class=\"line\">        PreparedStatement ps = <span class=\"keyword\">null</span>;</div><div class=\"line\">        Statement s = <span class=\"keyword\">null</span>;</div><div class=\"line\">        ResultSet rs = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">boolean</span> transactionState = <span class=\"keyword\">false</span>;</div><div class=\"line\">      </div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">          \t<span class=\"comment\">// 开启事务 </span></div><div class=\"line\">            s = c.createStatement();</div><div class=\"line\">            transactionState = c.getAutoCommit();</div><div class=\"line\">            c.setAutoCommit(<span class=\"keyword\">false</span>);</div><div class=\"line\">          </div><div class=\"line\">          \t<span class=\"comment\">// 业务操作</span></div><div class=\"line\">            <span class=\"keyword\">for</span> (Training training : trainings) &#123;</div><div class=\"line\">                addTrainingItem(customer, training);</div><div class=\"line\">            &#125;</div><div class=\"line\">            addOrder(customer, trainings);</div><div class=\"line\">            </div><div class=\"line\">          \t<span class=\"comment\">// 提交事务</span></div><div class=\"line\">          \tc.commit();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (SQLException sqlx) &#123;</div><div class=\"line\">          \t<span class=\"comment\">// 回滚</span></div><div class=\"line\">            c.rollback();</div><div class=\"line\">          </div><div class=\"line\">            <span class=\"keyword\">throw</span> sqlx;</div><div class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">          \t<span class=\"comment\">// 关闭操作</span></div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                c.setAutoCommit(transactionState);</div><div class=\"line\">                dbPool.release(c);</div><div class=\"line\">                <span class=\"keyword\">if</span> (s != <span class=\"keyword\">null</span>) s.close();</div><div class=\"line\">                <span class=\"keyword\">if</span> (ps != <span class=\"keyword\">null</span>) ps.close();</div><div class=\"line\">                <span class=\"keyword\">if</span> (rs != <span class=\"keyword\">null</span>) rs.close();</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (SQLException ignored) &#123;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">addOrder</span><span class=\"params\">(Customer customer, List&lt;Training&gt; trainings)</span> </span>&#123;</div><div class=\"line\">\t</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">addTrainingItem</span><span class=\"params\">(Customer customer, Training training)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>第一步在原始代码上分段并添加注释后代码如上所示。对每段代码提取方法，向上抽象：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TransactionScope</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> DatabasePool dbPool;</div><div class=\"line\">    <span class=\"keyword\">private</span> Connection connection;</div><div class=\"line\">    <span class=\"keyword\">private</span> PreparedStatement preparedStatement;</div><div class=\"line\">    <span class=\"keyword\">private</span> Statement statement;</div><div class=\"line\">    <span class=\"keyword\">private</span> ResultSet resultSet;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> transactionState;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">using</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</div><div class=\"line\">        setup();</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            beginTransaction();</div><div class=\"line\">            <span class=\"comment\">// 留白一个具体的业务的实现:</span></div><div class=\"line\">            <span class=\"comment\">//      1. (模板方法)继承-&gt;钩子方法</span></div><div class=\"line\">            <span class=\"comment\">//      2. (委派)传递一个方法(方法接口)</span></div><div class=\"line\">            commitTransaction();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (SQLException sqlx) &#123;</div><div class=\"line\">            rollbackTransaction();</div><div class=\"line\">            <span class=\"keyword\">throw</span> sqlx;</div><div class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">            teardown();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">rollbackTransaction</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</div><div class=\"line\">        connection.rollback();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setup</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        connection = <span class=\"keyword\">null</span>;</div><div class=\"line\">        preparedStatement = <span class=\"keyword\">null</span>;</div><div class=\"line\">        statement = <span class=\"keyword\">null</span>;</div><div class=\"line\">        resultSet = <span class=\"keyword\">null</span>;</div><div class=\"line\">        transactionState = <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">teardown</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            connection.setAutoCommit(transactionState);</div><div class=\"line\">            dbPool.release(connection);</div><div class=\"line\">            <span class=\"keyword\">if</span> (statement != <span class=\"keyword\">null</span>) statement.close();</div><div class=\"line\">            <span class=\"keyword\">if</span> (preparedStatement != <span class=\"keyword\">null</span>) preparedStatement.close();</div><div class=\"line\">            <span class=\"keyword\">if</span> (resultSet != <span class=\"keyword\">null</span>) resultSet.close();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (SQLException ignored) &#123;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">commitTransaction</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</div><div class=\"line\">        connection.commit();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">beginTransaction</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</div><div class=\"line\">        statement = connection.createStatement();</div><div class=\"line\">        transactionState = connection.getAutoCommit();</div><div class=\"line\">        connection.setAutoCommit(<span class=\"keyword\">false</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Command</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>现在提炼出了一个本地事务的基本控制模板，实现了事务控制与业务逻辑控制基本分离。</p>\n<p>继续提炼事务控制类的接口，用于横向扩展继承使用：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">TransactionScope</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">using</span><span class=\"params\">(Command command)</span> <span class=\"keyword\">throws</span> SQLException</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LocalTransactionScope</span> <span class=\"keyword\">implements</span> <span class=\"title\">TransactionScope</span> </span>&#123;</div><div class=\"line\">  \t<span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">using</span><span class=\"params\">(Command action)</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</div><div class=\"line\">        setup();</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            beginTransaction();</div><div class=\"line\">            action.execute();  <span class=\"comment\">// 具体的业务逻辑</span></div><div class=\"line\">            commitTransaction();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (SQLException sqlx) &#123;</div><div class=\"line\">            rollbackTransaction();</div><div class=\"line\">            <span class=\"keyword\">throw</span> sqlx;</div><div class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">            teardown();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DistructedTransactionScope</span> <span class=\"keyword\">implements</span> <span class=\"title\">TransactionScope</span> </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">using</span><span class=\"params\">(Command command)</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</div><div class=\"line\">      </div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>调用方通过接口留白，实现依赖注入：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OrderService</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> TransactionScope transactionScope;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setTransactionScope</span><span class=\"params\">(TransactionScope transactionScope)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.transactionScope = transactionScope;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">subscribTrainings</span><span class=\"params\">(List&lt;Training&gt; trainings, </div><div class=\"line\">                                  Customer customer)</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</div><div class=\"line\">        transactionScope.using(() -&gt; &#123;</div><div class=\"line\">                <span class=\"keyword\">for</span> (Training training : trainings) &#123;</div><div class=\"line\">                    addTrainingItem(customer, training);</div><div class=\"line\">                &#125;</div><div class=\"line\">                addOrder(customer, trainings);</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n"},{"title":"使用CI发布Hexo","date":"2017-01-07T05:34:08.000Z","_content":"\n测试使用CI发布Hexo\n","source":"_posts/使用CI发布Hexo.md","raw":"---\ntitle: 使用CI发布Hexo\ndate: 2017-01-07 13:34:08\ntags:\n---\n\n测试使用CI发布Hexo\n","slug":"使用CI发布Hexo","published":1,"updated":"2017-01-07T05:35:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixmu6my0001ipo2evppastqo","content":"<p>测试使用CI发布Hexo</p>\n","excerpt":"","more":"<p>测试使用CI发布Hexo</p>\n"},{"title":"使用Builder模式改进多参数方法","date":"2016-10-16T03:58:39.000Z","_content":"\n## 概述\n\n记一次工作当中对多参数方法重构。\n\n1. 使用对象封装对多参数，简化方法调用\n2. 使用Builder（创建者）模式简化多属性对象的创建\n\n## 问题\n\n业务系统中统一的邮件发送服务接口在改造前大概长着个样子：\n\n```java\n\t/**\n     * 不帶附件的邮件发送\n     * 未使用建造者模式的原始方法（不良代码）\n     * @param template                      模板\n     * @param subjects                      主题\n     * @param contents                      内容\n     * @param toPersons                     收件人\n     * @param ccPersons                     抄送人\n     * @param bccPersons                    暗送人\n     */\n    public static void sendEmail(String template, List<String> subjects, List<String> contents, List<String> toPersons,\n                                  List<String> ccPersons, List<String> bccPersons){\n        logger.info(\"send email\");\n    }\n\n\n    /**\n     * 带附件的邮件发送\n     * 未使用建造者模式的原始方法（不良）\n     * @param template                      模板\n     * @param subjects                      主题\n     * @param contents                      内容\n     * @param toPersons                     收件人\n     * @param ccPersons                     抄送人\n     * @param bccPersons                    暗送人\n     * @param docName                       文档名称\n     * @param fileName                      文件名称(单个文件)\n     */\n    public static void sendEmail(String template, List<String> subjects, List<String> contents, List<String> toPersons,\n                                  List<String> ccPersons, List<String> bccPersons, String docName, String fileName){\n        logger.info(\"send email\");\n    }\n\n    /**\n     * 带附件的邮件发送\n     * 未使用建造者模式的原始方法（不良代码）\n     * @param template                      模板\n     * @param subjects                      主题\n     * @param contents                      内容\n     * @param toPersons                     收件人\n     * @param ccPersons                     抄送人\n     * @param bccPersons                    暗送人\n     * @param docName                       文档名称\n     * @param fileNames                     文件名称(多个文件,文件名称列表)\n     */\n    public static void sendEmail(String template, List<String> subjects, List<String> contents, List<String> toPersons,\n                                  List<String> ccPersons, List<String> bccPersons, String docName, List<String> fileNames){\n        logger.info(\"send email\");\n    }\n```\n\n接口有个重要的内容注释中并没有说明：参数中“模板”和“收件人”是必填的，而其他参数是非必填的。\n\n接口的可配置程度还是不错的，但是调用的过程就比较痛苦了。\n\n一大堆String和List接口暴露出来，同时又使用了不同的参数个数来进行重载。\n\n调用的时候光是创建这些参数就够麻烦的了，还要考虑哪些参数是必填的以及参数的正确位置。更糟糕的是参数传错位置你会发现很有可能并没有显式的暴露出问题，邮件还是发送了只是发送到错误的相关人员那里。\n\n其他人看到方法调用也无法清晰知道这个到底是要发什么邮件，给哪些人。\n\n这应该就是坏代码的味道吧。\n\n## 改进\n\n简单的改进思路就是把参数做成一个modle封装起来，以后传递model给方法。就像这样：\n\n```java\n    /**\n     * 邮件发送通用接口\n     * @param email 邮件发送参数对象\n     */\n    public static void sendEmail(EmailSendMain email){\n    \tlogger.info(\"send email:\" + email);\n    }\n```\n\n但是问题还是没有根本解决，对象的构造还是需要多个参数的构造方法，可能还需要重载。\n\n比较容易想到的改进是使用Java Bean模式。简化构造方法字段，构造方法只传入必要的字段，使用setter方法设置其他值。我就是这么肤浅的想到这个地步了。\n\n乍一看问题是解决了，其实不然。\n\n1. 在对象创建过程中Java Bean可能处于不一致状态\n2. 使用Java Bean就将不能创建不可变对象\n\n读了《Effective Java》只是第二章就有了更好的解决思路——Builder模式。\n\n先看改进后的代码：\n\n```java\n/**\n * 复杂类型构建接口\n *\n * 建造者模式中的抽象构建者\n * Created by ZhangHao on 2016/10/15.\n */\npublic interface Builder<T> {\n    T build();\n}\n\n/**\n * 邮件发送参数对象\n * 包含多个字段的复杂类型，使用内部类实现Builder接口创建对象\n *\n * 建造者模式中的产品类\n * Created by ZhangHao on 2016/10/15.\n */\npublic final class EmailSendMain {\n    private final String template;  // 模板名称\n    private final List<String> subjects;  // 主题参数列表\n    private final List<String> contents;  // 内容参数列表\n    private final List<String> toPersons;  // 收件人列表\n    private final List<String> ccPersons;  // 抄送人列表\n    private final List<String> bccPersons;  // 暗送人列表\n    private final String docName;  // 文档名称\n    private final List<String> fileNames;  // 文件名称列表\n\n    private EmailSendMain(Builder builder) {\n        this.template = builder.template;\n        this.subjects = builder.subjects;\n        this.contents = builder.contents;\n        this.toPersons = builder.toPersons;\n        this.ccPersons = builder.ccPersons;\n        this.bccPersons = builder.bccPersons;\n        this.docName = builder.docName;\n        this.fileNames = builder.fileNames;\n    }\n\n    /**\n     * 实现Builder接口的构建类，用于创建EmailSendMain\n     *\n     * 建造者模式中的建造类\n     */\n    public static class Builder implements tk.zhangh.pattern.create.builder.demo1.Builder<EmailSendMain> {\n        private String template;  // 模板名称\n        private List<String> subjects;  // 主题参数列表\n        private List<String> contents;  // 内容参数列表\n        private List<String> toPersons;  // 收件人列表\n        private List<String> ccPersons;  // 抄送人列表\n        private List<String> bccPersons;  // 暗送人列表\n        private String docName;  // 文档名称\n        private List<String> fileNames;  // 文件名称列表\n\n        public Builder(String template, List<String> toPersons) {\n            this.template = template;\n            this.toPersons = toPersons;\n        }\n\n        @Override\n        public EmailSendMain build() {\n            return new EmailSendMain(this);\n        }\n\n        public Builder subjects(List<String> subjects) {\n            this.subjects = subjects;\n            return this;\n        }\n\n        public Builder contents(List<String> contents) {\n            this.contents = contents;\n            return this;\n        }\n\n        public Builder ccPersons(List<String> ccPersons) {\n            this.ccPersons = ccPersons;\n            return this;\n        }\n\n        public Builder bccPersons(List<String> bccPersons) {\n            this.bccPersons = bccPersons;\n            return this;\n        }\n\n        public Builder docName(String docName) {\n            this.docName = docName;\n            return this;\n        }\n\n        public Builder fileNames(List<String> fileNames) {\n            this.fileNames = fileNames;\n            return this;\n        }\n    }\n\n    // getter,toString方法省略\n}\n```\n\n重写做的接口方法封装：\n\n```java\n    /**\n     * 邮件发送通用接口\n     * @param email 邮件发送参数对象\n     */\n    public static void sendEmail(EmailSendMain email){\n        logger.info(\"send email:\" + email);\n        if ((email.getDocName() == null || email.getDocName().equals(\"\")) ||\n                (email.getFileNames() == null || email.getFileNames().size() == 0)) {\n            sendEmail(email.getTemplate(), email.getSubjects(), email.getContents(), email.getToPersons(),\n                    email.getCcPersons(), email.getBccPersons());\n        }else {\n            sendEmail(email.getTemplate(), email.getSubjects(), email.getContents(), email.getToPersons(),\n                    email.getCcPersons(), email.getBccPersons(), email.getDocName(), email.getFileNames());\n        }\n    }\n```\n\n客户端调用：\n\n```java\n    @Test\n    public void testSendEmail() throws Exception {\n        EmailSendMain email =\n                new EmailSendMain.Builder(\"邮件模版名\",toPersons).\n                        subjects(subjects).\n                        contents(contents).\n                        ccPersons(ccPersons).\n                        bccPersons(bccPersons).build();\n        SendEmailUtil.sendEmail(email);\n    }\n```\n\n问题圆满解决，支持可选参数的链式结构调用，创建过程也确保了一致性，使用不可变类也没问题。\n\n如果说缺点，其实不难看出EmailSendMain的字段和它的内部类Builder字段完全重复了。为了创建EmailSendMain的对象将必须先创建Builder也会带来轻微的性能问题。创建的调用过程虽然看起来更清晰，但也更加冗长。\n\n但是Builder模式还是创建多参数类的不错选择，尤其是大多数参数是可选。\n\n## 扩展\n\n这篇文章的思路是根据《Effective Java》得来的，文章只提到书中建议的第二条，实际关于上面使用到的内部类，泛型，在书中的建议都让我有了更多的认识。我就不赘述了，连上8天班我要去偷懒了。\n\n写这篇文章的时候看到有个系列专门讲Java方法参数太多的问题\n\n传送门：https://dzone.com/articles/too-many-parameters-java\n\n以及翻译：http://www.importnew.com/6518.html\n\n代码我放在了学习设计模式的项目下：\n\n传送门：https://github.com/zhanghTK/HelloDesignPattern\n","source":"_posts/使用Builder模式改进多参数方法.md","raw":"---\ntitle: 使用Builder模式改进多参数方法\ndate: 2016-10-16 11:58:39\ntags: \n  - 设计模式\n  - Java\ncategory: 设计模式\n---\n\n## 概述\n\n记一次工作当中对多参数方法重构。\n\n1. 使用对象封装对多参数，简化方法调用\n2. 使用Builder（创建者）模式简化多属性对象的创建\n\n## 问题\n\n业务系统中统一的邮件发送服务接口在改造前大概长着个样子：\n\n```java\n\t/**\n     * 不帶附件的邮件发送\n     * 未使用建造者模式的原始方法（不良代码）\n     * @param template                      模板\n     * @param subjects                      主题\n     * @param contents                      内容\n     * @param toPersons                     收件人\n     * @param ccPersons                     抄送人\n     * @param bccPersons                    暗送人\n     */\n    public static void sendEmail(String template, List<String> subjects, List<String> contents, List<String> toPersons,\n                                  List<String> ccPersons, List<String> bccPersons){\n        logger.info(\"send email\");\n    }\n\n\n    /**\n     * 带附件的邮件发送\n     * 未使用建造者模式的原始方法（不良）\n     * @param template                      模板\n     * @param subjects                      主题\n     * @param contents                      内容\n     * @param toPersons                     收件人\n     * @param ccPersons                     抄送人\n     * @param bccPersons                    暗送人\n     * @param docName                       文档名称\n     * @param fileName                      文件名称(单个文件)\n     */\n    public static void sendEmail(String template, List<String> subjects, List<String> contents, List<String> toPersons,\n                                  List<String> ccPersons, List<String> bccPersons, String docName, String fileName){\n        logger.info(\"send email\");\n    }\n\n    /**\n     * 带附件的邮件发送\n     * 未使用建造者模式的原始方法（不良代码）\n     * @param template                      模板\n     * @param subjects                      主题\n     * @param contents                      内容\n     * @param toPersons                     收件人\n     * @param ccPersons                     抄送人\n     * @param bccPersons                    暗送人\n     * @param docName                       文档名称\n     * @param fileNames                     文件名称(多个文件,文件名称列表)\n     */\n    public static void sendEmail(String template, List<String> subjects, List<String> contents, List<String> toPersons,\n                                  List<String> ccPersons, List<String> bccPersons, String docName, List<String> fileNames){\n        logger.info(\"send email\");\n    }\n```\n\n接口有个重要的内容注释中并没有说明：参数中“模板”和“收件人”是必填的，而其他参数是非必填的。\n\n接口的可配置程度还是不错的，但是调用的过程就比较痛苦了。\n\n一大堆String和List接口暴露出来，同时又使用了不同的参数个数来进行重载。\n\n调用的时候光是创建这些参数就够麻烦的了，还要考虑哪些参数是必填的以及参数的正确位置。更糟糕的是参数传错位置你会发现很有可能并没有显式的暴露出问题，邮件还是发送了只是发送到错误的相关人员那里。\n\n其他人看到方法调用也无法清晰知道这个到底是要发什么邮件，给哪些人。\n\n这应该就是坏代码的味道吧。\n\n## 改进\n\n简单的改进思路就是把参数做成一个modle封装起来，以后传递model给方法。就像这样：\n\n```java\n    /**\n     * 邮件发送通用接口\n     * @param email 邮件发送参数对象\n     */\n    public static void sendEmail(EmailSendMain email){\n    \tlogger.info(\"send email:\" + email);\n    }\n```\n\n但是问题还是没有根本解决，对象的构造还是需要多个参数的构造方法，可能还需要重载。\n\n比较容易想到的改进是使用Java Bean模式。简化构造方法字段，构造方法只传入必要的字段，使用setter方法设置其他值。我就是这么肤浅的想到这个地步了。\n\n乍一看问题是解决了，其实不然。\n\n1. 在对象创建过程中Java Bean可能处于不一致状态\n2. 使用Java Bean就将不能创建不可变对象\n\n读了《Effective Java》只是第二章就有了更好的解决思路——Builder模式。\n\n先看改进后的代码：\n\n```java\n/**\n * 复杂类型构建接口\n *\n * 建造者模式中的抽象构建者\n * Created by ZhangHao on 2016/10/15.\n */\npublic interface Builder<T> {\n    T build();\n}\n\n/**\n * 邮件发送参数对象\n * 包含多个字段的复杂类型，使用内部类实现Builder接口创建对象\n *\n * 建造者模式中的产品类\n * Created by ZhangHao on 2016/10/15.\n */\npublic final class EmailSendMain {\n    private final String template;  // 模板名称\n    private final List<String> subjects;  // 主题参数列表\n    private final List<String> contents;  // 内容参数列表\n    private final List<String> toPersons;  // 收件人列表\n    private final List<String> ccPersons;  // 抄送人列表\n    private final List<String> bccPersons;  // 暗送人列表\n    private final String docName;  // 文档名称\n    private final List<String> fileNames;  // 文件名称列表\n\n    private EmailSendMain(Builder builder) {\n        this.template = builder.template;\n        this.subjects = builder.subjects;\n        this.contents = builder.contents;\n        this.toPersons = builder.toPersons;\n        this.ccPersons = builder.ccPersons;\n        this.bccPersons = builder.bccPersons;\n        this.docName = builder.docName;\n        this.fileNames = builder.fileNames;\n    }\n\n    /**\n     * 实现Builder接口的构建类，用于创建EmailSendMain\n     *\n     * 建造者模式中的建造类\n     */\n    public static class Builder implements tk.zhangh.pattern.create.builder.demo1.Builder<EmailSendMain> {\n        private String template;  // 模板名称\n        private List<String> subjects;  // 主题参数列表\n        private List<String> contents;  // 内容参数列表\n        private List<String> toPersons;  // 收件人列表\n        private List<String> ccPersons;  // 抄送人列表\n        private List<String> bccPersons;  // 暗送人列表\n        private String docName;  // 文档名称\n        private List<String> fileNames;  // 文件名称列表\n\n        public Builder(String template, List<String> toPersons) {\n            this.template = template;\n            this.toPersons = toPersons;\n        }\n\n        @Override\n        public EmailSendMain build() {\n            return new EmailSendMain(this);\n        }\n\n        public Builder subjects(List<String> subjects) {\n            this.subjects = subjects;\n            return this;\n        }\n\n        public Builder contents(List<String> contents) {\n            this.contents = contents;\n            return this;\n        }\n\n        public Builder ccPersons(List<String> ccPersons) {\n            this.ccPersons = ccPersons;\n            return this;\n        }\n\n        public Builder bccPersons(List<String> bccPersons) {\n            this.bccPersons = bccPersons;\n            return this;\n        }\n\n        public Builder docName(String docName) {\n            this.docName = docName;\n            return this;\n        }\n\n        public Builder fileNames(List<String> fileNames) {\n            this.fileNames = fileNames;\n            return this;\n        }\n    }\n\n    // getter,toString方法省略\n}\n```\n\n重写做的接口方法封装：\n\n```java\n    /**\n     * 邮件发送通用接口\n     * @param email 邮件发送参数对象\n     */\n    public static void sendEmail(EmailSendMain email){\n        logger.info(\"send email:\" + email);\n        if ((email.getDocName() == null || email.getDocName().equals(\"\")) ||\n                (email.getFileNames() == null || email.getFileNames().size() == 0)) {\n            sendEmail(email.getTemplate(), email.getSubjects(), email.getContents(), email.getToPersons(),\n                    email.getCcPersons(), email.getBccPersons());\n        }else {\n            sendEmail(email.getTemplate(), email.getSubjects(), email.getContents(), email.getToPersons(),\n                    email.getCcPersons(), email.getBccPersons(), email.getDocName(), email.getFileNames());\n        }\n    }\n```\n\n客户端调用：\n\n```java\n    @Test\n    public void testSendEmail() throws Exception {\n        EmailSendMain email =\n                new EmailSendMain.Builder(\"邮件模版名\",toPersons).\n                        subjects(subjects).\n                        contents(contents).\n                        ccPersons(ccPersons).\n                        bccPersons(bccPersons).build();\n        SendEmailUtil.sendEmail(email);\n    }\n```\n\n问题圆满解决，支持可选参数的链式结构调用，创建过程也确保了一致性，使用不可变类也没问题。\n\n如果说缺点，其实不难看出EmailSendMain的字段和它的内部类Builder字段完全重复了。为了创建EmailSendMain的对象将必须先创建Builder也会带来轻微的性能问题。创建的调用过程虽然看起来更清晰，但也更加冗长。\n\n但是Builder模式还是创建多参数类的不错选择，尤其是大多数参数是可选。\n\n## 扩展\n\n这篇文章的思路是根据《Effective Java》得来的，文章只提到书中建议的第二条，实际关于上面使用到的内部类，泛型，在书中的建议都让我有了更多的认识。我就不赘述了，连上8天班我要去偷懒了。\n\n写这篇文章的时候看到有个系列专门讲Java方法参数太多的问题\n\n传送门：https://dzone.com/articles/too-many-parameters-java\n\n以及翻译：http://www.importnew.com/6518.html\n\n代码我放在了学习设计模式的项目下：\n\n传送门：https://github.com/zhanghTK/HelloDesignPattern\n","slug":"使用Builder模式改进多参数方法","published":1,"updated":"2017-01-07T05:33:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixmu6my4001lpo2ev923ynlm","content":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>记一次工作当中对多参数方法重构。</p>\n<ol>\n<li>使用对象封装对多参数，简化方法调用</li>\n<li>使用Builder（创建者）模式简化多属性对象的创建</li>\n</ol>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>业务系统中统一的邮件发送服务接口在改造前大概长着个样子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">    * 不帶附件的邮件发送</div><div class=\"line\">    * 未使用建造者模式的原始方法（不良代码）</div><div class=\"line\">    * <span class=\"doctag\">@param</span> template                      模板</div><div class=\"line\">    * <span class=\"doctag\">@param</span> subjects                      主题</div><div class=\"line\">    * <span class=\"doctag\">@param</span> contents                      内容</div><div class=\"line\">    * <span class=\"doctag\">@param</span> toPersons                     收件人</div><div class=\"line\">    * <span class=\"doctag\">@param</span> ccPersons                     抄送人</div><div class=\"line\">    * <span class=\"doctag\">@param</span> bccPersons                    暗送人</div><div class=\"line\">    */</div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sendEmail</span><span class=\"params\">(String template, List&lt;String&gt; subjects, List&lt;String&gt; contents, List&lt;String&gt; toPersons,</span></span></div><div class=\"line\">                                 List&lt;String&gt; ccPersons, List&lt;String&gt; bccPersons)&#123;</div><div class=\"line\">       logger.info(<span class=\"string\">\"send email\"</span>);</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">   <span class=\"comment\">/**</span></div><div class=\"line\">    * 带附件的邮件发送</div><div class=\"line\">    * 未使用建造者模式的原始方法（不良）</div><div class=\"line\">    * <span class=\"doctag\">@param</span> template                      模板</div><div class=\"line\">    * <span class=\"doctag\">@param</span> subjects                      主题</div><div class=\"line\">    * <span class=\"doctag\">@param</span> contents                      内容</div><div class=\"line\">    * <span class=\"doctag\">@param</span> toPersons                     收件人</div><div class=\"line\">    * <span class=\"doctag\">@param</span> ccPersons                     抄送人</div><div class=\"line\">    * <span class=\"doctag\">@param</span> bccPersons                    暗送人</div><div class=\"line\">    * <span class=\"doctag\">@param</span> docName                       文档名称</div><div class=\"line\">    * <span class=\"doctag\">@param</span> fileName                      文件名称(单个文件)</div><div class=\"line\">    */</div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sendEmail</span><span class=\"params\">(String template, List&lt;String&gt; subjects, List&lt;String&gt; contents, List&lt;String&gt; toPersons,</span></span></div><div class=\"line\">                                 List&lt;String&gt; ccPersons, List&lt;String&gt; bccPersons, String docName, String fileName)&#123;</div><div class=\"line\">       logger.info(<span class=\"string\">\"send email\"</span>);</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"comment\">/**</span></div><div class=\"line\">    * 带附件的邮件发送</div><div class=\"line\">    * 未使用建造者模式的原始方法（不良代码）</div><div class=\"line\">    * <span class=\"doctag\">@param</span> template                      模板</div><div class=\"line\">    * <span class=\"doctag\">@param</span> subjects                      主题</div><div class=\"line\">    * <span class=\"doctag\">@param</span> contents                      内容</div><div class=\"line\">    * <span class=\"doctag\">@param</span> toPersons                     收件人</div><div class=\"line\">    * <span class=\"doctag\">@param</span> ccPersons                     抄送人</div><div class=\"line\">    * <span class=\"doctag\">@param</span> bccPersons                    暗送人</div><div class=\"line\">    * <span class=\"doctag\">@param</span> docName                       文档名称</div><div class=\"line\">    * <span class=\"doctag\">@param</span> fileNames                     文件名称(多个文件,文件名称列表)</div><div class=\"line\">    */</div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sendEmail</span><span class=\"params\">(String template, List&lt;String&gt; subjects, List&lt;String&gt; contents, List&lt;String&gt; toPersons,</span></span></div><div class=\"line\">                                 List&lt;String&gt; ccPersons, List&lt;String&gt; bccPersons, String docName, List&lt;String&gt; fileNames)&#123;</div><div class=\"line\">       logger.info(<span class=\"string\">\"send email\"</span>);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>接口有个重要的内容注释中并没有说明：参数中“模板”和“收件人”是必填的，而其他参数是非必填的。</p>\n<p>接口的可配置程度还是不错的，但是调用的过程就比较痛苦了。</p>\n<p>一大堆String和List接口暴露出来，同时又使用了不同的参数个数来进行重载。</p>\n<p>调用的时候光是创建这些参数就够麻烦的了，还要考虑哪些参数是必填的以及参数的正确位置。更糟糕的是参数传错位置你会发现很有可能并没有显式的暴露出问题，邮件还是发送了只是发送到错误的相关人员那里。</p>\n<p>其他人看到方法调用也无法清晰知道这个到底是要发什么邮件，给哪些人。</p>\n<p>这应该就是坏代码的味道吧。</p>\n<h2 id=\"改进\"><a href=\"#改进\" class=\"headerlink\" title=\"改进\"></a>改进</h2><p>简单的改进思路就是把参数做成一个modle封装起来，以后传递model给方法。就像这样：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 邮件发送通用接口</div><div class=\"line\"> * <span class=\"doctag\">@param</span> email 邮件发送参数对象</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sendEmail</span><span class=\"params\">(EmailSendMain email)</span></span>&#123;</div><div class=\"line\">\tlogger.info(<span class=\"string\">\"send email:\"</span> + email);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>但是问题还是没有根本解决，对象的构造还是需要多个参数的构造方法，可能还需要重载。</p>\n<p>比较容易想到的改进是使用Java Bean模式。简化构造方法字段，构造方法只传入必要的字段，使用setter方法设置其他值。我就是这么肤浅的想到这个地步了。</p>\n<p>乍一看问题是解决了，其实不然。</p>\n<ol>\n<li>在对象创建过程中Java Bean可能处于不一致状态</li>\n<li>使用Java Bean就将不能创建不可变对象</li>\n</ol>\n<p>读了《Effective Java》只是第二章就有了更好的解决思路——Builder模式。</p>\n<p>先看改进后的代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 复杂类型构建接口</div><div class=\"line\"> *</div><div class=\"line\"> * 建造者模式中的抽象构建者</div><div class=\"line\"> * Created by ZhangHao on 2016/10/15.</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Builder</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</div><div class=\"line\">    <span class=\"function\">T <span class=\"title\">build</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 邮件发送参数对象</div><div class=\"line\"> * 包含多个字段的复杂类型，使用内部类实现Builder接口创建对象</div><div class=\"line\"> *</div><div class=\"line\"> * 建造者模式中的产品类</div><div class=\"line\"> * Created by ZhangHao on 2016/10/15.</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EmailSendMain</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String template;  <span class=\"comment\">// 模板名称</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> List&lt;String&gt; subjects;  <span class=\"comment\">// 主题参数列表</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> List&lt;String&gt; contents;  <span class=\"comment\">// 内容参数列表</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> List&lt;String&gt; toPersons;  <span class=\"comment\">// 收件人列表</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> List&lt;String&gt; ccPersons;  <span class=\"comment\">// 抄送人列表</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> List&lt;String&gt; bccPersons;  <span class=\"comment\">// 暗送人列表</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String docName;  <span class=\"comment\">// 文档名称</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> List&lt;String&gt; fileNames;  <span class=\"comment\">// 文件名称列表</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">EmailSendMain</span><span class=\"params\">(Builder builder)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.template = builder.template;</div><div class=\"line\">        <span class=\"keyword\">this</span>.subjects = builder.subjects;</div><div class=\"line\">        <span class=\"keyword\">this</span>.contents = builder.contents;</div><div class=\"line\">        <span class=\"keyword\">this</span>.toPersons = builder.toPersons;</div><div class=\"line\">        <span class=\"keyword\">this</span>.ccPersons = builder.ccPersons;</div><div class=\"line\">        <span class=\"keyword\">this</span>.bccPersons = builder.bccPersons;</div><div class=\"line\">        <span class=\"keyword\">this</span>.docName = builder.docName;</div><div class=\"line\">        <span class=\"keyword\">this</span>.fileNames = builder.fileNames;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 实现Builder接口的构建类，用于创建EmailSendMain</div><div class=\"line\">     *</div><div class=\"line\">     * 建造者模式中的建造类</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Builder</span> <span class=\"keyword\">implements</span> <span class=\"title\">tk</span>.<span class=\"title\">zhangh</span>.<span class=\"title\">pattern</span>.<span class=\"title\">create</span>.<span class=\"title\">builder</span>.<span class=\"title\">demo1</span>.<span class=\"title\">Builder</span>&lt;<span class=\"title\">EmailSendMain</span>&gt; </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> String template;  <span class=\"comment\">// 模板名称</span></div><div class=\"line\">        <span class=\"keyword\">private</span> List&lt;String&gt; subjects;  <span class=\"comment\">// 主题参数列表</span></div><div class=\"line\">        <span class=\"keyword\">private</span> List&lt;String&gt; contents;  <span class=\"comment\">// 内容参数列表</span></div><div class=\"line\">        <span class=\"keyword\">private</span> List&lt;String&gt; toPersons;  <span class=\"comment\">// 收件人列表</span></div><div class=\"line\">        <span class=\"keyword\">private</span> List&lt;String&gt; ccPersons;  <span class=\"comment\">// 抄送人列表</span></div><div class=\"line\">        <span class=\"keyword\">private</span> List&lt;String&gt; bccPersons;  <span class=\"comment\">// 暗送人列表</span></div><div class=\"line\">        <span class=\"keyword\">private</span> String docName;  <span class=\"comment\">// 文档名称</span></div><div class=\"line\">        <span class=\"keyword\">private</span> List&lt;String&gt; fileNames;  <span class=\"comment\">// 文件名称列表</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Builder</span><span class=\"params\">(String template, List&lt;String&gt; toPersons)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.template = template;</div><div class=\"line\">            <span class=\"keyword\">this</span>.toPersons = toPersons;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> EmailSendMain <span class=\"title\">build</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> EmailSendMain(<span class=\"keyword\">this</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Builder <span class=\"title\">subjects</span><span class=\"params\">(List&lt;String&gt; subjects)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.subjects = subjects;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Builder <span class=\"title\">contents</span><span class=\"params\">(List&lt;String&gt; contents)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.contents = contents;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Builder <span class=\"title\">ccPersons</span><span class=\"params\">(List&lt;String&gt; ccPersons)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.ccPersons = ccPersons;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Builder <span class=\"title\">bccPersons</span><span class=\"params\">(List&lt;String&gt; bccPersons)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.bccPersons = bccPersons;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Builder <span class=\"title\">docName</span><span class=\"params\">(String docName)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.docName = docName;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Builder <span class=\"title\">fileNames</span><span class=\"params\">(List&lt;String&gt; fileNames)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.fileNames = fileNames;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// getter,toString方法省略</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>重写做的接口方法封装：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 邮件发送通用接口</div><div class=\"line\"> * <span class=\"doctag\">@param</span> email 邮件发送参数对象</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sendEmail</span><span class=\"params\">(EmailSendMain email)</span></span>&#123;</div><div class=\"line\">    logger.info(<span class=\"string\">\"send email:\"</span> + email);</div><div class=\"line\">    <span class=\"keyword\">if</span> ((email.getDocName() == <span class=\"keyword\">null</span> || email.getDocName().equals(<span class=\"string\">\"\"</span>)) ||</div><div class=\"line\">            (email.getFileNames() == <span class=\"keyword\">null</span> || email.getFileNames().size() == <span class=\"number\">0</span>)) &#123;</div><div class=\"line\">        sendEmail(email.getTemplate(), email.getSubjects(), email.getContents(), email.getToPersons(),</div><div class=\"line\">                email.getCcPersons(), email.getBccPersons());</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        sendEmail(email.getTemplate(), email.getSubjects(), email.getContents(), email.getToPersons(),</div><div class=\"line\">                email.getCcPersons(), email.getBccPersons(), email.getDocName(), email.getFileNames());</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>客户端调用：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Test</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testSendEmail</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">    EmailSendMain email =</div><div class=\"line\">            <span class=\"keyword\">new</span> EmailSendMain.Builder(<span class=\"string\">\"邮件模版名\"</span>,toPersons).</div><div class=\"line\">                    subjects(subjects).</div><div class=\"line\">                    contents(contents).</div><div class=\"line\">                    ccPersons(ccPersons).</div><div class=\"line\">                    bccPersons(bccPersons).build();</div><div class=\"line\">    SendEmailUtil.sendEmail(email);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>问题圆满解决，支持可选参数的链式结构调用，创建过程也确保了一致性，使用不可变类也没问题。</p>\n<p>如果说缺点，其实不难看出EmailSendMain的字段和它的内部类Builder字段完全重复了。为了创建EmailSendMain的对象将必须先创建Builder也会带来轻微的性能问题。创建的调用过程虽然看起来更清晰，但也更加冗长。</p>\n<p>但是Builder模式还是创建多参数类的不错选择，尤其是大多数参数是可选。</p>\n<h2 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h2><p>这篇文章的思路是根据《Effective Java》得来的，文章只提到书中建议的第二条，实际关于上面使用到的内部类，泛型，在书中的建议都让我有了更多的认识。我就不赘述了，连上8天班我要去偷懒了。</p>\n<p>写这篇文章的时候看到有个系列专门讲Java方法参数太多的问题</p>\n<p>传送门：<a href=\"https://dzone.com/articles/too-many-parameters-java\" target=\"_blank\" rel=\"external\">https://dzone.com/articles/too-many-parameters-java</a></p>\n<p>以及翻译：<a href=\"http://www.importnew.com/6518.html\" target=\"_blank\" rel=\"external\">http://www.importnew.com/6518.html</a></p>\n<p>代码我放在了学习设计模式的项目下：</p>\n<p>传送门：<a href=\"https://github.com/zhanghTK/HelloDesignPattern\" target=\"_blank\" rel=\"external\">https://github.com/zhanghTK/HelloDesignPattern</a></p>\n","excerpt":"","more":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>记一次工作当中对多参数方法重构。</p>\n<ol>\n<li>使用对象封装对多参数，简化方法调用</li>\n<li>使用Builder（创建者）模式简化多属性对象的创建</li>\n</ol>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>业务系统中统一的邮件发送服务接口在改造前大概长着个样子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\">    * 不帶附件的邮件发送</div><div class=\"line\">    * 未使用建造者模式的原始方法（不良代码）</div><div class=\"line\">    * <span class=\"doctag\">@param</span> template                      模板</div><div class=\"line\">    * <span class=\"doctag\">@param</span> subjects                      主题</div><div class=\"line\">    * <span class=\"doctag\">@param</span> contents                      内容</div><div class=\"line\">    * <span class=\"doctag\">@param</span> toPersons                     收件人</div><div class=\"line\">    * <span class=\"doctag\">@param</span> ccPersons                     抄送人</div><div class=\"line\">    * <span class=\"doctag\">@param</span> bccPersons                    暗送人</div><div class=\"line\">    */</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sendEmail</span><span class=\"params\">(String template, List&lt;String&gt; subjects, List&lt;String&gt; contents, List&lt;String&gt; toPersons,</div><div class=\"line\">                                 List&lt;String&gt; ccPersons, List&lt;String&gt; bccPersons)</span></span>&#123;</div><div class=\"line\">       logger.info(<span class=\"string\">\"send email\"</span>);</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">   <span class=\"comment\">/**</div><div class=\"line\">    * 带附件的邮件发送</div><div class=\"line\">    * 未使用建造者模式的原始方法（不良）</div><div class=\"line\">    * <span class=\"doctag\">@param</span> template                      模板</div><div class=\"line\">    * <span class=\"doctag\">@param</span> subjects                      主题</div><div class=\"line\">    * <span class=\"doctag\">@param</span> contents                      内容</div><div class=\"line\">    * <span class=\"doctag\">@param</span> toPersons                     收件人</div><div class=\"line\">    * <span class=\"doctag\">@param</span> ccPersons                     抄送人</div><div class=\"line\">    * <span class=\"doctag\">@param</span> bccPersons                    暗送人</div><div class=\"line\">    * <span class=\"doctag\">@param</span> docName                       文档名称</div><div class=\"line\">    * <span class=\"doctag\">@param</span> fileName                      文件名称(单个文件)</div><div class=\"line\">    */</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sendEmail</span><span class=\"params\">(String template, List&lt;String&gt; subjects, List&lt;String&gt; contents, List&lt;String&gt; toPersons,</div><div class=\"line\">                                 List&lt;String&gt; ccPersons, List&lt;String&gt; bccPersons, String docName, String fileName)</span></span>&#123;</div><div class=\"line\">       logger.info(<span class=\"string\">\"send email\"</span>);</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"comment\">/**</div><div class=\"line\">    * 带附件的邮件发送</div><div class=\"line\">    * 未使用建造者模式的原始方法（不良代码）</div><div class=\"line\">    * <span class=\"doctag\">@param</span> template                      模板</div><div class=\"line\">    * <span class=\"doctag\">@param</span> subjects                      主题</div><div class=\"line\">    * <span class=\"doctag\">@param</span> contents                      内容</div><div class=\"line\">    * <span class=\"doctag\">@param</span> toPersons                     收件人</div><div class=\"line\">    * <span class=\"doctag\">@param</span> ccPersons                     抄送人</div><div class=\"line\">    * <span class=\"doctag\">@param</span> bccPersons                    暗送人</div><div class=\"line\">    * <span class=\"doctag\">@param</span> docName                       文档名称</div><div class=\"line\">    * <span class=\"doctag\">@param</span> fileNames                     文件名称(多个文件,文件名称列表)</div><div class=\"line\">    */</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sendEmail</span><span class=\"params\">(String template, List&lt;String&gt; subjects, List&lt;String&gt; contents, List&lt;String&gt; toPersons,</div><div class=\"line\">                                 List&lt;String&gt; ccPersons, List&lt;String&gt; bccPersons, String docName, List&lt;String&gt; fileNames)</span></span>&#123;</div><div class=\"line\">       logger.info(<span class=\"string\">\"send email\"</span>);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>接口有个重要的内容注释中并没有说明：参数中“模板”和“收件人”是必填的，而其他参数是非必填的。</p>\n<p>接口的可配置程度还是不错的，但是调用的过程就比较痛苦了。</p>\n<p>一大堆String和List接口暴露出来，同时又使用了不同的参数个数来进行重载。</p>\n<p>调用的时候光是创建这些参数就够麻烦的了，还要考虑哪些参数是必填的以及参数的正确位置。更糟糕的是参数传错位置你会发现很有可能并没有显式的暴露出问题，邮件还是发送了只是发送到错误的相关人员那里。</p>\n<p>其他人看到方法调用也无法清晰知道这个到底是要发什么邮件，给哪些人。</p>\n<p>这应该就是坏代码的味道吧。</p>\n<h2 id=\"改进\"><a href=\"#改进\" class=\"headerlink\" title=\"改进\"></a>改进</h2><p>简单的改进思路就是把参数做成一个modle封装起来，以后传递model给方法。就像这样：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 邮件发送通用接口</div><div class=\"line\"> * <span class=\"doctag\">@param</span> email 邮件发送参数对象</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sendEmail</span><span class=\"params\">(EmailSendMain email)</span></span>&#123;</div><div class=\"line\">\tlogger.info(<span class=\"string\">\"send email:\"</span> + email);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>但是问题还是没有根本解决，对象的构造还是需要多个参数的构造方法，可能还需要重载。</p>\n<p>比较容易想到的改进是使用Java Bean模式。简化构造方法字段，构造方法只传入必要的字段，使用setter方法设置其他值。我就是这么肤浅的想到这个地步了。</p>\n<p>乍一看问题是解决了，其实不然。</p>\n<ol>\n<li>在对象创建过程中Java Bean可能处于不一致状态</li>\n<li>使用Java Bean就将不能创建不可变对象</li>\n</ol>\n<p>读了《Effective Java》只是第二章就有了更好的解决思路——Builder模式。</p>\n<p>先看改进后的代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 复杂类型构建接口</div><div class=\"line\"> *</div><div class=\"line\"> * 建造者模式中的抽象构建者</div><div class=\"line\"> * Created by ZhangHao on 2016/10/15.</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Builder</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</div><div class=\"line\">    <span class=\"function\">T <span class=\"title\">build</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 邮件发送参数对象</div><div class=\"line\"> * 包含多个字段的复杂类型，使用内部类实现Builder接口创建对象</div><div class=\"line\"> *</div><div class=\"line\"> * 建造者模式中的产品类</div><div class=\"line\"> * Created by ZhangHao on 2016/10/15.</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EmailSendMain</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String template;  <span class=\"comment\">// 模板名称</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> List&lt;String&gt; subjects;  <span class=\"comment\">// 主题参数列表</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> List&lt;String&gt; contents;  <span class=\"comment\">// 内容参数列表</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> List&lt;String&gt; toPersons;  <span class=\"comment\">// 收件人列表</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> List&lt;String&gt; ccPersons;  <span class=\"comment\">// 抄送人列表</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> List&lt;String&gt; bccPersons;  <span class=\"comment\">// 暗送人列表</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String docName;  <span class=\"comment\">// 文档名称</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> List&lt;String&gt; fileNames;  <span class=\"comment\">// 文件名称列表</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">EmailSendMain</span><span class=\"params\">(Builder builder)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.template = builder.template;</div><div class=\"line\">        <span class=\"keyword\">this</span>.subjects = builder.subjects;</div><div class=\"line\">        <span class=\"keyword\">this</span>.contents = builder.contents;</div><div class=\"line\">        <span class=\"keyword\">this</span>.toPersons = builder.toPersons;</div><div class=\"line\">        <span class=\"keyword\">this</span>.ccPersons = builder.ccPersons;</div><div class=\"line\">        <span class=\"keyword\">this</span>.bccPersons = builder.bccPersons;</div><div class=\"line\">        <span class=\"keyword\">this</span>.docName = builder.docName;</div><div class=\"line\">        <span class=\"keyword\">this</span>.fileNames = builder.fileNames;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 实现Builder接口的构建类，用于创建EmailSendMain</div><div class=\"line\">     *</div><div class=\"line\">     * 建造者模式中的建造类</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Builder</span> <span class=\"keyword\">implements</span> <span class=\"title\">tk</span>.<span class=\"title\">zhangh</span>.<span class=\"title\">pattern</span>.<span class=\"title\">create</span>.<span class=\"title\">builder</span>.<span class=\"title\">demo1</span>.<span class=\"title\">Builder</span>&lt;<span class=\"title\">EmailSendMain</span>&gt; </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> String template;  <span class=\"comment\">// 模板名称</span></div><div class=\"line\">        <span class=\"keyword\">private</span> List&lt;String&gt; subjects;  <span class=\"comment\">// 主题参数列表</span></div><div class=\"line\">        <span class=\"keyword\">private</span> List&lt;String&gt; contents;  <span class=\"comment\">// 内容参数列表</span></div><div class=\"line\">        <span class=\"keyword\">private</span> List&lt;String&gt; toPersons;  <span class=\"comment\">// 收件人列表</span></div><div class=\"line\">        <span class=\"keyword\">private</span> List&lt;String&gt; ccPersons;  <span class=\"comment\">// 抄送人列表</span></div><div class=\"line\">        <span class=\"keyword\">private</span> List&lt;String&gt; bccPersons;  <span class=\"comment\">// 暗送人列表</span></div><div class=\"line\">        <span class=\"keyword\">private</span> String docName;  <span class=\"comment\">// 文档名称</span></div><div class=\"line\">        <span class=\"keyword\">private</span> List&lt;String&gt; fileNames;  <span class=\"comment\">// 文件名称列表</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Builder</span><span class=\"params\">(String template, List&lt;String&gt; toPersons)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.template = template;</div><div class=\"line\">            <span class=\"keyword\">this</span>.toPersons = toPersons;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> EmailSendMain <span class=\"title\">build</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> EmailSendMain(<span class=\"keyword\">this</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Builder <span class=\"title\">subjects</span><span class=\"params\">(List&lt;String&gt; subjects)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.subjects = subjects;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Builder <span class=\"title\">contents</span><span class=\"params\">(List&lt;String&gt; contents)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.contents = contents;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Builder <span class=\"title\">ccPersons</span><span class=\"params\">(List&lt;String&gt; ccPersons)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.ccPersons = ccPersons;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Builder <span class=\"title\">bccPersons</span><span class=\"params\">(List&lt;String&gt; bccPersons)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.bccPersons = bccPersons;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Builder <span class=\"title\">docName</span><span class=\"params\">(String docName)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.docName = docName;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Builder <span class=\"title\">fileNames</span><span class=\"params\">(List&lt;String&gt; fileNames)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.fileNames = fileNames;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// getter,toString方法省略</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>重写做的接口方法封装：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 邮件发送通用接口</div><div class=\"line\"> * <span class=\"doctag\">@param</span> email 邮件发送参数对象</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sendEmail</span><span class=\"params\">(EmailSendMain email)</span></span>&#123;</div><div class=\"line\">    logger.info(<span class=\"string\">\"send email:\"</span> + email);</div><div class=\"line\">    <span class=\"keyword\">if</span> ((email.getDocName() == <span class=\"keyword\">null</span> || email.getDocName().equals(<span class=\"string\">\"\"</span>)) ||</div><div class=\"line\">            (email.getFileNames() == <span class=\"keyword\">null</span> || email.getFileNames().size() == <span class=\"number\">0</span>)) &#123;</div><div class=\"line\">        sendEmail(email.getTemplate(), email.getSubjects(), email.getContents(), email.getToPersons(),</div><div class=\"line\">                email.getCcPersons(), email.getBccPersons());</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        sendEmail(email.getTemplate(), email.getSubjects(), email.getContents(), email.getToPersons(),</div><div class=\"line\">                email.getCcPersons(), email.getBccPersons(), email.getDocName(), email.getFileNames());</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>客户端调用：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Test</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testSendEmail</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">    EmailSendMain email =</div><div class=\"line\">            <span class=\"keyword\">new</span> EmailSendMain.Builder(<span class=\"string\">\"邮件模版名\"</span>,toPersons).</div><div class=\"line\">                    subjects(subjects).</div><div class=\"line\">                    contents(contents).</div><div class=\"line\">                    ccPersons(ccPersons).</div><div class=\"line\">                    bccPersons(bccPersons).build();</div><div class=\"line\">    SendEmailUtil.sendEmail(email);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>问题圆满解决，支持可选参数的链式结构调用，创建过程也确保了一致性，使用不可变类也没问题。</p>\n<p>如果说缺点，其实不难看出EmailSendMain的字段和它的内部类Builder字段完全重复了。为了创建EmailSendMain的对象将必须先创建Builder也会带来轻微的性能问题。创建的调用过程虽然看起来更清晰，但也更加冗长。</p>\n<p>但是Builder模式还是创建多参数类的不错选择，尤其是大多数参数是可选。</p>\n<h2 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h2><p>这篇文章的思路是根据《Effective Java》得来的，文章只提到书中建议的第二条，实际关于上面使用到的内部类，泛型，在书中的建议都让我有了更多的认识。我就不赘述了，连上8天班我要去偷懒了。</p>\n<p>写这篇文章的时候看到有个系列专门讲Java方法参数太多的问题</p>\n<p>传送门：<a href=\"https://dzone.com/articles/too-many-parameters-java\">https://dzone.com/articles/too-many-parameters-java</a></p>\n<p>以及翻译：<a href=\"http://www.importnew.com/6518.html\">http://www.importnew.com/6518.html</a></p>\n<p>代码我放在了学习设计模式的项目下：</p>\n<p>传送门：<a href=\"https://github.com/zhanghTK/HelloDesignPattern\">https://github.com/zhanghTK/HelloDesignPattern</a></p>\n"},{"title":"迪米特法则——合理的封装","date":"2016-10-22T10:55:36.000Z","_content":"\n## 背景\n\n以服务员，客户，钱包为载体，模拟一个付款过程，阐述不恰当的封装行为。\n\n说明合理封装的一般过程以及不合理封装所表现的一般形式，介绍迪米特法则相关的基本内容，遵循迪米特法则对问题代码进行重构。\n\n## 看似没有问题的问题\n\n先看一个简单代码，分别描述钱包、客户、服务员：\n\n```java\npublic class Wallet {\n    private double value;\n     public double getTotalMoney() {\n        return value;\n    }\n    public void setTotalMoney(double newValue) {\n        value = newValue;\n    }\n    public void addMoney(double deposit) {\n        value += deposit;\n    }\n    public void subtractMoney(double debit) {\n        value -= debit;\n    }\n\t// 省略其它字段，方法\n}\n\npublic class Customer {\n    private Wallet myWallet;\n\t// 省略其它字段，方法\n}\n\npublic class Paperboy {\n  private Customer myCustomer;\n  public void pay(double payment) {\n    Wallet theWallet = myCustomer.getWallet();\n    if (theWallet.getTotalMoney() > payment) {\n        theWallet.subtractMoney(payment);\n    } else {\n        //money not enough\n    }\n  }\n}\n```\n一眼看过去，没毛病。几个基本的简单类在Paperboy的pay方法中实现了简单的业务逻辑，但翻译成“人类语言”就有点问题了：\n\n业务的第一步造作：通过客户获取其钱包。\n\n等等这样真的好吗?现实生活中仿佛讲不通啊，程序设计中其实违反了迪米特法则。\n\n听到迪米特法则那一瞬间，我想到的是各种设计模式概念，尴尬的是就是想不起迪米特到底是个啥!\n\n## 迪米特法则\n\n迪米特法则（最小知识法则，强调专注性）：\n\n任何一个对象或者方法，它应该只能调用下列对象：\n\n- 该对象本身和对象的属性\n- 作为参数传进方法的对象\n- 在方法内创建的对象\n\n这下好像清晰多了，其实再通俗一点上面的代码就是违反了**封装**的原则。\n\n**合理的封装分为两步**：\n\n1. **分辨职责**\n   1. 依据：数据与行为应该封装在一起（信息专家模式）\n   2. 过程：职责操作哪些数据，数据在哪个（些）类，进而确定职责在哪个类\n2. 判别哪些是实现细节，哪些是可以**公开的接口**，以保证对**细节的合理隐藏**\n\n**不良封装造成的结果**：Feature Envy（依恋情结）\n\n**不良封装可能的代码样式**：\n\n```java\nobj1.obj1_fun().obj2_fun();\n```\n类似链式的方法调用，但方法返回的是不同对象，这时候的代码很有可能是不良封装，违反迪米特法则了。\n\n## 问题的解决\n\n上面代码良好的封装示例：\n\n```java\npublic class Customer {\n    private Wallet myWallet;\n\n    public void pay(float payment) {\n        Wallet theWallet = myWallet;\n        if (theWallet.getTotalMoney() > payment) {\n            theWallet.subtractMoney(payment);\n        } else {\n            //money not enough\n        }\n    }\n}\n\npublic class Paperboy {\n    private Customer myCustomer;\n\n    public void pay(float payment) {\n        myCustomer.pay(payment);\n    }\n\n}\n```\n","source":"_posts/迪米特法则——合理的封装.md","raw":"---\ntitle: 迪米特法则——合理的封装\ndate: 2016-10-22 18:55:36\ntags: \n  - Java\n  - 设计模式\ncategories: 设计模式\n---\n\n## 背景\n\n以服务员，客户，钱包为载体，模拟一个付款过程，阐述不恰当的封装行为。\n\n说明合理封装的一般过程以及不合理封装所表现的一般形式，介绍迪米特法则相关的基本内容，遵循迪米特法则对问题代码进行重构。\n\n## 看似没有问题的问题\n\n先看一个简单代码，分别描述钱包、客户、服务员：\n\n```java\npublic class Wallet {\n    private double value;\n     public double getTotalMoney() {\n        return value;\n    }\n    public void setTotalMoney(double newValue) {\n        value = newValue;\n    }\n    public void addMoney(double deposit) {\n        value += deposit;\n    }\n    public void subtractMoney(double debit) {\n        value -= debit;\n    }\n\t// 省略其它字段，方法\n}\n\npublic class Customer {\n    private Wallet myWallet;\n\t// 省略其它字段，方法\n}\n\npublic class Paperboy {\n  private Customer myCustomer;\n  public void pay(double payment) {\n    Wallet theWallet = myCustomer.getWallet();\n    if (theWallet.getTotalMoney() > payment) {\n        theWallet.subtractMoney(payment);\n    } else {\n        //money not enough\n    }\n  }\n}\n```\n一眼看过去，没毛病。几个基本的简单类在Paperboy的pay方法中实现了简单的业务逻辑，但翻译成“人类语言”就有点问题了：\n\n业务的第一步造作：通过客户获取其钱包。\n\n等等这样真的好吗?现实生活中仿佛讲不通啊，程序设计中其实违反了迪米特法则。\n\n听到迪米特法则那一瞬间，我想到的是各种设计模式概念，尴尬的是就是想不起迪米特到底是个啥!\n\n## 迪米特法则\n\n迪米特法则（最小知识法则，强调专注性）：\n\n任何一个对象或者方法，它应该只能调用下列对象：\n\n- 该对象本身和对象的属性\n- 作为参数传进方法的对象\n- 在方法内创建的对象\n\n这下好像清晰多了，其实再通俗一点上面的代码就是违反了**封装**的原则。\n\n**合理的封装分为两步**：\n\n1. **分辨职责**\n   1. 依据：数据与行为应该封装在一起（信息专家模式）\n   2. 过程：职责操作哪些数据，数据在哪个（些）类，进而确定职责在哪个类\n2. 判别哪些是实现细节，哪些是可以**公开的接口**，以保证对**细节的合理隐藏**\n\n**不良封装造成的结果**：Feature Envy（依恋情结）\n\n**不良封装可能的代码样式**：\n\n```java\nobj1.obj1_fun().obj2_fun();\n```\n类似链式的方法调用，但方法返回的是不同对象，这时候的代码很有可能是不良封装，违反迪米特法则了。\n\n## 问题的解决\n\n上面代码良好的封装示例：\n\n```java\npublic class Customer {\n    private Wallet myWallet;\n\n    public void pay(float payment) {\n        Wallet theWallet = myWallet;\n        if (theWallet.getTotalMoney() > payment) {\n            theWallet.subtractMoney(payment);\n        } else {\n            //money not enough\n        }\n    }\n}\n\npublic class Paperboy {\n    private Customer myCustomer;\n\n    public void pay(float payment) {\n        myCustomer.pay(payment);\n    }\n\n}\n```\n","slug":"迪米特法则——合理的封装","published":1,"updated":"2017-01-07T05:33:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixmu6my9001opo2el3jn1kxg","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>以服务员，客户，钱包为载体，模拟一个付款过程，阐述不恰当的封装行为。</p>\n<p>说明合理封装的一般过程以及不合理封装所表现的一般形式，介绍迪米特法则相关的基本内容，遵循迪米特法则对问题代码进行重构。</p>\n<h2 id=\"看似没有问题的问题\"><a href=\"#看似没有问题的问题\" class=\"headerlink\" title=\"看似没有问题的问题\"></a>看似没有问题的问题</h2><p>先看一个简单代码，分别描述钱包、客户、服务员：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Wallet</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">double</span> value;</div><div class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">getTotalMoney</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> value;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setTotalMoney</span><span class=\"params\">(<span class=\"keyword\">double</span> newValue)</span> </span>&#123;</div><div class=\"line\">        value = newValue;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addMoney</span><span class=\"params\">(<span class=\"keyword\">double</span> deposit)</span> </span>&#123;</div><div class=\"line\">        value += deposit;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">subtractMoney</span><span class=\"params\">(<span class=\"keyword\">double</span> debit)</span> </span>&#123;</div><div class=\"line\">        value -= debit;</div><div class=\"line\">    &#125;</div><div class=\"line\">\t<span class=\"comment\">// 省略其它字段，方法</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Customer</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> Wallet myWallet;</div><div class=\"line\">\t<span class=\"comment\">// 省略其它字段，方法</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Paperboy</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> Customer myCustomer;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">pay</span><span class=\"params\">(<span class=\"keyword\">double</span> payment)</span> </span>&#123;</div><div class=\"line\">    Wallet theWallet = myCustomer.getWallet();</div><div class=\"line\">    <span class=\"keyword\">if</span> (theWallet.getTotalMoney() &gt; payment) &#123;</div><div class=\"line\">        theWallet.subtractMoney(payment);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"comment\">//money not enough</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>一眼看过去，没毛病。几个基本的简单类在Paperboy的pay方法中实现了简单的业务逻辑，但翻译成“人类语言”就有点问题了：</p>\n<p>业务的第一步造作：通过客户获取其钱包。</p>\n<p>等等这样真的好吗?现实生活中仿佛讲不通啊，程序设计中其实违反了迪米特法则。</p>\n<p>听到迪米特法则那一瞬间，我想到的是各种设计模式概念，尴尬的是就是想不起迪米特到底是个啥!</p>\n<h2 id=\"迪米特法则\"><a href=\"#迪米特法则\" class=\"headerlink\" title=\"迪米特法则\"></a>迪米特法则</h2><p>迪米特法则（最小知识法则，强调专注性）：</p>\n<p>任何一个对象或者方法，它应该只能调用下列对象：</p>\n<ul>\n<li>该对象本身和对象的属性</li>\n<li>作为参数传进方法的对象</li>\n<li>在方法内创建的对象</li>\n</ul>\n<p>这下好像清晰多了，其实再通俗一点上面的代码就是违反了<strong>封装</strong>的原则。</p>\n<p><strong>合理的封装分为两步</strong>：</p>\n<ol>\n<li><strong>分辨职责</strong><ol>\n<li>依据：数据与行为应该封装在一起（信息专家模式）</li>\n<li>过程：职责操作哪些数据，数据在哪个（些）类，进而确定职责在哪个类</li>\n</ol>\n</li>\n<li>判别哪些是实现细节，哪些是可以<strong>公开的接口</strong>，以保证对<strong>细节的合理隐藏</strong></li>\n</ol>\n<p><strong>不良封装造成的结果</strong>：Feature Envy（依恋情结）</p>\n<p><strong>不良封装可能的代码样式</strong>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">obj1.obj1_fun().obj2_fun();</div></pre></td></tr></table></figure>\n<p>类似链式的方法调用，但方法返回的是不同对象，这时候的代码很有可能是不良封装，违反迪米特法则了。</p>\n<h2 id=\"问题的解决\"><a href=\"#问题的解决\" class=\"headerlink\" title=\"问题的解决\"></a>问题的解决</h2><p>上面代码良好的封装示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Customer</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> Wallet myWallet;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">pay</span><span class=\"params\">(<span class=\"keyword\">float</span> payment)</span> </span>&#123;</div><div class=\"line\">        Wallet theWallet = myWallet;</div><div class=\"line\">        <span class=\"keyword\">if</span> (theWallet.getTotalMoney() &gt; payment) &#123;</div><div class=\"line\">            theWallet.subtractMoney(payment);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"comment\">//money not enough</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Paperboy</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> Customer myCustomer;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">pay</span><span class=\"params\">(<span class=\"keyword\">float</span> payment)</span> </span>&#123;</div><div class=\"line\">        myCustomer.pay(payment);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>以服务员，客户，钱包为载体，模拟一个付款过程，阐述不恰当的封装行为。</p>\n<p>说明合理封装的一般过程以及不合理封装所表现的一般形式，介绍迪米特法则相关的基本内容，遵循迪米特法则对问题代码进行重构。</p>\n<h2 id=\"看似没有问题的问题\"><a href=\"#看似没有问题的问题\" class=\"headerlink\" title=\"看似没有问题的问题\"></a>看似没有问题的问题</h2><p>先看一个简单代码，分别描述钱包、客户、服务员：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Wallet</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">double</span> value;</div><div class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">getTotalMoney</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> value;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setTotalMoney</span><span class=\"params\">(<span class=\"keyword\">double</span> newValue)</span> </span>&#123;</div><div class=\"line\">        value = newValue;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addMoney</span><span class=\"params\">(<span class=\"keyword\">double</span> deposit)</span> </span>&#123;</div><div class=\"line\">        value += deposit;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">subtractMoney</span><span class=\"params\">(<span class=\"keyword\">double</span> debit)</span> </span>&#123;</div><div class=\"line\">        value -= debit;</div><div class=\"line\">    &#125;</div><div class=\"line\">\t<span class=\"comment\">// 省略其它字段，方法</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Customer</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> Wallet myWallet;</div><div class=\"line\">\t<span class=\"comment\">// 省略其它字段，方法</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Paperboy</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> Customer myCustomer;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">pay</span><span class=\"params\">(<span class=\"keyword\">double</span> payment)</span> </span>&#123;</div><div class=\"line\">    Wallet theWallet = myCustomer.getWallet();</div><div class=\"line\">    <span class=\"keyword\">if</span> (theWallet.getTotalMoney() &gt; payment) &#123;</div><div class=\"line\">        theWallet.subtractMoney(payment);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"comment\">//money not enough</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>一眼看过去，没毛病。几个基本的简单类在Paperboy的pay方法中实现了简单的业务逻辑，但翻译成“人类语言”就有点问题了：</p>\n<p>业务的第一步造作：通过客户获取其钱包。</p>\n<p>等等这样真的好吗?现实生活中仿佛讲不通啊，程序设计中其实违反了迪米特法则。</p>\n<p>听到迪米特法则那一瞬间，我想到的是各种设计模式概念，尴尬的是就是想不起迪米特到底是个啥!</p>\n<h2 id=\"迪米特法则\"><a href=\"#迪米特法则\" class=\"headerlink\" title=\"迪米特法则\"></a>迪米特法则</h2><p>迪米特法则（最小知识法则，强调专注性）：</p>\n<p>任何一个对象或者方法，它应该只能调用下列对象：</p>\n<ul>\n<li>该对象本身和对象的属性</li>\n<li>作为参数传进方法的对象</li>\n<li>在方法内创建的对象</li>\n</ul>\n<p>这下好像清晰多了，其实再通俗一点上面的代码就是违反了<strong>封装</strong>的原则。</p>\n<p><strong>合理的封装分为两步</strong>：</p>\n<ol>\n<li><strong>分辨职责</strong><ol>\n<li>依据：数据与行为应该封装在一起（信息专家模式）</li>\n<li>过程：职责操作哪些数据，数据在哪个（些）类，进而确定职责在哪个类</li>\n</ol>\n</li>\n<li>判别哪些是实现细节，哪些是可以<strong>公开的接口</strong>，以保证对<strong>细节的合理隐藏</strong></li>\n</ol>\n<p><strong>不良封装造成的结果</strong>：Feature Envy（依恋情结）</p>\n<p><strong>不良封装可能的代码样式</strong>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">obj1.obj1_fun().obj2_fun();</div></pre></td></tr></table></figure>\n<p>类似链式的方法调用，但方法返回的是不同对象，这时候的代码很有可能是不良封装，违反迪米特法则了。</p>\n<h2 id=\"问题的解决\"><a href=\"#问题的解决\" class=\"headerlink\" title=\"问题的解决\"></a>问题的解决</h2><p>上面代码良好的封装示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Customer</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> Wallet myWallet;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">pay</span><span class=\"params\">(<span class=\"keyword\">float</span> payment)</span> </span>&#123;</div><div class=\"line\">        Wallet theWallet = myWallet;</div><div class=\"line\">        <span class=\"keyword\">if</span> (theWallet.getTotalMoney() &gt; payment) &#123;</div><div class=\"line\">            theWallet.subtractMoney(payment);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"comment\">//money not enough</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Paperboy</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> Customer myCustomer;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">pay</span><span class=\"params\">(<span class=\"keyword\">float</span> payment)</span> </span>&#123;</div><div class=\"line\">        myCustomer.pay(payment);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cixmu6mrc0001po2eytgr3uf9","category_id":"cixmu6mrp0005po2ejd1ktmp9","_id":"cixmu6ms0000fpo2ev5e9m0s6"},{"post_id":"cixmu6mri0003po2ejwol0a1p","category_id":"cixmu6mry000dpo2e7bt6bpqf","_id":"cixmu6ms5000lpo2epmu2omu4"},{"post_id":"cixmu6mrr0007po2ege5f2xu6","category_id":"cixmu6ms3000ipo2ert6i74r1","_id":"cixmu6ms8000ppo2ekbo8me35"},{"post_id":"cixmu6mrx000cpo2e66iqho9u","category_id":"cixmu6ms3000ipo2ert6i74r1","_id":"cixmu6ms9000tpo2etfdu8wnj"},{"post_id":"cixmu6mrz000epo2eysh139cc","category_id":"cixmu6ms3000ipo2ert6i74r1","_id":"cixmu6msb000wpo2eob49tzyk"},{"post_id":"cixmu6ms0000gpo2ejhuc5458","category_id":"cixmu6msb000upo2ep73xpvk3","_id":"cixmu6msc000ypo2ehzg296z7"},{"post_id":"cixmu6mxj0016po2e3gdbga67","category_id":"cixmu6msb000upo2ep73xpvk3","_id":"cixmu6mxv001epo2evrw2m8m7"},{"post_id":"cixmu6mxl0018po2ezos01vju","category_id":"cixmu6mxv001dpo2ed07e8te4","_id":"cixmu6myc001spo2e2a4hwfje"},{"post_id":"cixmu6my4001lpo2ev923ynlm","category_id":"cixmu6mxv001dpo2ed07e8te4","_id":"cixmu6mye001upo2excu0eva0"},{"post_id":"cixmu6my9001opo2el3jn1kxg","category_id":"cixmu6mxv001dpo2ed07e8te4","_id":"cixmu6myg001xpo2edsqyvznp"},{"post_id":"cixmu6mxw001fpo2e3vdajyg4","category_id":"cixmu6mxv001dpo2ed07e8te4","_id":"cixmu6myh001zpo2e8947kuuk"}],"PostTag":[{"post_id":"cixmu6mrc0001po2eytgr3uf9","tag_id":"cixmu6mrk0004po2ekxax002j","_id":"cixmu6ms4000jpo2eibf0vmi0"},{"post_id":"cixmu6mrc0001po2eytgr3uf9","tag_id":"cixmu6mrw000apo2elbw7pqsz","_id":"cixmu6ms5000kpo2ezb2b61gb"},{"post_id":"cixmu6mri0003po2ejwol0a1p","tag_id":"cixmu6ms2000hpo2e38c3h1lg","_id":"cixmu6ms8000opo2edjh8lgaa"},{"post_id":"cixmu6mrr0007po2ege5f2xu6","tag_id":"cixmu6ms6000mpo2epk3x0jjy","_id":"cixmu6ms9000spo2eivxqxnro"},{"post_id":"cixmu6mrx000cpo2e66iqho9u","tag_id":"cixmu6ms2000hpo2e38c3h1lg","_id":"cixmu6msc0010po2ev6rklznl"},{"post_id":"cixmu6mrx000cpo2e66iqho9u","tag_id":"cixmu6msb000vpo2expkgo5e2","_id":"cixmu6msd0011po2eupav35qd"},{"post_id":"cixmu6mrx000cpo2e66iqho9u","tag_id":"cixmu6ms6000mpo2epk3x0jjy","_id":"cixmu6msh0013po2eq8mbs9uv"},{"post_id":"cixmu6mrz000epo2eysh139cc","tag_id":"cixmu6ms6000mpo2epk3x0jjy","_id":"cixmu6msi0014po2e0yu61vje"},{"post_id":"cixmu6ms0000gpo2ejhuc5458","tag_id":"cixmu6ms6000mpo2epk3x0jjy","_id":"cixmu6msj0015po2e400qtyev"},{"post_id":"cixmu6mxj0016po2e3gdbga67","tag_id":"cixmu6mxp001apo2eisxtb2yl","_id":"cixmu6my3001kpo2evpkbtwyb"},{"post_id":"cixmu6my4001lpo2ev923ynlm","tag_id":"cixmu6mxz001hpo2evdymhewc","_id":"cixmu6myc001rpo2el2egvx9r"},{"post_id":"cixmu6my4001lpo2ev923ynlm","tag_id":"cixmu6ms6000mpo2epk3x0jjy","_id":"cixmu6mye001tpo2ekxdf1rz4"},{"post_id":"cixmu6my9001opo2el3jn1kxg","tag_id":"cixmu6ms6000mpo2epk3x0jjy","_id":"cixmu6myf001wpo2e6m65e2km"},{"post_id":"cixmu6my9001opo2el3jn1kxg","tag_id":"cixmu6mxz001hpo2evdymhewc","_id":"cixmu6myg001ypo2e7ce5jj8h"},{"post_id":"cixmu6mxl0018po2ezos01vju","tag_id":"cixmu6ms6000mpo2epk3x0jjy","_id":"cixmu6myi0020po2e6n1brfn9"},{"post_id":"cixmu6mxl0018po2ezos01vju","tag_id":"cixmu6mxz001hpo2evdymhewc","_id":"cixmu6myi0021po2e4g2gg4ii"},{"post_id":"cixmu6mxl0018po2ezos01vju","tag_id":"cixmu6mxp001apo2eisxtb2yl","_id":"cixmu6mys0022po2ec09huwex"},{"post_id":"cixmu6mxw001fpo2e3vdajyg4","tag_id":"cixmu6mxz001hpo2evdymhewc","_id":"cixmu6myt0023po2eg4l2rto6"},{"post_id":"cixmu6mxw001fpo2e3vdajyg4","tag_id":"cixmu6ms6000mpo2epk3x0jjy","_id":"cixmu6myu0024po2efkspf04w"}],"Tag":[{"name":"HTML","_id":"cixmu6mrk0004po2ekxax002j"},{"name":"CSS","_id":"cixmu6mrw000apo2elbw7pqsz"},{"name":"daily","_id":"cixmu6ms2000hpo2e38c3h1lg"},{"name":"Java","_id":"cixmu6ms6000mpo2epk3x0jjy"},{"name":"JVM","_id":"cixmu6msb000vpo2expkgo5e2"},{"name":"Functional","_id":"cixmu6mxp001apo2eisxtb2yl"},{"name":"设计模式","_id":"cixmu6mxz001hpo2evdymhewc"}]}}