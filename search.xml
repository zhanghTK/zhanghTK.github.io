<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Docker结构]]></title>
      <url>https://zhanghtk.github.io/2017/12/08/Docker%E7%BB%93%E6%9E%84/</url>
      <content type="html"><![CDATA[<h2 id="容器介绍"><a href="#容器介绍" class="headerlink" title="容器介绍"></a>容器介绍</h2><h3 id="容器与虚拟机"><a href="#容器与虚拟机" class="headerlink" title="容器与虚拟机"></a>容器与虚拟机</h3><ul>
<li>容器：应用程序；依赖</li>
<li>虚拟机：应用程序；依赖；操作系统</li>
</ul>
<p><img src="https://ooo.0o0.ooo/2017/06/21/594a1480eb090.jpg" alt="docker_vm.jpg"></p>
<h3 id="容器解决的问题"><a href="#容器解决的问题" class="headerlink" title="容器解决的问题"></a>容器解决的问题</h3><p>简化打包、部署，使应用具备了超强的可移植能力</p>
<p>对于现在多服务的应用往往依赖多个组件（例如：MQ,DB,Cache等），整个开发周期又需要部署多个环境（开发，测试，正式等），这就为运维带来极大的不便：</p>
<p><img src="https://ooo.0o0.ooo/2017/06/21/594a17934f0dd.jpeg" alt="c3786681cc644e6d8a6204cdffc49aa3_th.jpeg"></p>
<p>上面的图有两个变量：</p>
<ol>
<li>应用组件</li>
<li>服务器环境</li>
</ol>
<p>容器能做的就是就是为应用组件提供一个基于容器的标准化环境，让容器可以运行在几乎所有操作系统上</p>
<p><img src="https://ooo.0o0.ooo/2017/06/21/594a19569b110.jpeg" alt="54e8e6a8d2ec4b2d8acba239d323dfb9_th.jpeg"></p>
<p>好处：</p>
<ul>
<li>隔离：容器环境与宿主环境隔离</li>
<li>重用：同一个组件只需要创建一次运行环境就可以在其他机器上运行</li>
<li>一致：只需要配置好标准的 runtime 环境，服务器就可以运行任何容器</li>
</ul>
<h2 id="Docker组成"><a href="#Docker组成" class="headerlink" title="Docker组成"></a>Docker组成</h2><p>核心组件：</p>
<ol>
<li>Docker 客户端 - Client</li>
<li>Docker 服务器 - Docker daemon</li>
<li>Docker 镜像 - Image</li>
<li>Registry</li>
<li>Docker 容器 - Container</li>
</ol>
<p><img src="https://ooo.0o0.ooo/2017/06/21/594a29f4c365c.jpg" alt="docker_architecture.jpg"></p>
<h2 id="Docker启动过程"><a href="#Docker启动过程" class="headerlink" title="Docker启动过程"></a>Docker启动过程</h2><p>上篇文章最后提到了Docker的安装并运行了httpd：<code>sudo docker run -d -p 80:80 httpd</code></p>
<p>结合Docker的组成，说明一下在容器启动过程这些组件是怎么协作的：</p>
<ol>
<li>docker client调用docker daemon请求启动一个容器</li>
<li>docker daemon会向host请求创建容器</li>
<li>host创建一个空的容器</li>
<li>docker daemon检查本机docker镜像文件（如果没有，则到Registry下载）</li>
<li>将镜像文件加载到容器中</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[容器生态系统]]></title>
      <url>https://zhanghtk.github.io/2017/12/08/%E5%AE%B9%E5%99%A8%E7%94%9F%E6%80%81%E7%B3%BB%E7%BB%9F/</url>
      <content type="html"><![CDATA[<h2 id="容器核心技术"><a href="#容器核心技术" class="headerlink" title="容器核心技术"></a>容器核心技术</h2><h3 id="容器规范"><a href="#容器规范" class="headerlink" title="容器规范"></a>容器规范</h3><p>Open Container Initiative（OCI），制定开放的容器规范</p>
<p>两个规范：runtime spec 和 image format spec</p>
<h3 id="容器runtime-amp-管理工具"><a href="#容器runtime-amp-管理工具" class="headerlink" title="容器runtime&amp;管理工具"></a>容器runtime&amp;管理工具</h3><p>容器的运行环境，容器只有在 runtime 中才能运行，主流容器：</p>
<table>
<thead>
<tr>
<th>runtime</th>
<th>管理工具</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>lxc</td>
<td>lxd</td>
<td>Linux 上老牌的容器 runtime；Docker 最初的 runtime</td>
</tr>
<tr>
<td>runc</td>
<td>docker engine</td>
<td>Docker 开发的容器 runtime；符合 oci 规范；现在 Docker 的默认 runtime</td>
</tr>
<tr>
<td>rkt</td>
<td>rkt cli</td>
<td>CoreOS 开发的容器 runtime，符合 oci 规范，能够运行 Docker 的容器</td>
</tr>
</tbody>
</table>
<h3 id="Registry-amp-amp-容器OS"><a href="#Registry-amp-amp-容器OS" class="headerlink" title="Registry&amp;&amp;容器OS"></a>Registry&amp;&amp;容器OS</h3><ul>
<li>Registry：Docker Registry、<a href="[https://hub.docker.com](">Docker Hub</a>)、<a href="https://quay.io/" target="_blank" rel="external">Quay.io</a></li>
<li>容器OS：CoreOS、atomic、ubuntu core</li>
</ul>
<h2 id="容器平台技术"><a href="#容器平台技术" class="headerlink" title="容器平台技术"></a>容器平台技术</h2><h3 id="容器编排引擎"><a href="#容器编排引擎" class="headerlink" title="容器编排引擎"></a>容器编排引擎</h3><p>高效的管理（容器管理、调度、集群定义和服务发现等）容器集群</p>
<ul>
<li>docker swarm ： Docker 开发的容器编排引擎</li>
<li>kubernetes ： Google 领导开发的开源容器编排引擎，同时支持 Docker 和 CoreOS 容器</li>
<li>mesos 是一个通用的集群资源调度平台，mesos 与 marathon 一起提供容器编排引擎功能</li>
</ul>
<h3 id="容器管理平台-amp-amp-基于容器的PaaS"><a href="#容器管理平台-amp-amp-基于容器的PaaS" class="headerlink" title="容器管理平台&amp;&amp;基于容器的PaaS"></a>容器管理平台&amp;&amp;基于容器的PaaS</h3><p>容器管理平台：支持多种编排引擎，抽象了编排引擎的底层实现细节</p>
<ul>
<li>Rancher</li>
<li>ContainerShip</li>
</ul>
<p>基于容器的PaaS：Deis、Flynn 和 Dokku</p>
<h2 id="容器支持技术"><a href="#容器支持技术" class="headerlink" title="容器支持技术"></a>容器支持技术</h2><ul>
<li>容器网络：docker network、flannel、weave 和 calico</li>
<li>服务发现：etcd、consul 和 zookeeper</li>
<li>监控：docker ps/top/stats、stats API、sysdig、cAdvisor/Heapster 和 Weave Scope</li>
<li>数据管理：Flocker</li>
<li>日志管理：docker logs、logspout</li>
<li>安全性：OpenSCAP</li>
</ul>
<h2 id="运行容器——Hello-World"><a href="#运行容器——Hello-World" class="headerlink" title="运行容器——Hello World"></a>运行容器——Hello World</h2><ul>
<li><p>环境：</p>
<ol>
<li>管理工具：Docker Engine</li>
<li>runtime：runc</li>
<li>操作系统：Ubuntu 16.04</li>
</ol>
</li>
<li><p>安装&amp;运行：</p>
<ol>
<li><p>安装包，允许 <code>apt</code> 命令 HTTPS 访问 Docker 源</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get install \</div><div class="line">    apt-transport-https \</div><div class="line">    ca-certificates \</div><div class="line">    curl \</div><div class="line">    software-properties-common</div></pre></td></tr></table></figure>
</li>
<li><p>添加 Docker 官方的 GPG</p>
<p><code>$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</code></p>
</li>
<li><p>将 Docker 的源添加到 /etc/apt/sources.list</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ sudo add-apt-repository \</div><div class="line">  &quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu \</div><div class="line">  $(lsb_release -cs) \</div><div class="line">  stable&quot;</div></pre></td></tr></table></figure>
</li>
<li><p>安装Docker</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get update</div><div class="line">$ sudo apt-get install docker-ce</div></pre></td></tr></table></figure>
</li>
<li><p>运行httpd</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo docker run -d -p 80:80 httpd</div></pre></td></tr></table></figure>
</li>
<li><p>Docker适应非root用户</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ sudo groupadd docker</div><div class="line">$ sudo gpasswd -a $&#123;USER&#125; docker</div><div class="line">$ sudo service docker restart</div></pre></td></tr></table></figure>
</li>
</ol>
<p><strong>NOTE</strong></p>
<p>安装、使用Docker时注意权限是否足够</p>
</li>
</ul>
<hr>
<p>本文主要内容整理自<a href="https://mp.weixin.qq.com/s/7o8QxGydMTUe4Q7Tz46Diw" target="_blank" rel="external">每天5分钟玩转Docker容器技术</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[【MQ】使用扩展]]></title>
      <url>https://zhanghtk.github.io/2017/12/08/%E3%80%90MQ%E3%80%91%E4%BD%BF%E7%94%A8%E6%89%A9%E5%B1%95/</url>
      <content type="html"><![CDATA[<h2 id="TTL"><a href="#TTL" class="headerlink" title="TTL"></a>TTL</h2><h3 id="带有-TTL-的消息"><a href="#带有-TTL-的消息" class="headerlink" title="带有 TTL 的消息"></a>带有 TTL 的消息</h3><p>消息指定 TTL 有两种方式：</p>
<ol>
<li>通过队列属性设置，到达该队列的所有消息都具有相同的 TTL（x-message-ttl）</li>
<li>对消息进行单独设置，每条消息的 TTL 可以不同（setExpiration）</li>
</ol>
<p>两者差异：方式一设置的消息一旦过期就会从队列中丢弃，方式二设置的消息过期后需要在被消费时才丢弃</p>
<p>如果同时使用以上两种消息则以较小的为准。</p>
<h3 id="带有-TTL-的队列"><a href="#带有-TTL-的队列" class="headerlink" title="带有 TTL 的队列"></a>带有 TTL 的队列</h3><p>队列声明时可以（通过 x-expires）指定多久未使用后队列将被删除，使用场景：RPC 模式下用于回复而创建的 queue。</p>
<h2 id="死信"><a href="#死信" class="headerlink" title="死信"></a>死信</h2><p>死信：队列无法处理的消息，文档中定义了以下三种场景：</p>
<ul>
<li>消费端发送 basic.reject or basic.nack 指令（并且需要设置 requeue=false ）</li>
<li>TTL 过期的消息</li>
<li>队列达到最大长度</li>
</ul>
<p>在消息投递前如果指定消息成为死信后的处理交换器和 routking，当消息成为死信后 Rabbit MQ 可以根据先前的配置重新投递。</p>
<h2 id="延时消息"><a href="#延时消息" class="headerlink" title="延时消息"></a>延时消息</h2><p>使用 TTL 消息和死信重新投递就可以容易的构造出延时消息的功能了。</p>
<p>创建两个交换器，两个 binding， 两个队列，延时的过程：</p>
<ul>
<li>exchange1 接收生产者的消息，根据 binding 转发给 queue1</li>
<li>queue1 的消息设置统一的 TTL，并且不对 queue1 数据进行任何消费动作</li>
<li>等 queue1 的消息过期后 MQ 重新将消息投递到 exchange2</li>
<li>exchange2 根据 bindling 信息转发给 queue2</li>
<li>消费者从 queue2 消费消息</li>
</ul>
<h2 id="优先级队列"><a href="#优先级队列" class="headerlink" title="优先级队列"></a>优先级队列</h2><p>消息在发送时如果指定优先级，则当队列中消息堆积时，高优先级的消息可以被优先消费掉。具体的做法：</p>
<ol>
<li>创建队列时，指定队列的最大优先级</li>
<li>投递消息时指定消息的优先级</li>
</ol>
<p>消息到达队列后，Rabbit MQ 会根据优先级进行处理，完全自动。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[【MQ】镜像队列]]></title>
      <url>https://zhanghtk.github.io/2017/12/08/%E3%80%90MQ%E3%80%91%E9%95%9C%E5%83%8F%E9%98%9F%E5%88%97/</url>
      <content type="html"><![CDATA[<p>前面提到持久化和消息确认可以确保消息的可靠，但在默认情况下 MQ 的可靠性完全没有保障，通过集群的方式确保服务的可靠往往是高可用的第一步。本文记录一下 Rabbit MQ 的集群和镜像。</p>
<h2 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h2><p>集群能够带来的好处主要有两点：</p>
<ol>
<li>允许消费者和生产者在 Rabbit MQ 节点崩溃的情况下继续运行</li>
<li>通过添加更多节点线性的扩展消息通信吞吐量</li>
</ol>
<h3 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h3><p>在介绍集群之前先看看从单节点到集群的模式异同：</p>
<ul>
<li><p>相同：任何模式下节点内部都需要维护基本元数据信息：队列元数据、交换器元数据、绑定元数据、vhost 元数据。不同模式</p>
</li>
<li><p>差异：</p>
<ul>
<li><p>单一节点模式：</p>
<p>默认基本元数据信息存储在内存，被标记持久化的队列和交换器已经它们的绑定存储到磁盘</p>
</li>
<li><p>普通集群模式</p>
<p><img src="https://i.loli.net/2017/08/23/599ce92322b59.png" alt="cluster.PNG"></p>
<p><img src="https://i.loli.net/2017/08/23/599ce7656d746.png" alt="cluster.PNG"></p>
<p>除了基本元数据，还有集群相关元数据。与单一节点模式的不同主要在集群对队列，交换器，数据存储的差异。</p>
<p>队列：只会在单个节点而不是所有节点上创建完整队列信息，其余节点只保存队列的元数据。虽然只在一个节点保存完整队列，但消息可以在不同节点之间临时传输（消费者感知到每个节点都有完整的队列）。如果保存队列的单个节点挂了，则消费者对其订阅丢失，即将投递到该队列的信息消息也丢失。如果挂掉的队列是持久化队列则无法重新创建队列，必须恢复该队列</p>
<p>交换器：交换器实质是一张查询表（消息的转发路由是由信道完成），集群内所有的节点拥有所有交换器的信息</p>
<p>数据存储：分为内存节点和硬盘节点，硬盘节点防止重启后元数据信息丢失。元数据的创建更新在集群所有节点操作完成后才返回。集群下要求任何时刻集群中至少有一个磁盘节点，如果唯一的磁盘节点挂了，集群只能路由消息但不能创建更新元数据</p>
</li>
<li><p>镜像队列</p>
<p><img src="https://i.loli.net/2017/08/23/599ce8d6ae6a3.png" alt="image_queues.PNG"></p>
<p>镜像不在单独存在在唯一节点，而是冗余在多个节点</p>
</li>
</ul>
</li>
</ul>
<h2 id="镜像队列"><a href="#镜像队列" class="headerlink" title="镜像队列"></a>镜像队列</h2><p>因为普通集群模式相对基础，而镜像队列复杂，这里重点讨论一下镜像队列。</p>
<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>队列镜像通常包括一个 master 节点和多个 slave 节点，每个节点都复制队列数据。当一个节点失效时，可以自动切换到另一个节点确保可用。在镜像队列模式下，除了 publish 外的所有动作都只会向 master 发送，然后 master 将命令执行的结果广播为所有 slave，publish 到镜像的所有消息总是被直接 publish 到所有 slave 之上（类似与 fanout 交换器）。</p>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><h4 id="普通队列结构"><a href="#普通队列结构" class="headerlink" title="普通队列结构"></a>普通队列结构</h4><p>普通队列由两部分组成：</p>
<ul>
<li>AMQQueue：主要负责 AMQP 协议的逻辑功能</li>
<li>BackingQueue：存储消息</li>
</ul>
<p>对于 BackingQueue 又由五个子队列组成：Q1, Q1, Delta, Q3, Q4，MQ 的消息进入队列后会随着系统负载在队列中流动，BackingQueue 中的消息可以分为四个状态：</p>
<ul>
<li>Alpha：消息的内容和索引都在内存中，Q1 和 Q4 的状态</li>
<li>Beta：消息的内容在硬盘，消息的索引在内存，Q2 和 Q3 的状态</li>
<li>Gamma：消息内容在硬盘，消息的索引在硬盘和内存都有，Q2 和 Q3 的状态</li>
<li>Delta：消息的内容和消息的索引都在硬盘上，Delta 状态</li>
</ul>
<p>对于持久化的消息，消息内容和消息索引都必须先保存到磁盘上，才会处于上述状态中的一种，而Gamma状态的消息只有持久化的消息才会有该状态。</p>
<p>从 Q1 到 Q4，基本的经历是由内存到硬盘再到内存的设计，分层的好处使得整个队列有很好的弹性:</p>
<ul>
<li>当队列负载很高的情况下，能够通过将一部分消息由磁盘保存来节省内存空间</li>
<li>当负载降低的时候，这部分消息又渐渐回到内存，被消费者获取</li>
</ul>
<p>引起消息流动的两种情况：消费者获取消息，内存不足</p>
<p>当系统处于正常负载，对消息的消费速度不小于接收速度，对于非消息极可能只会有 Alpha 状态。对于持久化消息一定会进入 gamma 状态。如果开启 confirm 机制，只有到了这个阶段才会确认消息已经被接受，当消费足够快且内存充足消息不会继续走到下一状态。</p>
<p>当系统处于高负载，已接受的消息不能很快被消费，这些消息就会进入很深的队列中去，增加处理每个消息的平均开销。因为平均开销增加，处理速度更慢，由此恶性循环，使得系统的处理能力大大降低。</p>
<p>改善措施：</p>
<ol>
<li>进行流程控制</li>
<li>增加 prefetch 的值，一次发送更多消息给消费者</li>
<li>采用 multiple ack</li>
</ol>
<h4 id="镜像队列结构"><a href="#镜像队列结构" class="headerlink" title="镜像队列结构"></a>镜像队列结构</h4><p>在镜像队列中 AMQQueue 仍旧负责 AMQP 协议的逻辑功能，而 backing_queue 已不是简单的单节点 backing_queue 了。</p>
<p>backing_queue 是由 master 和 slave 节点组成的特殊 backing_queue，所有对 mirror_queue_master 的操作，会通过 GM 同步到 slave 节点，slave 节点上 mirror_queue_slave 负责回调，master 节点上 coordinato 负责回调。</p>
<p>镜像队列对消息的操作：</p>
<ul>
<li>basic.publish 操作：操作直接同步到所有节点</li>
<li>其他操作：通过 master 操作，由 master 将结果给 slave</li>
</ul>
<h5 id="GM"><a href="#GM" class="headerlink" title="GM"></a>GM</h5><p>GM(Guarenteed Multicast)，实现可靠组播通讯协议的模块，确保组播消息的原子性：</p>
<ul>
<li>将所有节点形成一个收尾相连的循环链表</li>
<li>当有节点新增时，相邻的节点保证当前广播的消息会复制到新的节点上</li>
<li>当有节点失效时，相邻的节点会接管保证本次广播的消息会复制到所有节点</li>
<li>消息从master节点对应的gm发出后，顺着链表依次传送到所有节点</li>
</ul>
<h3 id="镜像队列细节备忘"><a href="#镜像队列细节备忘" class="headerlink" title="镜像队列细节备忘"></a>镜像队列细节备忘</h3><p>镜像队列细节太多，这里整理网上一个注意事项：</p>
<ol>
<li><p>镜像队列不能作为负载均衡使用，因为每个操作在所有节点都要做一遍</p>
</li>
<li><p>ha-mode 参数与 durable, declare 对 exclusive 队列都不生效。exclusive队列是连接独占的，当连接断开，队列自动删除，这两个参数对exclusive队列没有意义</p>
</li>
<li><p>将新节点加入已存在的镜像队列时，默认情况下 ha-sync-mode=manual，镜像队列中的消息不会主动同步到新节点，除非显式调用同步命令。当调用同步命令后，队列开始阻塞，无法对其进行操作，直到同步完毕。当 ha-sync-mode=automatic 时，新加入节点时会默认同步已知的镜像队列。由于同步过程的限制，所以不建议在生产环境的active队列(有生产消费消息)中操作</p>
</li>
<li><p>每当一个节点加入或者重新加入(例如从网络分区中恢复回来)镜像队列，之前保存的队列内容会被清空</p>
</li>
<li><p>镜像队列有主从之分，一个主节点(master)，0个或多个从节点(slave)。当 master 宕掉后，会在 slave中 选举新的master。选举算法为最早启动的节点</p>
</li>
<li><p>当所有slave都处在(与master)未同步状态时，并且 ha-promote-on-shutdown policy 设置为 when-syned(默认) 时，如果 master 因为主动的原因停掉，比如是通过 rabbitmqctl stop 命令停止或者优雅关闭 OS，那么slave不会接管 master，也就是说此时镜像队列不可用</p>
<p>但是如果master因为被动原因停掉，比如 VM 或者 OS crash了，那么 slave 会接管 master。这个配置项隐含的价值取向是优先保证消息可靠不丢失，放弃可用性。</p>
<p>如果 ha-promote-on-shutdown policy 设置为 alway，那么不论 master 因为何种原因停止，slave 都会接管 master，优先保证可用性</p>
</li>
<li><p>镜像队列中最后一个停止的节点会是 master，启动顺序必须是 master 先起，如果 slave 先起，它会有 30 秒的等待时间，等待 master 启动，然后加入 cluster。</p>
<p>当所有节点因故(断电等)同时离线时，每个节点都认为自己不是最后一个停止的节点。要恢复镜像队列，可以尝试在 30 秒之内同时启动所有节点</p>
</li>
<li><p>对于镜像队列，客户端basic.publish操作会同步到所有节点；而其他操作则是通过master中转，再由master将操作作用于salve。比如一个basic.get操作，假如客户端与slave建立了TCP连接，首先是slave将basic.get请求发送至master，由master备好数据，返回至slave，投递给消费者</p>
</li>
<li><p>当 slave 宕掉时，除了与 slave 相连的客户端连接全部断开之外，没有其他影响。</p>
<p>当 master 宕掉时，会有以下连锁反应：</p>
<ol>
<li>与 master 相连的客户端连接全部断开。</li>
<li>选举最老的 slave 为 master。若此时所有 slave 处于未同步状态，则未同步部分消息丢失。</li>
<li>新的 master 节点 requeue 所有 unack 消息，因为这个新节点无法区分这些 unack 消息是否已经到达客户端，亦或是 ack 消息丢失在到老master的通路上，亦或是丢在老 master 组播 ack 消息到所有 slave 的通路上。所以处于消息可靠性的考虑，requeue 所有 unack 的消息。此时客户端可能受到重复消息。</li>
<li>如果客户端连着 slave，并且 basic.consume 消息时指定了x-cancel-on-ha-failover参数，那么客户端会收到一个 Consumer Cancellation Notification 通知，Java SDK中会回调 Consumer 接口的handleCancel() 方法，故需覆盖此方法。如果不指定 x-cancel-on-ha-failover 参数，那么消费者就无法感知 master 宕机，会一直等待下去</li>
</ol>
</li>
</ol>
<h3 id="镜像队列的恢复"><a href="#镜像队列的恢复" class="headerlink" title="镜像队列的恢复"></a>镜像队列的恢复</h3><p>前提：两个节点 A 和 B 组成以镜像队列</p>
<ul>
<li><p>场景一：A 先停，B 后停</p>
<p>该场景下 B 是 master，只要先启动 B，再启动 A 即可。或者先启动 A，再在 30s 之内启动 B 即可恢复镜像队列。如果没有在 30s 内恢复 B，那么 A 自己就停掉自己</p>
</li>
<li><p>场景二：A，B 同时停</p>
<p>该场景可能是由掉电等原因造成，只需在 30s 之内连续启动 A 和 B 即可恢复镜像队列</p>
</li>
<li><p>场景三：A 先停，B 后停，且 A 无法恢复</p>
<p>因为 B 是 master，所以等 B 起来后，在 B 节点上调用 rabbitmqctl forget_cluster_node A 以解除 A 的 cluster 关系，再将新的 slave 节点加入 B 即可重新恢复镜像队列</p>
</li>
<li><p>场景四：A 先停，B 后停，且 B 无法恢复</p>
<p>此时 B 是 master，所以直接启动 A 是不行的，当 A 无法启动时，也就没办法在 A 节点上调用 rabbitmqctl forget_cluster_node B。新版本中，forget_cluster_node 支持 –offline 参数，offline 参数允许 rabbitmqctl 在离线节点上执行 forget_cluster_node 命令，迫使 RabbitMQ 在未启动的 slave 节点中选择一个作为 master。当在 A 节点执行 rabbitmqctl forget_cluster_node –offline B 时，RabbitMQ 会 mock 一个节点代表 A，执行 forget_cluster_node 命令将 B 剔出 cluster，然后 A 就能正常启动了。最后将新的 slave 节点加入 A 即可重新恢复镜像队列</p>
</li>
<li><p>场景五：A 先停，B 后停，且 A 和 B 均无法恢复，但是能得到 A 或 B 的磁盘文件</p>
<p>这个场景更加难以处理。将A或B的数据库文件（$RabbitMQ_HOME/var/lib目录中）copy至新节点C的目录下，再将 C 的 hostname 改成 A 或者 B 的 hostname。如果 copy 过来的是 A 节点磁盘文件，按场景四处理，如果拷贝过来的是 B 节点的磁盘文件，按场景三处理。最后将新的 slave 节点加入 C 即可重新恢复镜像队列</p>
</li>
<li><p>场景六：A 先停，B 后停，且 A 和 B 均无法恢复，且无法得到 A 和 B 的磁盘文件</p>
<p>跑路吧</p>
</li>
</ul>
<hr>
<p>参考：</p>
<p><a href="http://chyufly.github.io/blog/2016/04/10/rabbitmq-cluster/" target="_blank" rel="external">RabbitMQ分布式集群架构和高可用性（HA）</a></p>
<p><a href="https://my.oschina.net/hncscwc/blog/186350" target="_blank" rel="external">rabbitmq——镜像队列</a></p>
<p><a href="http://jzhihui.iteye.com/blog/1582294" target="_blank" rel="external">RabbitMQ源码分析 - 队列机制</a></p>
<p><a href="http://backend.blog.163.com/blog/static/202294126201322511327882/" target="_blank" rel="external">RabbitMQ系列三 （深入消息队列）</a></p>
<p><a href="http://fengchj.com/?p=2273" target="_blank" rel="external">RabbitMQ镜像队列的故障恢复</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[【MQ】可靠消息]]></title>
      <url>https://zhanghtk.github.io/2017/12/08/%E3%80%90MQ%E3%80%91%E5%8F%AF%E9%9D%A0%E6%B6%88%E6%81%AF/</url>
      <content type="html"><![CDATA[<p>初始【MQ】最后说到默认情况下，消息发送后 MQ 不会向发送方确认消息到达，也不会进行持久化处理。即在发送方眼里消息只要发出去，就不再关心消息消息了。这确实做到了生产者与 MQ 的解耦，并且效率很高。但缺点也非常明显，无法确定消息投递是可靠的：</p>
<ul>
<li>正在运行的 MQ 宕机后，无法恢复已发送的消息（持久化问题）</li>
<li>没有匹配的 queue，那么消息将被 exchange 直接丢弃，而发送方对此毫不知情（确认问题）</li>
<li>消息发送过程中在网络中丢失，发送方毫不知情（确认问题）</li>
</ul>
<p>Rabbit MQ 是被设计为金融行业服务的，在这些方面当然有考虑。本文将从持久化和消息确认两方面来了解 Rabbit MQ 的可靠消息实践。</p>
<h2 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h2><p>为了确保消息在 MQ 各个环节的不丢失，需要将 exchange, queue, 投递方式都进行持久化声明。具体持久化的方式很简单，调用 API 就可以了。</p>
<h3 id="exchange-持久化"><a href="#exchange-持久化" class="headerlink" title="exchange 持久化"></a>exchange 持久化</h3><p>exchange 声明时，将 durable 设置为 true 就可以了。这顺便看一下 exchange 创建方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">Exchange.<span class="function">DeclareOk <span class="title">exchangeDeclare</span><span class="params">(String exchange, String type, <span class="keyword">boolean</span> durable)</span> </span></div><div class="line">  <span class="keyword">throws</span> IOException;</div><div class="line"></div><div class="line">Exchange.<span class="function">DeclareOk <span class="title">exchangeDeclare</span><span class="params">(String exchange, String type, <span class="keyword">boolean</span> durable, </span></span></div><div class="line">                                   <span class="keyword">boolean</span> autoDelete,Map&lt;String, Object&gt; arguments) </div><div class="line">  <span class="keyword">throws</span> IOException;</div><div class="line"></div><div class="line">Exchange.<span class="function">DeclareOk <span class="title">exchangeDeclare</span><span class="params">(String exchange, String type)</span> </span></div><div class="line">  <span class="keyword">throws</span> IOException;</div><div class="line"></div><div class="line">Exchange.<span class="function">DeclareOk <span class="title">exchangeDeclare</span><span class="params">(String exchange,  // 交换器名称</span></span></div><div class="line">                                   String type,  // 交换器类型</div><div class="line">                                   <span class="keyword">boolean</span> durable, // 是否持久化</div><div class="line">                                   <span class="keyword">boolean</span> autoDelete,  // 是否自动删除</div><div class="line">                                   <span class="keyword">boolean</span> internal,  // 内部</div><div class="line">                                   Map&lt;String, Object&gt; arguments  // 其他构造参数</div><div class="line">                                  ) <span class="keyword">throws</span> IOException;</div><div class="line"></div><div class="line"><span class="comment">// 等价于 exchangeDeclare 方法设置 nowait 参数</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">exchangeDeclareNoWait</span><span class="params">(String exchange, String type, <span class="keyword">boolean</span> durable, <span class="keyword">boolean</span> autoDelete,</span></span></div><div class="line">                           <span class="keyword">boolean</span> internal, Map&lt;String, Object&gt; arguments) </div><div class="line">  <span class="keyword">throws</span> IOException;</div><div class="line"></div><div class="line"><span class="comment">// 被动声明队列，声明前先检查</span></div><div class="line">Exchange.<span class="function">DeclareOk <span class="title">exchangeDeclarePassive</span><span class="params">(String name)</span> <span class="keyword">throws</span> IOException</span>;</div></pre></td></tr></table></figure>
<p>exchange 声明持久化后只能确保重启后 exchange 重新创建。否则 exchange 将丢失，生产者就无法正常发送消息了。</p>
<h3 id="queue-持久化"><a href="#queue-持久化" class="headerlink" title="queue 持久化"></a>queue 持久化</h3><p>queue 持久化也是一样的套路，将 durable 设置为 true 就可以了。queue 创建的 AIP：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Queue.<span class="function">DeclareOk <span class="title">queueDeclare</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</div><div class="line"></div><div class="line">Queue.<span class="function">DeclareOk <span class="title">queueDeclare</span><span class="params">(String queue,  // queue 名称 </span></span></div><div class="line">                             <span class="keyword">boolean</span> durable,  // 持久化</div><div class="line">                             <span class="keyword">boolean</span> exclusive,  // 排他队列</div><div class="line">                             <span class="keyword">boolean</span> autoDelete,  // 自动删除</div><div class="line">                             Map&lt;String, Object&gt; arguments  // 其他构造参数</div><div class="line">                            ) <span class="keyword">throws</span> IOException;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">queueDeclareNoWait</span><span class="params">(String queue, <span class="keyword">boolean</span> durable, <span class="keyword">boolean</span> exclusive, <span class="keyword">boolean</span> autoDelete, </span></span></div><div class="line">                        Map&lt;String, Object&gt; arguments) <span class="keyword">throws</span> IOException;</div><div class="line"></div><div class="line">Queue.<span class="function">DeclareOk <span class="title">queueDeclarePassive</span><span class="params">(String queue)</span> <span class="keyword">throws</span> IOException</span>;</div></pre></td></tr></table></figure>
<p>对 durable 没什么好说的，确保重启后 queue 重新创建，但消息无法恢复，消息的持久化依赖于投递方式的持久化。</p>
<p>注意一下 exclusive 参数：一个队列被声明为排他队列，该队列仅对首次申明它的连接可见，并在连接断开时自动删除：</p>
<ol>
<li>排他队列是基于连接可见的，同一连接的不同信道是可以同时访问同一连接创建的排他队列；</li>
<li>“首次”，如果一个连接已经声明了一个排他队列，其他连接是不允许建立同名的排他队列的，这个与普通队列不同；</li>
<li>即使该队列是持久化的，一旦连接关闭或者客户端退出，该排他队列都会被自动删除的，这种队列适用于一个客户端发送读取消息的应用场景。</li>
</ol>
<h3 id="投递方式持久化声明"><a href="#投递方式持久化声明" class="headerlink" title="投递方式持久化声明"></a>投递方式持久化声明</h3><p>套路基本一致，还是看 API：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">basicPublish</span><span class="params">(String exchange, String routingKey, BasicProperties props, <span class="keyword">byte</span>[] body)</span> </span></div><div class="line">  <span class="keyword">throws</span> IOException;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">basicPublish</span><span class="params">(String exchange, String routingKey, <span class="keyword">boolean</span> mandatory, BasicProperties props,</span></span></div><div class="line">                  <span class="keyword">byte</span>[] body)<span class="keyword">throws</span> IOException;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">basicPublish</span><span class="params">(String exchange,  // 交换器</span></span></div><div class="line">                  String routingKey,  // routing key</div><div class="line">                  <span class="keyword">boolean</span> mandatory,  // 消息确认</div><div class="line">                  <span class="keyword">boolean</span> immediate,  // 废弃</div><div class="line">                  BasicProperties props,  // 参数</div><div class="line">                  <span class="keyword">byte</span>[] body  // 消息有效负载</div><div class="line">                 ) <span class="keyword">throws</span> IOException;</div></pre></td></tr></table></figure>
<p>持久化的参数包含在 BasicProperties 定义中：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">BasicProperties</span> <span class="keyword">extends</span> <span class="title">AMQBasicProperties</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String contentType;  <span class="comment">// 消息类型</span></div><div class="line">    <span class="keyword">private</span> String contentEncoding;  <span class="comment">// 编码</span></div><div class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; headers;</div><div class="line">    <span class="keyword">private</span> Integer deliveryMode;  <span class="comment">// 持久化。1：非持久化；2：持久化</span></div><div class="line">    <span class="keyword">private</span> Integer priority;  <span class="comment">// 优先级</span></div><div class="line">    <span class="keyword">private</span> String correlationId;</div><div class="line">    <span class="keyword">private</span> String replyTo;  <span class="comment">// 反馈队列</span></div><div class="line">    <span class="keyword">private</span> String expiration;  <span class="comment">// expiration到期时间</span></div><div class="line">    <span class="keyword">private</span> String messageId;</div><div class="line">    <span class="keyword">private</span> Date timestamp;</div><div class="line">    <span class="keyword">private</span> String type;</div><div class="line">    <span class="keyword">private</span> String userId;</div><div class="line">    <span class="keyword">private</span> String appId;</div><div class="line">    <span class="keyword">private</span> String clusterId;</div><div class="line">    <span class="comment">// 省略方法   </span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>BasicProperties 的构造除了提供默认的方法外，对常用的参数可以直接获得，还支持使用 builder 模式构造。</p>
<p><strong>如果单独持久化投递方式，重启后因为交换器、队列已不存在所以毫无意义</strong></p>
<h3 id="持久化的影响"><a href="#持久化的影响" class="headerlink" title="持久化的影响"></a>持久化的影响</h3><ul>
<li><p>性能</p>
<p>《Rabbit MQ 实战》 一书在说明持久化对性能影响时，举例：“使用持久化机制而导致消息吞吐量降低至少 10 倍的情况并不少见”。这个说法还是很让我震惊的，很好奇 Rabbit MQ 的持久化策略是怎么做的影响这么大，还是说非持久化策略太优秀了，以至于磁盘性能极大影响了整体吞吐量。这里挖个坑，争取以后看看内部实现吧，毕竟 erlang 对我是个大问题。</p>
</li>
<li><p>集群模式下工作的不好</p>
<p>暂时不清楚集群模式下的影响，先 mark 一下</p>
</li>
<li><p>依旧无法 100% 数据不丢失</p>
<p>即使 exchange，queue，投递方式都进行持久化声明依旧不能做到 100% 数据不丢失，原因有二：</p>
<ol>
<li><p>Rabbit MQ 不是为每条消息进行 fsync（同步 IO） 处理</p>
<p>依旧可能出现挂掉时有消息没有持久化的情况，解决有两种方式：镜像队列和消息确认</p>
</li>
<li><p>看到网上有提到 erlang 写文件的实时问题，不懂，先 mark，待求证</p>
</li>
</ol>
</li>
</ul>
<h2 id="消息确认"><a href="#消息确认" class="headerlink" title="消息确认"></a>消息确认</h2><p>消息确认可以分为生产者确认消息正确投递和消费者确认消息正确接收，对  Rabbit MQ 有三种更具体的情况：</p>
<ul>
<li>confire/事务：确认消息到达 broker，避免消息在生产者发出后丢失</li>
<li>客户端 ACK：确认消费者接收消息，避免消息在消息队列发出后丢失</li>
<li>mandatory/immediate：确认消息到达队列，避免到达交换器后找不到队列而丢弃</li>
</ul>
<h3 id="事务-confire"><a href="#事务-confire" class="headerlink" title="事务/confire"></a>事务/confire</h3><h4 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h4><p>确认消息成功被 exchange 接收。事务是 AMQP 协议内定义的， Rabbit MQ 也做了相应的实现。与事务相关有三个方法，具体使用的模板：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">  channel.txSelect();</div><div class="line">  channel.basicPublish(...);</div><div class="line">  channel.txCommit();</div><div class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">  e.printStackTrace();</div><div class="line">  channel.txRollback();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>事务缺点：最大的问题是执行前后需要开启事务，提交/回滚事务，而这几个过程又必须是同步的因此会造成很大的性能问题</p>
<h4 id="confire"><a href="#confire" class="headerlink" title="confire"></a>confire</h4><p>confire 是 Rabbit MQ 为解决事务性能问题设计的确认机制，主要的做法是为每条消息都设置唯一 ID 且 ID 以 1  为步长生序，MQ 通过发送 ACK, NACK 异步确认消息是否到达交换器。</p>
<p>网上普遍对 confire 的描述都集中在异步性上。除了异步，可以设置 basic.ack 的 multiple 域进行累计确认，这有点 TCP 的确认方式。</p>
<p>confire 最大的问题是无法回滚，导致生产者本身也不确定消息是否放成功。如果程序需要实现类似回滚功能，则维护一个 unconfire 消息的集合，每次收到 ACK/NACK 时更新集合（还需要考虑是否是累计确认）</p>
<p>我使用了三种方式实现 confire 并进行对比：</p>
<ul>
<li>对每条消息要求接收对应的 confire 消息</li>
<li>对一组消息要求接收一条 confire 消息</li>
<li>使用监听器完全异步的接收 confire 消息</li>
</ul>
<p>不出意外的第三种方式的性能是最好的。</p>
<h3 id="客户端-ACK"><a href="#客户端-ACK" class="headerlink" title="客户端 ACK"></a>客户端 ACK</h3><p>声明队列时指定 noAck 参数：</p>
<ul>
<li>noAck=false：Rabbit MQ 向消费者发出消息后等待消费者显式发出 ack 信号后才移除消息</li>
<li>noAck=true：Rabbit MQ 向消费者发出消息后立即移除消息</li>
</ul>
<p>当设置队列 noAck 为 false 时，客户端必须根据消息的处理情况向 MQ 反馈，默认情况下 会自动确认。如果希望手动确认需要关闭自动确认。</p>
<p>客户端除了 ACK 为还可以向 MQ 反馈其他信息，反馈的 API 分别有：</p>
<ul>
<li>channel.basicAck：向 MQ 确认消息正确接收</li>
<li>channel.basicRecover：向 MQ 确认消息需要重发，可以根据参数重发给当前消费者或重新入队</li>
<li>channel.basicReject：向 MQ 确认消息退回</li>
<li>channel.basicNack：向 MQ 确认批量退回消息，可以根据参数选择是否批量</li>
</ul>
<h3 id="mandatory-immediate"><a href="#mandatory-immediate" class="headerlink" title="mandatory/immediate"></a>mandatory/immediate</h3><h4 id="mandatory"><a href="#mandatory" class="headerlink" title="mandatory"></a>mandatory</h4><p>mandatory 设置为 true 时：MQ 至少将该消息路由到至少一个队列中，否则将消息返还给生产者</p>
<p>mandatory 实现时只需要：</p>
<ol>
<li><p>投递消息时设置 mandatory 参数为true</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">basicPublish</span><span class="params">(String exchange,  // 交换器</span></span></div><div class="line">              String routingKey,  // routing key</div><div class="line">              <span class="keyword">boolean</span> mandatory,  // 消息确认</div><div class="line">              <span class="keyword">boolean</span> immediate,  // 废弃</div><div class="line">              BasicProperties props,  // 参数</div><div class="line">              <span class="keyword">byte</span>[] body  // 消息有效负载</div><div class="line">             ) <span class="keyword">throws</span> IOException;</div></pre></td></tr></table></figure>
</li>
<li><p>设置监听器</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">channel.addReturnListener(<span class="keyword">new</span> ReturnListener() &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleReturn</span><span class="params">(<span class="keyword">int</span> replyCode, String replyText, String exchange,</span></span></div><div class="line">                             String routingKey, AMQP.BasicProperties basicProperties,</div><div class="line">                             <span class="keyword">byte</span>[] body) <span class="keyword">throws</span> IOException &#123;</div><div class="line">                               <span class="comment">// TODO</span></div><div class="line">                             &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
</ol>
<p>当消息没有被正确路由到至少一个队列时，AMQP协议会返回对应消息，监听器内的代码将被调用；</p>
<p><strong>当消息正确投递，什么也不发生</strong></p>
<h4 id="immediate"><a href="#immediate" class="headerlink" title="immediate"></a>immediate</h4><p><strong>Rabbit MQ 3.0 之后已移除</strong>。设置为 true 时：消息路由到 queue 前，如果 queue 有消费者，则马上将消息投递给 queue，否则直接把消息返还给生产者，消息不再入队。</p>
<hr>
<p>参考：</p>
<p>《Rabbit MQ 实战》</p>
<p><a href="http://www.cnblogs.com/520playboy/p/6925196.html" target="_blank" rel="external">RabbitMQ(二)：mandatory标志的作用</a></p>
<p><a href="https://github.com/pzxwhc/MineKnowContainer/issues/49" target="_blank" rel="external">RabbitMQ：Publisher的消息确认机制</a></p>
<p><a href="http://blog.csdn.net/u013256816/article/details/54914525" target="_blank" rel="external">RabbitMQ之mandatory和immediate</a></p>
<p> <a href="http://blog.csdn.net/u013256816/article/details/55515234" target="_blank" rel="external">RabbitMQ之消息确认机制（事务+Confirm）</a></p>
<p><a href="http://blog.csdn.net/u014045580/article/details/70311746" target="_blank" rel="external">rabbitMq生产者角度:消息持久化、事务机制、PublisherConfirm、mandatory</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[【MQ】初始MQ]]></title>
      <url>https://zhanghtk.github.io/2017/12/08/%E3%80%90MQ%E3%80%91%E5%88%9D%E5%A7%8BMQ/</url>
      <content type="html"><![CDATA[<p>接触 MQ 之前简单的理解消息队列就是一个理论上无限大的线性表，接触后发现 MQ 支持的功能远不止这些。MQ 的功能可以概括为：削峰填谷，异步解耦。</p>
<p>从模型上看，MQ 模型不是狭义上的 C/S 模型，而是消息服务投递模型：</p>
<ul>
<li>在程序角度：当程序连接到 RabbitMQ 时必须决定自己是发送者还是接受者</li>
<li>在 MQ 角度：MQ 及接收消息，又发送消息</li>
</ul>
<p>AMQP（高级消息队列协议）是对 MQ 最抽象的描述。</p>
<h2 id="AMQP"><a href="#AMQP" class="headerlink" title="AMQP"></a>AMQP</h2><p>AMQP 定义了一个 MQ 的几个组件，官方的描述还是比较晦涩的，我以自己的理解描述所以可能不够准确：</p>
<ul>
<li>Server（broker）：MQ 服务器</li>
<li>Exchange：一个功能强大 router，不做消息的存储，单纯转发给 MQ</li>
<li>Message Queue：消息队列，具体存储未被消费的消息</li>
<li>Message：消息</li>
<li>Binding：关联 Exchange  和 Message Queeu 的路由表</li>
<li>Connection：链接，TCP 链接</li>
<li>Channel：子链接，复用 Connection</li>
<li>Command：命令</li>
<li>Virtual Host：服务器创建的 mini 版的 MQ</li>
</ul>
<h3 id="Exchange-amp-Binding"><a href="#Exchange-amp-Binding" class="headerlink" title="Exchange &amp; Binding"></a>Exchange &amp; Binding</h3><p>这两个东东算是 MQ 核心功能的实现组件，网上描述的我觉得不是很清楚。</p>
<p>可以把 exchange 当路由器理解，把 binding 当路由表理解。路由器根据路由表把数据从路由器路由到一下节点，exchange 根据 binding 把消息从 exchange 路由到 queue。exchange 的核心功能是路由转发，而路由转发的依据是 binding。把 binding 当路由表的话，那么这个路由表有三项：</p>
<ul>
<li>exchange name</li>
<li>queue name</li>
<li>router key</li>
</ul>
<p>三者的关系需要在实际生产、消费消息之前完成绑定。而后消息到达 exchange 后根据 routing key 路由到指定 queue。而 exchange  有多种不同实现，不同实现的 exchange 根据 routing key 的路由方式不同，适用于不同场景。</p>
<h2 id="典型场景"><a href="#典型场景" class="headerlink" title="典型场景"></a>典型场景</h2><p>以下例子从 Rabbit MQ 官网给搬运，<a href="http://www.rabbitmq.com/tutorials/tutorial-one-java.html" target="_blank" rel="external">传送门</a>。</p>
<h3 id="direct"><a href="#direct" class="headerlink" title="direct"></a>direct</h3><p>direct 类型的交换器严格根据消息头的 exchange name, queue name, router key 将消息路由到对应的队列</p>
<h4 id="消息投递到一个队列"><a href="#消息投递到一个队列" class="headerlink" title="消息投递到一个队列"></a>消息投递到一个队列</h4><p><img src="http://www.rabbitmq.com/img/tutorials/python-one.png" alt="direct1"></p>
<p>所有消息由默认交换器根据消息头 queue name 投递到队列。没有声明交换器，自动将队列绑定到了默认交换器。下面代码的第二个参数很容易被当做 queue name，实际上这个字段是 routing key，发送方是不关心 queue 的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);  <span class="comment">// 声明队列</span></div><div class="line">channel.basicPublish(<span class="string">""</span>,  <span class="comment">// exchange name，空则投递到默认交换器</span></div><div class="line">                     QUEUE_NAME,  <span class="comment">// 以 queue_name 作为 routing key</span></div><div class="line">                     <span class="keyword">null</span>, </div><div class="line">                     message.getBytes());</div></pre></td></tr></table></figure>
<h4 id="消息投递到一个队列由多个消费者消费"><a href="#消息投递到一个队列由多个消费者消费" class="headerlink" title="消息投递到一个队列由多个消费者消费"></a>消息投递到一个队列由多个消费者消费</h4><p><img src="http://www.rabbitmq.com/img/tutorials/python-two.png" alt="direct2"></p>
<p>可以用于负载均衡的生产者消费者模型，每个消息正常只被消费一次。</p>
<p>投递过程与上一个一样，队列的消息同时由多个消费者消费</p>
<h4 id="消息有选择的分散到多个队列"><a href="#消息有选择的分散到多个队列" class="headerlink" title="消息有选择的分散到多个队列"></a>消息有选择的分散到多个队列</h4><p><img src="http://www.rabbitmq.com/img/tutorials/direct-exchange.png" alt="direct3"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">channel.exchangeDeclare(EXCHANGE_NAME, <span class="string">"direct"</span>);  <span class="comment">// 声明 direct 类型交换器</span></div><div class="line">String queueName = channel.queueDeclare().getQueue();  <span class="comment">// 声明随机队列，并获取该队列名字</span></div><div class="line">channel.queueBind(queueName, EXCHANGE_NAME, ROUTING_KEY);  <span class="comment">// 绑定</span></div><div class="line"></div><div class="line"><span class="comment">// 发送</span></div><div class="line">channel.basicPublish(EXCHANGE_NAME, </div><div class="line">                     ROUTING_KEY, </div><div class="line">                     <span class="keyword">null</span>, </div><div class="line">                     message.getBytes());</div></pre></td></tr></table></figure>
<p>完整的交换器，队列声明并绑定，消息根据绑定信息投递到对应队列。</p>
<p>一个交换器与多个队列使用相同的 routing key 进行绑定，当该 routing key 消息发送至交换器可以形成广播的形式。</p>
<h3 id="fanout"><a href="#fanout" class="headerlink" title="fanout"></a>fanout</h3><p><img src="http://www.rabbitmq.com/img/tutorials/exchanges.png" alt="fanout"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">channel.exchangeDeclare(EXCHANGE_NAME, <span class="string">"fanout"</span>);  <span class="comment">// 声明 fanout 类型交换器</span></div><div class="line">String queueName = channel.queueDeclare().getQueue();  <span class="comment">// 创建非持久的，唯一的，自动删除的队列</span></div><div class="line">channel.queueBind(queueName, EXCHANGE_NAME, <span class="string">""</span>);  <span class="comment">// 绑定队列与交换器，不要 routing key</span></div><div class="line"></div><div class="line"><span class="comment">// 发送</span></div><div class="line">channel.basicPublish(EXCHANGE_NAME, </div><div class="line">                     <span class="string">""</span>,  <span class="comment">// routing key</span></div><div class="line">                     <span class="keyword">null</span>, </div><div class="line">                     message.getBytes());</div></pre></td></tr></table></figure>
<p>交换器收到的消息广播至所有绑定的队列，绑定不需要给定 routing key</p>
<h3 id="topic"><a href="#topic" class="headerlink" title="topic"></a>topic</h3><p><img src="http://www.rabbitmq.com/img/tutorials/python-five.png" alt="topic"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">channel.exchangeDeclare(EXCHANGE_NAME, <span class="string">"topic"</span>);  <span class="comment">// 声明 topic 类型交换器</span></div><div class="line">String queueName = channel.queueDeclare().getQueue();  <span class="comment">// 创建非持久的、唯一的、自动删除的队列</span></div><div class="line">channel.queueBind(queueName, EXCHANGE_NAME, ROUTING_KEY);  <span class="comment">// 绑定队列，交换器，路由键</span></div><div class="line"></div><div class="line"><span class="comment">// 发送</span></div><div class="line">channel.basicPublish(EXCHANGE_NAME, </div><div class="line">                     ROUTING_KEY, </div><div class="line">                     <span class="keyword">null</span>, </div><div class="line">                     msg.getBytes());</div></pre></td></tr></table></figure>
<p>编码过程与使用 direct 交换器的完整过程一直，但是 routing key 可以使用通配符：</p>
<ul>
<li><code>*</code> 将 . 视为分隔符进行匹配</li>
<li><code>#</code>将任意字符串视为关键字匹配</li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul>
<li>消息发后即忘：消息单向传递，默认并不会向发送方确认发送，也不会做持久化</li>
<li>prefetch count：在 direct 的第二场景下，消息会被平均分配给各个消费者，而不考虑消费者的消费能力。可以使用设置 Prefetch count 保持各消费者负载均衡</li>
<li>binding key：有的文章将 bindling 中使用的 routing key 也称作 binding key，我统一称为 binding key 了</li>
<li>相关 demo <a href="https://github.com/zhanghTK/rabbit-mq" target="_blank" rel="external">传送门</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[单例背后的技术细节]]></title>
      <url>https://zhanghtk.github.io/2017/12/08/%E5%8D%95%E4%BE%8B%E8%83%8C%E5%90%8E%E7%9A%84%E6%8A%80%E6%9C%AF%E7%BB%86%E8%8A%82/</url>
      <content type="html"><![CDATA[<p>单例是最简单的设计模式，这基本上是大家的共识。然而单例也是最经常被问及的基础面试题，各个语言下单例的实现通常都是以私有构造方法的方式实现，一个优雅的单例往往涉及线程，序列化等内容。 这里以 Java 实现单例，并总结一下各种单例的实现方式的特点。</p>
<h2 id="单例的各种写法"><a href="#单例的各种写法" class="headerlink" title="单例的各种写法"></a>单例的各种写法</h2><h3 id="饿汉单例"><a href="#饿汉单例" class="headerlink" title="饿汉单例"></a>饿汉单例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HungrySingleton</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> HungrySingleton instance = <span class="keyword">new</span> HungrySingleton();</div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">HungrySingleton</span><span class="params">()</span></span>&#123;&#125;</div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HungrySingleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> instance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>优点：简单、线程安全</li>
<li>缺点：无法延迟创建，无法防御反射、序列化重复创建</li>
</ul>
<h3 id="简单懒汉单例"><a href="#简单懒汉单例" class="headerlink" title="简单懒汉单例"></a>简单懒汉单例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LazySingletonSimple</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> LazySingletonSimple instance;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LazySingletonSimple</span><span class="params">()</span></span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LazySingletonSimple <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</div><div class="line">            instance = <span class="keyword">new</span> LazySingletonSimple();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> instance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>优点：简单，延迟创建</li>
<li>缺点：线程不安全，无法防御反射、序列化重复创建</li>
</ul>
<h3 id="内部类懒汉单例"><a href="#内部类懒汉单例" class="headerlink" title="内部类懒汉单例"></a>内部类懒汉单例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LazySingletonStatic</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span></span>&#123;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> LazySingletonStatic INSTANCE = <span class="keyword">new</span> LazySingletonStatic();</div><div class="line">    &#125;</div><div class="line"><span class="comment">//    可以使用静态初始化块的方式实现饿汉单例</span></div><div class="line"><span class="comment">//    private LazySingletonSimple instance;</span></div><div class="line"><span class="comment">//    static &#123;</span></div><div class="line"><span class="comment">//        instance = new LazySingletonSimple();</span></div><div class="line"><span class="comment">//    &#125;</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LazySingletonStatic</span><span class="params">()</span></span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LazySingletonStatic <span class="title">getInstance</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> SingletonHolder.INSTANCE;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>优点：延迟创建，线程安全</li>
<li>缺点：较复杂，无法防御反射、序列化重复创建</li>
</ul>
<h3 id="加锁懒汉单例"><a href="#加锁懒汉单例" class="headerlink" title="加锁懒汉单例"></a>加锁懒汉单例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LazySingletonSafe</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> LazySingletonSafe instance;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LazySingletonSafe</span><span class="params">()</span></span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> LazySingletonSafe <span class="title">getInstance</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>)&#123;</div><div class="line">            instance = <span class="keyword">new</span> LazySingletonSafe();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> instance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>优点：延迟创建，线程安全</li>
<li>缺点：性能差，无法防御反射、序列化重复创建</li>
</ul>
<h3 id="双锁懒汉单例"><a href="#双锁懒汉单例" class="headerlink" title="双锁懒汉单例"></a>双锁懒汉单例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DoubleCheckLockSingleton</span> </span>&#123;</div><div class="line">    <span class="comment">// 指令重排可能影响执行指令的执行顺序</span></div><div class="line">    <span class="comment">// volatile 声明的变量会禁止指令重排</span></div><div class="line">    <span class="comment">// 只在 JDK5 之后生效</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> DoubleCheckLockSingleton instance;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">DoubleCheckLockSingleton</span><span class="params">()</span></span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DoubleCheckLockSingleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(instance == <span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">synchronized</span> (DoubleCheckLockSingleton.class)&#123;</div><div class="line">                <span class="keyword">if</span>(instance == <span class="keyword">null</span>)&#123;</div><div class="line">                    instance = <span class="keyword">new</span> DoubleCheckLockSingleton();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> instance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>优点：延迟创建，线程安全</li>
<li>缺点：无法防御反射、序列化重复创建</li>
</ul>
<h3 id="改进加锁懒汉单例"><a href="#改进加锁懒汉单例" class="headerlink" title="改进加锁懒汉单例"></a>改进加锁懒汉单例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefReflectAndSerialSingleton</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DefReflectAndSerialSingleton instance;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 防止反射创建多个单例</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">DefReflectAndSerialSingleton</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (instance != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 防止序列化创建多个单例</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     * <span class="doctag">@throws</span> ObjectStreamException</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> Object <span class="title">readResolve</span><span class="params">()</span> <span class="keyword">throws</span> ObjectStreamException </span>&#123;</div><div class="line">        <span class="keyword">return</span> instance;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> DefReflectAndSerialSingleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>)&#123;</div><div class="line">            instance = <span class="keyword">new</span> DefReflectAndSerialSingleton();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> instance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>优点：延迟创建，线程安全，可以防御反射、序列化重复创建</li>
<li>缺点：复杂，性能差</li>
</ul>
<h3 id="枚举单例"><a href="#枚举单例" class="headerlink" title="枚举单例"></a>枚举单例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> EnumSingleton &#123;</div><div class="line">    INSTANCE;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">functionInEnum</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"function in enum"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>优点：延迟创建，线程安全，可以防御反射、序列化重复创建</li>
<li>缺点：用的人太少</li>
</ul>
<h2 id="单例背后的技术细节"><a href="#单例背后的技术细节" class="headerlink" title="单例背后的技术细节"></a>单例背后的技术细节</h2><h3 id="饿汉单例-amp-简单懒汉单例"><a href="#饿汉单例-amp-简单懒汉单例" class="headerlink" title="饿汉单例 &amp; 简单懒汉单例"></a>饿汉单例 &amp; 简单懒汉单例</h3><p>最简单的写法，直接私有化构造器，区别在初始化单例的时机。这是初学者最容易掌握的单例写法，并没有什么太多值得说的。在一般的场景下使用也并没有太大问题，但如果考虑线程安全，序列化，反射场景时，这两种写法都不可取。</p>
<h3 id="内部类懒汉单例-1"><a href="#内部类懒汉单例-1" class="headerlink" title="内部类懒汉单例"></a>内部类懒汉单例</h3><p>使用内部类机制形成懒加载，其过程涉及到了类加载机制</p>
<h4 id="类加载"><a href="#类加载" class="headerlink" title="类加载"></a>类加载</h4><p>类加载、使用的完整过程：</p>
<p>加载 -&gt; 验证 -&gt; 准备 -&gt; 解析 -&gt; 初始化 -&gt; 使用 -&gt; 卸载</p>
<p>对内部类懒汉单例来说，初始化阶段影响了单例对象实例化的时间，这里具体看一下初始化阶段</p>
<h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><p>初始化阶段有两个东西比较重要：</p>
<ol>
<li>初始化条件</li>
<li>初始化过程</li>
</ol>
<h5 id="初始化条件"><a href="#初始化条件" class="headerlink" title="初始化条件"></a>初始化条件</h5><p>类初始化的条件在 JVM 规范中有明确要求：</p>
<ol>
<li>遇到 new、getstatic、putstatic、invokestatic 这四条字节码指令时，如果类还没有进行过初始化，则需要先触发其初始化</li>
<li>使用 Java.lang.refect 包的方法对类进行反射调用时，如果类还没有进行过初始化，则需要先触发其初始化</li>
<li>当初始化一个类的时候，如果发现其父类还没有进行初始化，则需要先触发其父类的初始化</li>
<li>当虚拟机启动时，用户需要指定一个要执行的主类，虚拟机会先执行该主类</li>
<li>当使用jdk1.7 的动态语言支持时，如果一个 java.lang.invoke.MethodHandle 实例最后的解析结果 REF_getStatic ,  REF_putStatic ,  REF_invokeStatic 的方法句柄，并且这个方法句柄所对应的类没有进行过初始化，则需要先触发其初始化</li>
</ol>
<p>在上面代码中的场景，只有 SingletonHolder.INSTANCE; 代码执行时才会初始化 SingletonHolder 类</p>
<h5 id="初始化过程"><a href="#初始化过程" class="headerlink" title="初始化过程"></a>初始化过程</h5><p>初始化阶段真正开始执行代码中定义的 Java 程序代码，初始化阶段会执行类构造器  <clinit>() 方法。</clinit></p>
<p><clinit>() 方法是 Java 编译器生成的，内容是收集代码中所有类变量的赋值语句和静态语句块中的语句合并而成，顺序由源文件中出现顺序决定。</clinit></p>
<p>在上面的场景中，只有类变量赋值的语句：private static final LazySingletonStatic INSTANCE = new LazySingletonStatic();</p>
<h5 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h5><p>单线程环境下初始化大致的过程清楚后，还需要说明一下 Java 中初始化一个类或接口是是加锁的同步操作，而这个操作是自动，可以确保当多个线程同时加载一个类时的线程安全。</p>
<h4 id="懒汉-or-饿汉"><a href="#懒汉-or-饿汉" class="headerlink" title="懒汉 or 饿汉"></a>懒汉 or 饿汉</h4><p>内部类懒汉单例中通过调用实例时调用内部类的静态属性达到延迟初始化目的。如果使用静态代码块的方式则可以在类初始化阶段完成实例变量的初始化实现饿汉单例，如上面的注释代码所示。</p>
<p>但需要注意生成的 <clinit>() 方法内代码的顺序，一个错误的初始化：</clinit></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Single</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Single single = <span class="keyword">new</span> Single();</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, String&gt; cache;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> &#123;</div><div class="line">        cache = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">        cache.put(<span class="string">"0"</span>, <span class="string">"0"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Single</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == cache) &#123;</div><div class="line">            cache = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">        &#125;</div><div class="line">        cache.put(<span class="string">"1"</span>, <span class="string">"1"</span>);</div><div class="line">        cache.put(<span class="string">"2"</span>, <span class="string">"2"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Single <span class="title">getSingle</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> single;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>根据  <clinit>() 对语句的收集，会先执行 new Single()，然后执行静态代码块，所以 Single() 构造的内容将丢失。</clinit></p>
<h3 id="加锁懒汉单例-1"><a href="#加锁懒汉单例-1" class="headerlink" title="加锁懒汉单例"></a>加锁懒汉单例</h3><p>前面的单例都是线程不安全的。以下的操作不满足原子性，当多个线程访问时会出现竞争：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</div><div class="line">    instance = <span class="keyword">new</span> Singleton();</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> instance;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>要避免这种竞争的产生最简单的方式是使用 Java 提供的内置锁（synchronized）机制来保护同步代码块。当一个线程进入加锁的同步代码块之前会获得锁，直到离开同步代码块时释放锁，当一个线程持有锁时会，其他线程将无法获得锁而被阻塞。</p>
<p>内置锁可以完全避免竞争的产生，但同时产生了严重的性能问题，所有线程访问 getInstance 方法都必须是顺序进行的，而getInstance 的核心逻辑是对第一次访问生效的，其余每次都判断是没有意义的。</p>
<h3 id="双锁懒汉单例-1"><a href="#双锁懒汉单例-1" class="headerlink" title="双锁懒汉单例"></a>双锁懒汉单例</h3><p>双锁懒汉单例也是常见的一种单例写法，其主要改进是确保线程安全的同时避免了每次调用 getInstance 方法时都要加锁，锁操作在大多数场景下都是不必要的，竞争只发生在初始情况下（instance 为 null）时，而之后大部分时间的操作加锁就显得没意义了。双锁可以很好的区分这两种场景：</p>
<ul>
<li>初始情况下（instance 为 null），多个线程同时访问都满足 instance == null，但进一步会在加锁的位置阻塞，以顺序执行</li>
</ul>
<ul>
<li>单例实例产生后，后面的线程再访问时将不满足 instance ==  null 的条件，直接返回实例，从而避免加锁的开销</li>
</ul>
<p>这种做法确实很好的做到加锁同时兼顾了性能，但最大的问题在于人们常常忘记 volatile 关键字，因为原子性和指令重排造成多线程下不安全的操作。</p>
<h4 id="原子操作"><a href="#原子操作" class="headerlink" title="原子操作"></a>原子操作</h4><p>前面已经提到 if 代码块不满足原子性，这里看更局部的地方：instance = new DoubleCheckLockSingleton(); </p>
<p>尽管只是一条语句但它也不是原子操作，在执行过程中会以三条指令执行，伪代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">memory = allocate();  // 1. 分配对象的内存空间</div><div class="line">ctorInstance(memory);  // 2. 初始化对象</div><div class="line">instance = memory;  // 3. 设置 instance 指向刚分配的内存地址</div></pre></td></tr></table></figure>
<h4 id="指令重排"><a href="#指令重排" class="headerlink" title="指令重排"></a>指令重排</h4><p>非原子的操作本身并不影响程序的执行，我们甚至感受不到这是一个非原子的操作。但为了执行效率，指令可以发生重新排序，而指令重排让程序的执行充满了不确定性。上面的三条指令有可能会以下顺序执行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">memory = allocate();  // 1. 分配对象的内存空间</div><div class="line">instance = memory;  // 3. 设置 instance 指向刚分配的内存地址</div><div class="line">ctorInstance(memory);  // 2. 初始化对象</div></pre></td></tr></table></figure>
<p>同样我们对此毫无感受，在单线程下程序的正确性也没有收到影响。然而多线程环境下问题将变得很诡异，比如下面的场景：</p>
<table>
<thead>
<tr>
<th>时间</th>
<th>线程A</th>
<th>线程B</th>
</tr>
</thead>
<tbody>
<tr>
<td>t1</td>
<td>A1:分配对象的内存空间</td>
<td></td>
</tr>
<tr>
<td>t2</td>
<td>A3:设置 instance 执行内存空间</td>
<td></td>
</tr>
<tr>
<td>t3</td>
<td></td>
<td>B1:判断 instance 是否 null</td>
</tr>
<tr>
<td>t4</td>
<td></td>
<td>B2:instance 不为 null，访问 instance 引用对象</td>
</tr>
<tr>
<td>t5</td>
<td>A2:初始化对象</td>
<td></td>
</tr>
<tr>
<td>t6</td>
<td>A4:访问 instance 引用对象</td>
</tr>
</tbody>
</table>
<p>在 t3, t4 时刻，线程B 居然访问到了一个没有完全初始化的对象。</p>
<h4 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h4><p>将实例变量用 volatile 修饰后就可以解决这个问题。在 volatile 背后，JVM 实际做了两件事：</p>
<ol>
<li>每次读取/写入变量都访问线程共享的存储数据，而不是线程私有区域缓存的数据</li>
<li>禁止指令重排优化</li>
</ol>
<p>这样上面演示的可能的重排操作将被避免，在多线程的环境下线程也将不会访问到未完全初始化的对象</p>
<h3 id="改进加锁懒汉单例-1"><a href="#改进加锁懒汉单例-1" class="headerlink" title="改进加锁懒汉单例"></a>改进加锁懒汉单例</h3><p>单例属于创建型的设计模式，所以先看看 Java 中创建对象的几种方式：</p>
<ol>
<li>使用 new 关键字，最常见的方式</li>
<li>反射创建，更具体有两种方式：Class.newInstance 和 Contructor,newInstance</li>
<li>clone 对象，需要实现 Cloneable 接口，并实现 clone 方法</li>
<li>反序列化：需要实现 Serializable 接口</li>
</ol>
<p>对于每种创建方式的禁用方式也很简单：</p>
<ol>
<li>私有构造禁止外部创建</li>
<li>构造方法添加判断逻辑，如果已将判断抛出异常</li>
<li>直接在 clone 方法抛出异常</li>
<li>构造方法添加判断逻辑，定制 readResolve 方法</li>
</ol>
<h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><p>枚举这个东西一直用起来，怪怪的。《Effective Java》里建议的单例实现方式也是使用枚举，但基本没见过有人这么用。具体的使用没什么太多好说的，这里总结一下枚举的相关特性吧。</p>
<p>首先枚举是 Java 的句法糖，枚举最终会被转换为普通类。例如下面定义的枚举：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Color  &#123;  </div><div class="line">  RED,BLUE,BLACK,YELLOW,GREEN  <span class="comment">// 最后没有分号，也没有逗号</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>会被转换成：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Color</span> <span class="keyword">extends</span>  <span class="title">java</span>.<span class="title">lang</span>.<span class="title">Enum</span></span>&#123;   </div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Color RED;   </div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Color BLUE;   </div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Color BLACK;   </div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Color YELLOW;   </div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Color GREEN;   </div><div class="line">  <span class="keyword">static</span> &#123;&#125;;   </div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> Color[] values();   </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Color <span class="title">valueOf</span><span class="params">(java.lang.String)</span></span>;   </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到枚举继承了 Enum，因此枚举获得了如下方法：</p>
<ul>
<li><p>ordinal：返回枚举值在枚举类种的顺序</p>
<p><code>Color.RED.ordinal();  // 返回结果：0</code></p>
</li>
<li><p>name：枚举类型名称</p>
</li>
<li><p>compareTo：比较象与指定对象的顺序</p>
<p><code>Color.RED.compareTo(Color.BLUE);  // 返回结果 -1</code></p>
</li>
<li><p>values：静态方法，获得全部枚举值的数组</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Color[] colors=Color.values();</div><div class="line"><span class="keyword">for</span>(Color c:colors)&#123;</div><div class="line">  System.out.print(c+<span class="string">","</span>); </div><div class="line">&#125;</div><div class="line"><span class="comment">//返回结果：RED,BLUE,BLACK YELLOW,GREEN,</span></div></pre></td></tr></table></figure>
</li>
<li><p>toString：获得枚举常量的名称</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Color c=Color.RED;</div><div class="line">System.out.println(c);<span class="comment">//返回结果: RED</span></div></pre></td></tr></table></figure>
</li>
<li><p>valueOf：静态方法，获得带指定名称的指定枚举类型的枚举常量</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Color.valueOf(<span class="string">"BLUE"</span>);  <span class="comment">// 返回结果: Color.BLUE</span></div></pre></td></tr></table></figure>
</li>
<li><p>equals：比较两个枚举对象的引用</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JVM知识拾遗]]></title>
      <url>https://zhanghtk.github.io/2017/12/08/JVM%E7%9F%A5%E8%AF%86%E6%8B%BE%E9%81%97/</url>
      <content type="html"><![CDATA[<h2 id="运行时数据区域"><a href="#运行时数据区域" class="headerlink" title="运行时数据区域"></a>运行时数据区域</h2><p>谈论到运行时数据区可能有非常多词在脑海中闪现：堆、栈、新生代、老年代、永久区、方法区等等。上面这些概念确实都位于运行时数据区，但从 JVM 功能实现的角度没有这么多概念，例如老年代，新生代都是从垃圾收集的角度去分析。单纯从 JVM 功能实现角度可以用下图概括：</p>
<p><img src="https://camo.githubusercontent.com/8799029281fbeed32ea53e95df7c82042a3dff21/68747470733a2f2f6f6f6f2e306f302e6f6f6f2f323031372f30372f30322f353935383832373332333737312e706e67" alt="运行时数据区"></p>
<h3 id="线程私有区域"><a href="#线程私有区域" class="headerlink" title="线程私有区域"></a>线程私有区域</h3><ul>
<li><p>程序计数器</p>
<p>当先线程所执行的字节码的行号执行器</p>
</li>
<li><p>Java 虚拟机栈</p>
<p>与线程一致的声明周期。由若干个栈帧组成，每个栈帧对应一个方法。栈帧存储局部变量表、操作数栈等信息</p>
</li>
</ul>
<h3 id="线程共享区域"><a href="#线程共享区域" class="headerlink" title="线程共享区域"></a>线程共享区域</h3><ul>
<li><p>Java堆</p>
<p>Java 堆主要用于存放对象实例，所有线程共享的内存区域统称为 Java 堆，但其内部又划分为若干个逻辑区域。从功能的角度上看 Java 堆存放对象实例，可以分为新生代、老年代。</p>
</li>
</ul>
<ul>
<li><p>方法区</p>
<p>Java 堆的一个逻辑区域，但功能上与 Java 堆有明显的区别。主要是存储被虚拟机加载的类信息，常量，静态变量，即时编译器编译后的代码等数据。内部重要区域：运行时常量池。</p>
<p>在方法区这部分有几个混淆的概念：方法区，永久代，元空间：</p>
<ul>
<li>方法区：JVM 规范中定义的区域</li>
<li>永久代：HotSpot 在 JDK1.8 之前对方法区的实现，使用 Java 堆内存</li>
<li>元空间；HotSpot 在 JDK1.8 开始对方法区的实现，该区域使用本地内存</li>
</ul>
</li>
</ul>
<p>《深入理解 Java 虚拟机》一书在第 2 章从内存溢出的角度详细的说明了运行时数据区域（甚至包括了非虚拟机运行时数据区域），个人感觉区域之间层次描述稍弱，内容也较多，从 JVM 运行模型的角度上面的概括更容易理解。</p>
<h2 id="内存分配与回收"><a href="#内存分配与回收" class="headerlink" title="内存分配与回收"></a>内存分配与回收</h2><p>单纯从 JVM 功能实现的角度考虑，对象内存的分配和回收就是对堆空间的操作。但为了高效的自动回收内存，一般把 Java 堆分为新生代和老年代，二者在对象内存分配和回收策略上有所区别。区别的根本原因是为了内存回收，所以先从内存回收策略看起——垃圾收集算法。</p>
<h3 id="垃圾收集算法"><a href="#垃圾收集算法" class="headerlink" title="垃圾收集算法"></a>垃圾收集算法</h3><ul>
<li>标记-清除<ul>
<li>最基本的垃圾收集算法</li>
<li>效率不高；内存碎片</li>
</ul>
</li>
<li>复制算法<ul>
<li>适合“朝生夕死”的对象，新生代收集算法</li>
<li>由三部分组成：两个小块 Survivor 和一个大块 Eden，HotSpot 默认比例8:1:1，每次使用一个 Survivor 和一个 Eden</li>
<li>当 Survivor 空间不足时依赖其他内存进行担保</li>
</ul>
</li>
<li>标记-整理<ul>
<li>适合存活率高对象</li>
<li>标记-清除-整理</li>
</ul>
</li>
</ul>
<h3 id="内存分配"><a href="#内存分配" class="headerlink" title="内存分配"></a>内存分配</h3><p>内存分配没有绝对的准则，采用不同的垃圾收集器，JVM 实现，JVM 参数可能得到不同的分配策略。但有几条普遍策略：</p>
<ul>
<li>对象优先在  Eden 分配</li>
<li>大对象直接进入老年代</li>
<li>长期存活的对象将进入老年代</li>
<li>动态对象年龄判定：如果在 Survivor 中间中相同年龄所有对象大小的综合大于 Survovor 空间一半，年龄大于等于该年龄的对象直接晋升老年代</li>
<li>空间分配担保</li>
</ul>
<h3 id="垃圾收集器"><a href="#垃圾收集器" class="headerlink" title="垃圾收集器"></a>垃圾收集器</h3><p>先放一张垃圾收集器的组合</p>
<p><img src="https://ooo.0o0.ooo/2017/09/19/59c0ee65ee2a4.png" alt="GC.png"></p>
<h4 id="新生代收集器"><a href="#新生代收集器" class="headerlink" title="新生代收集器"></a>新生代收集器</h4><h5 id="Serial"><a href="#Serial" class="headerlink" title="Serial"></a>Serial</h5><p><img src="https://i.loli.net/2017/09/19/59c1060eed6f0.jpg" alt="Serial.jpg"></p>
<p>单线程垃圾收集器，进行垃圾收集的时候需要暂停其他的线程</p>
<h5 id="ParNew"><a href="#ParNew" class="headerlink" title="ParNew"></a>ParNew</h5><p><img src="https://i.loli.net/2017/09/19/59c10658676f9.jpg" alt="PaeNew.jpg"></p>
<p>Serial收集器的多线程版本，许多运行在Server模式下的虚拟机中首选的新生代收集器，可以与CMS收集器配合工作</p>
<h5 id="Parallel-Scavenge"><a href="#Parallel-Scavenge" class="headerlink" title="Parallel Scavenge"></a>Parallel Scavenge</h5><p>并行的多线程收集器，更关注可控制的吞吐量。吞吐量越大，垃圾收集的时间越短。目前没有使用过。</p>
<h4 id="老年代收集器"><a href="#老年代收集器" class="headerlink" title="老年代收集器"></a>老年代收集器</h4><h5 id="Serial-Old"><a href="#Serial-Old" class="headerlink" title="Serial Old"></a>Serial Old</h5><p>Serial收集器的老年代版本，也是一个单线程收集器，采用“标记-整理算法”进行回收。其运行过程与Serial收集器一样。</p>
<p>用途：</p>
<ul>
<li>与Parallel Scavenge收集器搭配使用</li>
<li>作为CMS收集器的后备预案，在并发收集发生 Concurrent Mode Failure 时使用</li>
</ul>
<h5 id="Parallel-Old"><a href="#Parallel-Old" class="headerlink" title="Parallel Old"></a>Parallel Old</h5><p><img src="https://i.loli.net/2017/09/19/59c106f16c0e9.jpg" alt="Parallel Old.jpg"></p>
<p>Parallel Scavenge收集器的老年代版本，使用多线程和“标记-整理”算法进行垃圾回收。与 Parallel Scavenge 收集器配合使用，“吞吐量优先”收集器是这个组合的特点，在注重吞吐量和CPU资源敏感的场合，都可以使用这个组合。</p>
<h5 id="CMS"><a href="#CMS" class="headerlink" title="CMS"></a>CMS</h5><p><img src="https://i.loli.net/2017/09/19/59c1075791807.jpg" alt="1505822517(1).jpg"></p>
<p>为获取最短回收停顿时间而生的老年代垃圾收集器（标记-清除算法）。整个执行过程分为 4 个步骤：</p>
<ul>
<li>初始标记：仅标记 GC Roots 直接可达的对象，需要 STW</li>
<li>并发标记：GC Roots Tracing，并行</li>
<li>重新标记：修正上一步执行中变动的标记记录</li>
<li>并发清除：并行</li>
</ul>
<p>缺点：对 CPU 资源敏感，无法有效处理浮动垃圾，无法有效处理内存碎片</p>
<p>目前我在项目中使用最多的垃圾收集器，从 GC 日志来看，STW 时间确实少，以最近一次本地 GC 日志说明：85% 的 GC 时间持续一秒内，但最大的 STW 时间只有 160 ms，平均 STW 时间 135 ms。</p>
<h5 id="G1-收集器"><a href="#G1-收集器" class="headerlink" title="G1 收集器"></a>G1 收集器</h5><p>目前这个收集器完全没有使用过。从描述上看是神一般的存在。大致思想是将Java堆划分为多个大小相等的Region（独立区域），新生代与老年代都是一部分Region的集合，G1的收集范围则是这一个个Region（化整为零）。</p>
<p><img src="https://i.loli.net/2017/09/19/59c109faa5c94.jpg" alt="1505823191(1).jpg"></p>
<hr>
<p>以上收集器虽然多，但还是有规律可以总结的：</p>
<ul>
<li>Serial：是最原始的新生代收集器</li>
<li>Parnew：多线程版本的 Serial 新生代收集器</li>
<li>Parallel Scavenge：吞吐量优先新生代收集器</li>
<li>Serial Old：最原始的老年代收集器，万能备胎</li>
<li>Parallel Scavenge：吞吐量优先老年代收集器</li>
<li>CMS：多线程版本的老年代收集器</li>
</ul>
<h2 id="备忘录"><a href="#备忘录" class="headerlink" title="备忘录"></a>备忘录</h2><h3 id="虚拟机参数小结"><a href="#虚拟机参数小结" class="headerlink" title="虚拟机参数小结"></a>虚拟机参数小结</h3><table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>-Xms</td>
<td>初始堆大小</td>
</tr>
<tr>
<td>-Xmx</td>
<td>最大堆大小</td>
</tr>
<tr>
<td>-Xmn</td>
<td>新生代大小</td>
</tr>
<tr>
<td>-Xss</td>
<td>每个线程的堆栈大小</td>
</tr>
<tr>
<td>-XX:NewRatio</td>
<td>新生代和老年代的比例</td>
</tr>
<tr>
<td>-XX:SurvivorRatio</td>
<td>新生代 Eden 区和 Survivor区域的比例</td>
</tr>
<tr>
<td>-XX:PermSize</td>
<td>永久代的初始大小</td>
</tr>
<tr>
<td>-XX:MaxPermSize</td>
<td>永久代的最大值</td>
</tr>
<tr>
<td>–XX:MetaspaceSize</td>
<td>元空间的初始大小</td>
</tr>
<tr>
<td>-XX:MaxMetaspaceSize</td>
<td>元空间的最大值</td>
</tr>
<tr>
<td>-XX:MaxTenuringThreshold</td>
<td>超过设置年龄的新生代直接晋升老年代</td>
</tr>
<tr>
<td>-XX:PretenureSizeThreshold</td>
<td>超过设置大小的新生代直接晋升老年代</td>
</tr>
<tr>
<td>-XX:+PrintGC</td>
<td>每次 GC 时打印相关信息</td>
</tr>
<tr>
<td>-XX:+PrintGC Details</td>
<td>每次 GC 时打印详细信息</td>
</tr>
<tr>
<td>-XX:+PrintGCTimeStamps</td>
<td>打印每次 GC 的时间戳</td>
</tr>
<tr>
<td>-Xloggc</td>
<td>是将每次GC事件的相关情况记录到文件中</td>
</tr>
</tbody>
</table>
<h3 id="垃圾收集器参数总结"><a href="#垃圾收集器参数总结" class="headerlink" title="垃圾收集器参数总结"></a>垃圾收集器参数总结</h3><table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>-XX:+UseSerialGC</td>
<td>使用 Serial + Serial Old 收集器组合</td>
</tr>
<tr>
<td>-XX:+UseParNewGC</td>
<td>使用 ParNew + Serial Old 收集器组合</td>
</tr>
<tr>
<td>-XX:+UseConcMarkSweepGC</td>
<td>使用 ParNew + CMS + Serial Old 收集器组合</td>
</tr>
<tr>
<td>-XX:+UseParallelGC</td>
<td>使用 Parallel Scavenge + Serial Old 收集器组合</td>
</tr>
<tr>
<td>-XX:+UseParallelOldGC</td>
<td>使用 Parallel Scavenge + Parallel Old 收集器组合</td>
</tr>
<tr>
<td>-XX:ParallelGCThreads</td>
<td>设置并行 GC 时进行内存回收的线程数</td>
</tr>
<tr>
<td>-XX:GCTimeRatio</td>
<td>Parallel Scavenge 中 GC 时间占比，默认 99，即允许 1% 的 GC 时间。</td>
</tr>
<tr>
<td>-XX:MaxGCPauseMillis</td>
<td>设置 GC 的最大停顿时间，只对 Parallel Scavenge 有效</td>
</tr>
<tr>
<td>-XX:CMSInitiatingOccupancyFraction</td>
<td>设置 CMS 收集器在老年代空间被使用多少后触发垃圾收集</td>
</tr>
<tr>
<td>-XX:+UseCMSCompactAtFullCollection</td>
<td>设置 CMS 收集器在完成垃圾收集后是否要进行一次内存碎片整理</td>
</tr>
<tr>
<td>-XX:+CMSFullGCBeforeCompaction</td>
<td>设置 CMS 收集器在完成若干次垃圾收集后是进行一次内存碎片整理</td>
</tr>
</tbody>
</table>
<h3 id="启动参数的选择"><a href="#启动参数的选择" class="headerlink" title="启动参数的选择"></a>启动参数的选择</h3><p>启动参数大体指定三部分：设置收集器相关配置、设置内存分配相关配置，其他。</p>
<p>对于收集器，目前我我基本上都使用 ParNew（新生代）+ CMS（老年代）+ Serial Old（老年代备用）组合。可能需要指定的参数还有：-XX:ParallelGCThreads，-XX:CMSInitiatingOccupancyFraction，-XX:+UseCMSCompactAtFullCollection，-XX:+CMSFullGCBeforeCompaction。但目前实际上我都没有特殊指定（设置过线程数，但发现效果并不理想）。</p>
<p>对于内存分配，这个就要结合项目和环境的具体信息配置了。</p>
<p>其他部分就包括：对 GC 过程、类加载卸载等信息的输出，异常 Dump 等信息。</p>
<p>完成以上配置后，还需要根据系统运行状况，GC 日志的情况进一步调整参数。对 GC 日志的分析可以使用 <a href="http://gceasy.io/index.jsp" target="_blank" rel="external">gceasy</a> 分析，系统运行状况可以参考后面的文章《JVM 故障发现和排查》。</p>
<hr>
<p>参考：</p>
<ul>
<li>《深入理解 Java 虚拟机》</li>
<li><a href="http://www.infoq.com/cn/articles/Java-PERMGEN-Removed" target="_blank" rel="external">Java永久代去哪儿了</a></li>
<li><a href="http://www.cnblogs.com/paddix/p/5309550.html" target="_blank" rel="external">Java8内存模型—永久代(PermGen)和元空间(Metaspace)</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JVM故障发现排除]]></title>
      <url>https://zhanghtk.github.io/2017/12/08/JVM%E6%95%85%E9%9A%9C%E5%8F%91%E7%8E%B0%E6%8E%92%E9%99%A4/</url>
      <content type="html"><![CDATA[<p>最近做了服务器迁移之后，系统运行过程中出现了几次发现不稳定的情况。这次的经历又回想起之前几次碰到类似的问题，类似的问题往往需要能快速排查定位、处理。但相关类似问题又不是经常能够碰到，每次出现问题都是手忙脚乱的查资料，今天根据《深入理解 Java 虚拟机》和自己简单的经验做一下总结，方便日后使用。</p>
<h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p>目前可用的 JVM 监控工具还是蛮多的，这里只列出实际操作中我使用的几个。其中有命令行工具也有第可视化工具，从使用的便捷性上讲，可视化的工具无疑是更好的。但生产环境处于安全，性能的考虑往往不开放远程连接，这时还是得用命令行工具处理。</p>
<h3 id="命令行工具"><a href="#命令行工具" class="headerlink" title="命令行工具"></a>命令行工具</h3><ul>
<li><p>jps：JVM 进程状况工具，主要作用是查看 LVMID，-v 参数可以输出 JMV 启动参数</p>
</li>
<li><p>jstat：JVM 统计信息监控工具，主要是查看 GC 相关信息：</p>
<ul>
<li>-gc：监视 Java 堆状况</li>
<li>-gccapacity：监视 Java 堆状况，最大，最小空间</li>
<li>-gcutil：监视 Java 堆状况，已使用百分比</li>
</ul>
<p>输出列含义见文末</p>
</li>
<li><p>jinfo：Java 配置信息工具，查看设置 JVM 启动参数</p>
<ul>
<li>查看：-flag &lt; name &gt;：输出指定名称参数值，作为 jps -v 补充</li>
<li>设置：<ul>
<li>-flag [+|-] &lt; name &gt;：设置指定 JVM 参数的布尔值</li>
<li>-flag &lt; name &gt; = &lt; value &gt;：设置指定 JVM 参数的值</li>
</ul>
</li>
</ul>
</li>
<li><p>jmap：Java 内存映像工具，主要参数：</p>
<ul>
<li>-dump：生成快照，例如：-dump:format=b,file=&lt; filename.bin &gt; &lt; pid &gt;</li>
<li>-heap：显示 Java 堆详细信息</li>
<li>-histo：像是堆中对象统计信息</li>
<li>-permstat：以 ClassLoader 为统计口径显示永久代内存状况</li>
</ul>
</li>
<li><p>jstack：Java 堆栈跟踪工具，用于生成 JVM 当前线程快照，-l 参数显示关于加锁信息，-F 参数强制 dump</p>
</li>
</ul>
<h3 id="可视化工具"><a href="#可视化工具" class="headerlink" title="可视化工具"></a>可视化工具</h3><ul>
<li>VisualVM：多合一故障处理工具，这个几乎涵盖了我用到上面命令行的所有功能</li>
<li>MemoryAnalyzerTool：用于分析 dump 堆文件，对比 VisualVM 功能单一，但是提供了报表功能可以协助分析问题</li>
</ul>
<h2 id="问题排查一般思路"><a href="#问题排查一般思路" class="headerlink" title="问题排查一般思路"></a>问题排查一般思路</h2><p>目前我在实际开发过程中碰到的 JVM 问题主要可以分类两类：内存溢出和系统运行缓慢</p>
<h3 id="内存溢出"><a href="#内存溢出" class="headerlink" title="内存溢出"></a>内存溢出</h3><p>这种场景是影响最恶劣，但也是最容易排查的。通常的错误就能告诉说明溢出区域：</p>
<ul>
<li>outOfMemoryError ：年老代内存不足</li>
<li>outOfMemoryError:PermGen Space：永久代内存不足</li>
<li>outOfMemoryError:GC overhead limit exceed：垃圾回收时间占用系统运行时间的98%或以上</li>
</ul>
<p>生产环境碰到这类情况为了确保系统可用，可以先使用 jstat 查看 Java 堆的空间使用情况确定到底是哪部分溢出，其最大可用空间是多少，然后直接扩大该区域空间即可。重启时建议加上 -XX:+HeapDumpOnOutMemoryError 作为启动参数，在下次溢出可以获得快照文件。</p>
<p>上面的做法作为临时解决方案可以解决一般性的问题，但没有系统的快照无法深入分析问题产生的原因，如果想分析问题根源需要在重启前使用 jmap 生成快照。获得快照文件后可以在本地使用可视化工具分析。使用 MemoryAnalyzer 打开快照文件就能获得一个分析报表，里面列出了可能出现泄露的地方。目前我碰到的内存溢出问题一般从这个分析报表里面就可以确定了，如果不能确定就需要根据加载的类，类的实例，引用关系进一步分析了。</p>
<p>我目前碰到的都是 Java 堆的溢出，以上的思路基本可以解决。但除此还有其他的内存溢出需要注意：</p>
<ul>
<li>Direct Memory</li>
<li>线程堆栈：StackOverflowError，OutOfMemoryError：unable to create new native thread</li>
<li>Socket 缓冲区：IOException：Too many open files</li>
</ul>
<h3 id="系统运行缓慢"><a href="#系统运行缓慢" class="headerlink" title="系统运行缓慢"></a>系统运行缓慢</h3><p>系统运行缓慢可能出现的原因就比较多了，通常就是找到导致系统缓慢的具体代码段，然后修复。一般化的解决思路是从系统到应用，从应用到线程。</p>
<p>具体来说：首先使用系统监控工具（例如 top，vmstat）查看当前系统运行状况，确认哪个应用的资源占用过大，是否是 Java 应用的问题；其次使用 jps 获得具体应用的 LVMID，根据 LVMID 查看应用的具体运行状况，如线程情况，系统信息等。还可以根据系统工具 pidstat 进一步查看线程的运行信息来辅助确定问题。以上基本就可以确定问题。</p>
<h3 id="本地应用"><a href="#本地应用" class="headerlink" title="本地应用"></a>本地应用</h3><p>如果是本地应用或者可以远程访问的应用排查起来就更方便了，直接使用 VisualVM 连接上去，从系统到线程的一切信息都了如指掌，还可以直接运行 GC，dump 快照等。</p>
<hr>
<ul>
<li><p>关于工具使用的一些参考：</p>
<p><a href="https://my.oschina.net/feichexia/blog/196575" target="_blank" rel="external">JVM性能调优监控工具jps、jstack、jmap、jhat、jstat、hprof使用详解</a></p>
<p><a href="http://www.lightskystreet.com/2015/09/01/mat_usage/" target="_blank" rel="external">MAT - Memory Analyzer Tool 使用进阶</a></p>
</li>
<li><p>jstat 输出列含义：</p>
<p>S0C：年轻代中第一个survivor的容量 (字节) </p>
<p>S1C：年轻代中第二个survivor的容量 (字节) </p>
<p>S0U：年轻代中第一个survivor目前已使用空间 (字节) </p>
<p>S1U：年轻代中第二个survivor目前已使用空间 (字节) </p>
<p>EC：年轻代中Eden的容量 (字节) </p>
<p>EU：年轻代中Eden目前已使用空间 (字节) </p>
<p>OC：Old代的容量 (字节) </p>
<p>OU：Old代目前已使用空间 (字节) </p>
<p>PC：Perm(持久代)的容量 (字节) </p>
<p>PU：Perm(持久代)目前已使用空间 (字节) </p>
<p>YGC：从应用程序启动到采样时年轻代中gc次数 </p>
<p>YGCT：从应用程序启动到采样时年轻代中gc所用时间(s) </p>
<p>FGC：从应用程序启动到采样时old代(全gc)gc次数 </p>
<p>FGCT：从应用程序启动到采样时old代(全gc)gc所用时间(s) </p>
<p>GCT：从应用程序启动到采样时gc用的总时间(s) </p>
<p>NGCMN：年轻代中初始化(最小)的大小 (字节) </p>
<p>NGCMX：年轻代的最大容量 (字节) </p>
<p>NGC：年轻代中当前的容量 (字节) </p>
<p>OGCMN：old代中初始化(最小)的大小 (字节) </p>
<p>OGCMX：old代的最大容量 (字节) </p>
<p>OGC：old代当前新生成的容量 (字节) </p>
<p>PGCMN：perm代中初始化(最小)的大小 (字节) </p>
<p>PGCMX：perm代的最大容量 (字节) </p>
<p>PGC：perm代当前新生成的容量 (字节) </p>
<p>S0：年轻代中第一个survivor已使用的占当前容量百分比 </p>
<p>S1：年轻代中第二个survivor已使用的占当前容量百分比 </p>
<p>E：年轻代中Eden已使用的占当前容量百分比 </p>
<p>O：old代已使用的占当前容量百分比 </p>
<p>P：perm代已使用的占当前容量百分比 </p>
<p>S0CMX：年轻代中第一个survivor的最大容量 (字节) </p>
<p>S1CMX ：年轻代中第二个survivor的最大容量 (字节) </p>
<p>ECMX：年轻代中Eden的最大容量 (字节) </p>
<p>DSS：当前需要survivor的容量 (字节)（Eden区已满） </p>
<p>TT： 持有次数限制 </p>
<p>MTT ： 最大持有次数限制 </p>
</li>
</ul>
<hr>
<p>  20171208 补充</p>
<p>  目前系统接入了 APM（Application Performance Management） 对整个系统的运行进行监控。监控内容包括但不限 JVM 相关内容，非常值得参考。<br>  <a href="https://github.com/naver/pinpoint" target="_blank" rel="external">APM 传送问</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spring事务行为]]></title>
      <url>https://zhanghtk.github.io/2017/12/08/Spring%E4%BA%8B%E5%8A%A1%E8%A1%8C%E4%B8%BA/</url>
      <content type="html"><![CDATA[<h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><p>原子性：事务是一个不可分割的单位，事务中的操作要么都发生，要么都不发生。</p>
<p>一致性：事务执行前后数据的完整性必须保持一致</p>
<p>隔离性：多个用户并发访问数据库时，一个用户的事务不能被其他用户的事务所干扰，多个并发事务之间数据要相互隔离</p>
<p>持久性：一个事务一旦被提交，它对数据库中的数据的改变就是永久性的，即使数据库发生故障也不应该对其有任何影响</p>
<h3 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h3><p>隔离级别引发的问题：</p>
<ul>
<li>脏读：一个事务读取到了另一个事务改写但还未提交的数据（如果这些数据被回滚，则读到的数据是无效的）</li>
<li>不可重复读：在同一个事务里，多次读取同一数据返回的结果有所不同</li>
<li>幻读：一个事务读取了几行记录后，另一个事务插入（或删除）了一些记录，第一个事务再查询发生不一致</li>
</ul>
<p>隔离级别：</p>
<table>
<thead>
<tr>
<th>隔离级别</th>
<th>含义</th>
<th>脏读</th>
<th>不可重复读</th>
<th>幻读</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>READ_UBCOMMITED</td>
<td>允许读还未提交的改变了的数据</td>
<td>是</td>
<td>是</td>
<td>是</td>
<td></td>
</tr>
<tr>
<td>READ_COMMITED</td>
<td>允许在并发事务应景提交后读取</td>
<td>否</td>
<td>是</td>
<td>是</td>
<td>Oracle 默认</td>
</tr>
<tr>
<td>REREATABLE_READ</td>
<td>对相同字段的多次读取是一致的，除非数据被本事务改变</td>
<td>否</td>
<td>否</td>
<td>是</td>
<td>MySQL默认</td>
</tr>
<tr>
<td>SERIALIZABLE</td>
<td>完全服从 ACID 的隔离级别</td>
<td>否</td>
<td>否</td>
<td>否</td>
</tr>
</tbody>
</table>
<h2 id="Spring-接口"><a href="#Spring-接口" class="headerlink" title="Spring 接口"></a>Spring 接口</h2><p>Spring 事务管理高层抽象主要的接口有：</p>
<ul>
<li>事务管理器：PlatformTranscationManager</li>
<li>事务定义信息：TransactionDefinition</li>
<li>事务具体运行状态：TransactionStatus</li>
</ul>
<p>使用 TransactionDefinition 定义事务信息，由 PlatformTransactionManager 负责执行事务，执行的结果记录在 TransactionStatus。</p>
<h3 id="PlatformTransactionManager"><a href="#PlatformTransactionManager" class="headerlink" title="PlatformTransactionManager"></a>PlatformTransactionManager</h3><p>包含多个实现，可以为不同持久化框架提供不同实现</p>
<table>
<thead>
<tr>
<th>实现</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>DataSourceTransactionManager</td>
<td>使用 Spring JDBC 或 MyBatis 进行持久化数据时使用</td>
</tr>
<tr>
<td>HibernateTransactionManager</td>
<td>使用 Hibernate 进行持久化数据时使用</td>
</tr>
<tr>
<td>JpaTransactionManager</td>
<td>使用 JPA 进行持久化时使用</td>
</tr>
<tr>
<td>JdoTransactionManager</td>
<td>Jdo 持久化机制时使用</td>
</tr>
<tr>
<td>JtaTransactionManager</td>
<td>使用 JTA 管理事务</td>
</tr>
</tbody>
</table>
<h3 id="TransactionDefinition"><a href="#TransactionDefinition" class="headerlink" title="TransactionDefinition"></a>TransactionDefinition</h3><ul>
<li><p>常量</p>
<p>ISOLATION_XXX 定义了事务的隔离级别</p>
<p>PROPAGATION_XXX 定义了事务的传播行为</p>
<p>TIMEOUT_DEFAULT 默认超时</p>
</li>
<li><p>方法</p>
<p>获得事务以上信息</p>
</li>
</ul>
<h4 id="隔离级别-1"><a href="#隔离级别-1" class="headerlink" title="隔离级别"></a>隔离级别</h4><p>Spring 事务隔离级别所有事务隔离级别，默认使用 DB 的事务隔离级别</p>
<h4 id="传播行为"><a href="#传播行为" class="headerlink" title="传播行为"></a>传播行为</h4><p>传播行为解决事务方法相互调用时，事务的处理方式。Spring 事务提供的传播行为：</p>
<table>
<thead>
<tr>
<th>事务传播行为</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>PROPAGATION_REQUIRED</td>
<td>支持当前事务，如果不存在就新建一个</td>
</tr>
<tr>
<td>PROPAGATION_SUPPORTS</td>
<td>支持当前事务，如果不存在，就不使用事务</td>
</tr>
<tr>
<td>PROPAGATION_MANDATORY</td>
<td>支持当前事务，如果不存在，抛出异常</td>
</tr>
<tr>
<td>PROPAGATION_REQUIRES_NEW</td>
<td>如果有事务存在，挂起当前事务，创建一个新的事务</td>
</tr>
<tr>
<td>PROPAGATION_NOT_SUPPORTED</td>
<td>以非事务方式运行，如果有事务存在，挂起当前事务</td>
</tr>
<tr>
<td>PROPAGATION_NEVER</td>
<td>以非事务方式运行，如果有事务存在，抛出异常</td>
</tr>
<tr>
<td>PROPAGATION_NESTED</td>
<td>如果当前事务存在，则嵌套事务（保存点）</td>
</tr>
</tbody>
</table>
<h5 id="PROPAGATION-REQUIRED"><a href="#PROPAGATION-REQUIRED" class="headerlink" title="PROPAGATION_REQUIRED"></a>PROPAGATION_REQUIRED</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Transactional</span>(propagation = Propagation.REQUIRED)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodA</span><span class="params">()</span> </span>&#123;</div><div class="line">  methodB();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Transactional</span>(propagation = Propagation.REQUIRED)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodB</span><span class="params">()</span> </span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line">methodB();  <span class="comment">// 当前上下文不存在事务，methodB 开启一个新的事务</span></div><div class="line">methodA();  <span class="comment">// 当前上下文不存在事务，methodA 开启一个新的事务，当执行内部 methodB() 时，methodB 发现当前上下文有事务，因此就加入到当前事务中来</span></div></pre></td></tr></table></figure>
<h5 id="PROPAGATION-SUPPORTS"><a href="#PROPAGATION-SUPPORTS" class="headerlink" title="PROPAGATION_SUPPORTS"></a>PROPAGATION_SUPPORTS</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Transactional</span>(propagation = Propagation.REQUIRED)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodA</span><span class="params">()</span> </span>&#123;</div><div class="line">  methodB();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Transactional</span>(propagation = Propagation.SUPPORTS)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodB</span><span class="params">()</span> </span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line">methodB();  <span class="comment">// methodB 以非事务的方式执行</span></div><div class="line">mtthodA();  <span class="comment">// 当前上下文不存在事务，methodA 开启一个新的事务，当执行内部 methodB() 时，methodB 加入 methodA 的事务</span></div></pre></td></tr></table></figure>
<h5 id="PROPAGATION-MANDATORY"><a href="#PROPAGATION-MANDATORY" class="headerlink" title="PROPAGATION_MANDATORY"></a>PROPAGATION_MANDATORY</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Transactional</span>(propagation = Propagation.REQUIRED)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodA</span><span class="params">()</span> </span>&#123;</div><div class="line">doSomeThingA();</div><div class="line">  methodB();</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 事务属性为REQUIRES_NEW</span></div><div class="line"><span class="meta">@Transactional</span>(propagation = Propagation.MANDATOR)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodB</span><span class="params">()</span> </span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line">methodB();  <span class="comment">// 当前没有一个活动的事务，则会抛出异常throw new IllegalTransactionStateException(“Transaction propagation ‘mandatory’ but no existing transaction found”);</span></div><div class="line">methodA();  <span class="comment">// 当前上下文不存在事务，methodA 开启一个新的事务，当执行内部 methodB() 时，methodB 加入 methodA 的事务</span></div></pre></td></tr></table></figure>
<h5 id="PROPAGATION-REQUIRES-NEW"><a href="#PROPAGATION-REQUIRES-NEW" class="headerlink" title="PROPAGATION_REQUIRES_NEW"></a>PROPAGATION_REQUIRES_NEW</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Transactional</span>(propagation = Propagation.REQUIRED)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodA</span><span class="params">()</span> </span>&#123;</div><div class="line">  doSomeThing1();</div><div class="line">  methodB();</div><div class="line">  doSomeThing2();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Transactional</span>(propagation = Propagation.REQUIRES_NEW)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodB</span><span class="params">()</span> </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当调用 methodB() ，当前上下文不存在事务，methodB 开启一个新的事务</p>
<p>当调用 methodA() 相当于执行了以下的代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">TransactionManager tm = <span class="keyword">null</span>;</div><div class="line"><span class="keyword">try</span>&#123;</div><div class="line">  <span class="comment">// 获得一个JTA事务管理器</span></div><div class="line">  tm = getTransactionManager();</div><div class="line">  tm.begin();<span class="comment">// 开启一个新的事务</span></div><div class="line">  Transaction ts1 = tm.getTransaction();</div><div class="line">  doSomeThing1();</div><div class="line">  tm.suspend1();<span class="comment">// 挂起当前事务</span></div><div class="line">  <span class="keyword">try</span>&#123;</div><div class="line">    tm.begin();<span class="comment">// 重新开启第二个事务</span></div><div class="line">    Transaction ts2 = tm.getTransaction();</div><div class="line">    methodB();</div><div class="line">    ts2.commit();<span class="comment">// 提交第二个事务</span></div><div class="line">  &#125; Catch(RunTimeException ex) &#123;</div><div class="line">    ts2.rollback();<span class="comment">// 回滚第二个事务</span></div><div class="line">  &#125; <span class="keyword">finally</span> &#123;</div><div class="line">    <span class="comment">// 释放资源</span></div><div class="line">  &#125;</div><div class="line">  <span class="comment">// methodB执行完后，恢复第一个事务</span></div><div class="line">  tm.resume(ts1);</div><div class="line">  doSomeThing2();</div><div class="line">  ts1.commit();<span class="comment">// 提交第一个事务</span></div><div class="line">&#125; <span class="keyword">catch</span>(RunTimeException ex) &#123;</div><div class="line">  ts1.rollback();<span class="comment">// 回滚第一个事务</span></div><div class="line">&#125; <span class="keyword">finally</span> &#123;</div><div class="line">  <span class="comment">// 释放资源</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的 ts1 和 ts2 是两个独立的事务，互不干扰， ts2 是否成功并不依赖于 ts1。如果 methodA 在调用 methodB 方法后的 doSomeThing2 发生异常，methodB 并不受影响结构依然没提交，但 methodA 的其他代码则会被回滚。</p>
<p>使用 PROPAGATION_REQUIRES_NEW 需要使用 JtaTransactionManager 作为事务管理器。</p>
<h5 id="PROPAGATION-NOT-SUPPORTED"><a href="#PROPAGATION-NOT-SUPPORTED" class="headerlink" title="PROPAGATION_NOT_SUPPORTED"></a>PROPAGATION_NOT_SUPPORTED</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Transactional</span>(propagation = Propagation.REQUIRED)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodA</span><span class="params">()</span> </span>&#123;</div><div class="line">  doSomeThing1();</div><div class="line">  methodB();</div><div class="line">  doSomeThing2();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Transactional</span>(propagation = Propagation.PROPAGATION_NOT_SUPPORTED)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodB</span><span class="params">()</span> </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>总是以非事务的形式执行，当 methodA 执行到 methodB(); 时先挂起事务，再执行 methodB(), 完成后再恢复 methodA 的事务继续执行 doSomeThing2 方法。</p>
<p>使用PROPAGATION_NOT_SUPPORTED,也需要使用JtaTransactionManager作为事务管理器。</p>
<h5 id="PROPAGATION-NEVER"><a href="#PROPAGATION-NEVER" class="headerlink" title="PROPAGATION_NEVER"></a>PROPAGATION_NEVER</h5><p>总是非事务地执行，如果存在一个活动事务，则抛出异常。</p>
<h5 id="PROPAGATION-NESTED"><a href="#PROPAGATION-NESTED" class="headerlink" title="PROPAGATION_NESTED"></a>PROPAGATION_NESTED</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Transactional</span>(propagation = Propagation.REQUIRED)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodA</span><span class="params">()</span></span>&#123;</div><div class="line">  doSomeThing1();</div><div class="line">  methodB();</div><div class="line">  doSomeThing2();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Transactional</span>(propagation = Propagation.NEWSTED)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodB</span><span class="params">()</span></span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当调用 methodB() ，则按照 PROPAGATION_REQUIRED 执行，当前上下文不存在事务，methodB 开启一个新的事务</p>
<p>当调用 methodA() 相当于执行了以下的代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">Connection con = <span class="keyword">null</span>;</div><div class="line">Savepoint savepoint = <span class="keyword">null</span>;</div><div class="line"><span class="keyword">try</span>&#123;</div><div class="line">  con = getConnection();</div><div class="line">  con.setAutoCommit(<span class="keyword">false</span>);</div><div class="line">  doSomeThing1();</div><div class="line">  savepoint = con2.setSavepoint();</div><div class="line">  <span class="keyword">try</span>&#123;</div><div class="line">    methodB();</div><div class="line">  &#125; <span class="keyword">catch</span>(RuntimeException ex) &#123;</div><div class="line">    con.rollback(savepoint);</div><div class="line">  &#125; <span class="keyword">finally</span> &#123;</div><div class="line">    <span class="comment">//释放资源</span></div><div class="line">  &#125;</div><div class="line">  doSomeThing2();</div><div class="line">  con.commit();</div><div class="line">&#125; <span class="keyword">catch</span>(RuntimeException ex) &#123;</div><div class="line">  con.rollback();</div><div class="line">&#125; <span class="keyword">finally</span> &#123;</div><div class="line">  <span class="comment">//释放资源</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在调用 methodB 之前，先调用 setSavepoint 方法，保存当前的状态到 savepoint。如果 methodB 执行失败，则恢复到  savepoint 保存的状态。</p>
<p>如果外层事务执行失败，会回滚内层事务所做的动作；</p>
<p>如果内层事务执行失败，不会引起外层事务的回滚；</p>
<p>使用JDBC 3.0驱动时,仅仅支持 DataSourceTransactionManager 作为事务管理器，PlatformTransactionManager的nestedTransactionAllowed属性设为true(属性值默认为false)</p>
<h3 id="TransactionStatus"><a href="#TransactionStatus" class="headerlink" title="TransactionStatus"></a>TransactionStatus</h3><p>维护，获取事务的各种状态</p>
<h2 id="使用-Spring-事务"><a href="#使用-Spring-事务" class="headerlink" title="使用 Spring 事务"></a>使用 Spring 事务</h2><p>Spring 提供编程式和声明式的事务管理，具体的代码实现可以参考：<a href="https://github.com/zhanghTK/spring-tx-test" target="_blank" rel="external">spring-tx-test</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[【SpringBoot】条件注解]]></title>
      <url>https://zhanghtk.github.io/2017/12/08/%E3%80%90SpringBoot%E3%80%91%E6%9D%A1%E4%BB%B6%E6%B3%A8%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h2 id="条件注解"><a href="#条件注解" class="headerlink" title="条件注解"></a>条件注解</h2><h3 id="ConditionOnClass"><a href="#ConditionOnClass" class="headerlink" title="ConditionOnClass"></a>ConditionOnClass</h3><p>以 ConditionOnClass 为例分析：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Target</span>(&#123; ElementType.TYPE, ElementType.METHOD &#125;)</div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@Documented</span></div><div class="line"><span class="meta">@Conditional</span>(OnClassCondition.class)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ConditionalOnClass &#123;</div><div class="line"></div><div class="line">   <span class="comment">// The classes that must be present.</span></div><div class="line">   Class&lt;?&gt;[] value() <span class="keyword">default</span> &#123;&#125;;</div><div class="line"></div><div class="line">   <span class="comment">// The classes names that must be present.</span></div><div class="line">   String[] name() <span class="keyword">default</span> &#123;&#125;;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>ConditionOnClass 注解使用 Conditional 注解修饰：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@Documented</span></div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Conditional &#123;</div><div class="line">  </div><div class="line">   <span class="comment">// All Conditions that must match in order for the component to be registered.</span></div><div class="line">   Class&lt;? extends Condition&gt;[] value();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Conditional 定义了一个条件数组 Condition[]，条件的定义：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Condition</span> </span>&#123;</div><div class="line">   <span class="function"><span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(ConditionContext context, AnnotatedTypeMetadata metadata)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>看一下上面 Conditional 注解使用的 OnClassCondition。</p>
<p>首先其继承于 SpringBootCondition，SpringBoot 中条件注解都继承这个抽象类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBootCondition</span> <span class="keyword">implements</span> <span class="title">Condition</span> </span>&#123;</div><div class="line"></div><div class="line">   <span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(ConditionContext context,</span></span></div><div class="line">         AnnotatedTypeMetadata metadata) &#123;</div><div class="line">      <span class="comment">// 得到类名或者方法名(条件注解可以作用的类或者方法上)</span></div><div class="line">      String classOrMethodName = getClassOrMethodName(metadata);</div><div class="line">      <span class="keyword">try</span> &#123;</div><div class="line">         <span class="comment">// 抽象方法，具体子类实现</span></div><div class="line">         <span class="comment">// ConditionOutcome记录了匹配结果boolean和log信息</span></div><div class="line">         ConditionOutcome outcome = getMatchOutcome(context, metadata);</div><div class="line">         <span class="comment">// log记录一下匹配信息</span></div><div class="line">         logOutcome(classOrMethodName, outcome);</div><div class="line">         <span class="comment">// 报告记录一下匹配信息</span></div><div class="line">         recordEvaluation(context, classOrMethodName, outcome);</div><div class="line">         <span class="keyword">return</span> outcome.isMatch();</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">catch</span> (...) &#123;</div><div class="line">        <span class="comment">// ...</span></div><div class="line">      &#125;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="comment">// 省略其他</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>OnClassCondition 实现：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> ConditionOutcome <span class="title">getMatchOutcome</span><span class="params">(ConditionContext context,</span></span></div><div class="line">      AnnotatedTypeMetadata metadata) &#123;</div><div class="line">   ClassLoader classLoader = context.getClassLoader();</div><div class="line">   ConditionMessage matchMessage = ConditionMessage.empty();</div><div class="line">   <span class="comment">// 得到 @ConditionalOnClass 注解的类</span></div><div class="line">   List&lt;String&gt; onClasses = getCandidates(metadata, ConditionalOnClass.class);</div><div class="line">   <span class="keyword">if</span> (onClasses != <span class="keyword">null</span>) &#123;</div><div class="line">      <span class="comment">// 如果类存在</span></div><div class="line">      <span class="comment">// 得到在类加载器中不存在的类</span></div><div class="line">      List&lt;String&gt; missing = getMatches(onClasses, MatchType.MISSING, classLoader);</div><div class="line">      <span class="keyword">if</span> (!missing.isEmpty()) &#123;</div><div class="line">         <span class="comment">// 如果存在类加载器中不存在对应的类，返回一个匹配失败的 ConditionalOutcome</span></div><div class="line">         <span class="keyword">return</span> ConditionOutcome</div><div class="line">               .noMatch(ConditionMessage.forCondition(ConditionalOnClass.class)</div><div class="line">                     .didNotFind(<span class="string">"required class"</span>, <span class="string">"required classes"</span>)</div><div class="line">                     .items(Style.QUOTE, missing));</div><div class="line">      &#125;</div><div class="line">      <span class="comment">// 如果类加载器中有所有的对应类，匹配信息进行记录</span></div><div class="line">      matchMessage = matchMessage.andCondition(ConditionalOnClass.class)</div><div class="line">            .found(<span class="string">"required class"</span>, <span class="string">"required classes"</span>).items(Style.QUOTE,</div><div class="line">                  getMatches(onClasses, MatchType.PRESENT, classLoader));</div><div class="line">   &#125;</div><div class="line">   <span class="comment">// 对@ConditionalOnMissingClass注解做相同的逻辑处理</span></div><div class="line">   <span class="comment">// @ConditionalOnClass和@ConditionalOnMissingClass可以一起使用</span></div><div class="line">   List&lt;String&gt; onMissingClasses = getCandidates(metadata,</div><div class="line">         ConditionalOnMissingClass.class);</div><div class="line">   <span class="keyword">if</span> (onMissingClasses != <span class="keyword">null</span>) &#123;</div><div class="line">      List&lt;String&gt; present = getMatches(onMissingClasses, MatchType.PRESENT,</div><div class="line">            classLoader);</div><div class="line">      <span class="keyword">if</span> (!present.isEmpty()) &#123;</div><div class="line">         <span class="keyword">return</span> ConditionOutcome.noMatch(</div><div class="line">               ConditionMessage.forCondition(ConditionalOnMissingClass.class)</div><div class="line">                     .found(<span class="string">"unwanted class"</span>, <span class="string">"unwanted classes"</span>)</div><div class="line">                     .items(Style.QUOTE, present));</div><div class="line">      &#125;</div><div class="line">      matchMessage = matchMessage.andCondition(ConditionalOnMissingClass.class)</div><div class="line">            .didNotFind(<span class="string">"unwanted class"</span>, <span class="string">"unwanted classes"</span>).items(Style.QUOTE,</div><div class="line">                  getMatches(onMissingClasses, MatchType.MISSING, classLoader));</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> ConditionOutcome.match(matchMessage);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="ConditionalOnBean"><a href="#ConditionalOnBean" class="headerlink" title="ConditionalOnBean"></a>ConditionalOnBean</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Target</span>(&#123; ElementType.TYPE, ElementType.METHOD &#125;)</div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@Documented</span></div><div class="line"><span class="meta">@Conditional</span>(OnBeanCondition.class)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ConditionalOnBean &#123;</div><div class="line">   <span class="comment">// 匹配的bean类型</span></div><div class="line">   Class&lt;?&gt;[] value() <span class="keyword">default</span> &#123;&#125;;</div><div class="line"></div><div class="line">   <span class="comment">// 匹配的bean类型的类名</span></div><div class="line">   String[] type() <span class="keyword">default</span> &#123;&#125;;</div><div class="line"></div><div class="line">   <span class="comment">// 匹配的bean注解</span></div><div class="line">   Class&lt;? extends Annotation&gt;[] annotation() <span class="keyword">default</span> &#123;&#125;;</div><div class="line"></div><div class="line">   <span class="comment">// 匹配的bean的名字</span></div><div class="line">   String[] name() <span class="keyword">default</span> &#123;&#125;;</div><div class="line"></div><div class="line">   <span class="comment">// 搜索策略</span></div><div class="line">   <span class="comment">// CURRENT(只在当前容器中找)</span></div><div class="line">   <span class="comment">// PARENTS(只在所有的父容器中找；但是不包括当前容器)</span></div><div class="line">   <span class="comment">// ALL(CURRENT和PARENTS的组合)</span></div><div class="line">   <span class="function">SearchStrategy <span class="title">search</span><span class="params">()</span> <span class="keyword">default</span> SearchStrategy.ALL</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>OnBeanCondition 实现：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> ConditionOutcome <span class="title">getMatchOutcome</span><span class="params">(ConditionContext context,</span></span></div><div class="line">      AnnotatedTypeMetadata metadata) &#123;</div><div class="line">   ConditionMessage matchMessage = ConditionMessage.empty();</div><div class="line">   <span class="keyword">if</span> (metadata.isAnnotated(ConditionalOnBean.class.getName())) &#123;</div><div class="line">      <span class="comment">// 针对 @ConditionalOnBean 注解</span></div><div class="line">      <span class="comment">// 构造一个BeanSearchSpec，会从@ConditionalOnBean注解中获取属性，然后设置到BeanSearchSpec中</span></div><div class="line">      BeanSearchSpec spec = <span class="keyword">new</span> BeanSearchSpec(context, metadata,</div><div class="line">            ConditionalOnBean.class);</div><div class="line">      <span class="comment">// 从BeanFactory中根据策略找出所有匹配的bean</span></div><div class="line">      List&lt;String&gt; matching = getMatchingBeans(context, spec);</div><div class="line">      <span class="keyword">if</span> (matching.isEmpty()) &#123;</div><div class="line">         <span class="comment">// 如果没有匹配的bean，返回一个没有匹配成功的ConditionalOutcome</span></div><div class="line">         <span class="keyword">return</span> ConditionOutcome.noMatch(</div><div class="line">               ConditionMessage.forCondition(ConditionalOnBean.class, spec)</div><div class="line">                     .didNotFind(<span class="string">"any beans"</span>).atAll());</div><div class="line">      &#125;</div><div class="line">      <span class="comment">// 如果找到匹配的bean，匹配信息进行记录</span></div><div class="line">      matchMessage = matchMessage.andCondition(ConditionalOnBean.class, spec)</div><div class="line">            .found(<span class="string">"bean"</span>, <span class="string">"beans"</span>).items(Style.QUOTE, matching);</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">if</span> (metadata.isAnnotated(ConditionalOnSingleCandidate.class.getName())) &#123;</div><div class="line">      <span class="comment">// 相同的逻辑，针对@ConditionalOnSingleCandidate注解</span></div><div class="line">      BeanSearchSpec spec = <span class="keyword">new</span> SingleCandidateBeanSearchSpec(context, metadata,</div><div class="line">            ConditionalOnSingleCandidate.class);</div><div class="line">      List&lt;String&gt; matching = getMatchingBeans(context, spec);</div><div class="line">      <span class="keyword">if</span> (matching.isEmpty()) &#123;</div><div class="line">         <span class="keyword">return</span> ConditionOutcome.noMatch(ConditionMessage</div><div class="line">               .forCondition(ConditionalOnSingleCandidate.class, spec)</div><div class="line">               .didNotFind(<span class="string">"any beans"</span>).atAll());</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (!hasSingleAutowireCandidate(context.getBeanFactory(), matching,</div><div class="line">            spec.getStrategy() == SearchStrategy.ALL)) &#123;</div><div class="line">         <span class="comment">// 多了一层判断，判断是否只有一个bean</span></div><div class="line">         <span class="keyword">return</span> ConditionOutcome.noMatch(ConditionMessage</div><div class="line">               .forCondition(ConditionalOnSingleCandidate.class, spec)</div><div class="line">               .didNotFind(<span class="string">"a primary bean from beans"</span>)</div><div class="line">               .items(Style.QUOTE, matching));</div><div class="line">      &#125;</div><div class="line">      matchMessage = matchMessage</div><div class="line">            .andCondition(ConditionalOnSingleCandidate.class, spec)</div><div class="line">            .found(<span class="string">"a primary bean from beans"</span>).items(Style.QUOTE, matching);</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">if</span> (metadata.isAnnotated(ConditionalOnMissingBean.class.getName())) &#123;</div><div class="line">      <span class="comment">// 相同的逻辑，针对 @ConditionalOnMissingBean 注解</span></div><div class="line">      BeanSearchSpec spec = <span class="keyword">new</span> BeanSearchSpec(context, metadata,</div><div class="line">            ConditionalOnMissingBean.class);</div><div class="line">      List&lt;String&gt; matching = getMatchingBeans(context, spec);</div><div class="line">      <span class="keyword">if</span> (!matching.isEmpty()) &#123;</div><div class="line">         <span class="keyword">return</span> ConditionOutcome.noMatch(ConditionMessage</div><div class="line">               .forCondition(ConditionalOnMissingBean.class, spec)</div><div class="line">               .found(<span class="string">"bean"</span>, <span class="string">"beans"</span>).items(Style.QUOTE, matching));</div><div class="line">      &#125;</div><div class="line">      matchMessage = matchMessage.andCondition(ConditionalOnMissingBean.class, spec)</div><div class="line">            .didNotFind(<span class="string">"any beans"</span>).atAll();</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> ConditionOutcome.match(matchMessage);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="条件注解激活"><a href="#条件注解激活" class="headerlink" title="条件注解激活"></a>条件注解激活</h2><p><a href="http://zhangh.tk/2017/07/16/%E3%80%90Spring%E3%80%91%E5%AE%B9%E5%99%A8%E5%88%B7%E6%96%B0/" target="_blank" rel="external">【Spring】容器刷新 </a> 中 invokeBeanFactoryPostProcessors 方法会处理 BeanDefinitionRegistryPostProcessor 和 BeanDefinitionRegistryPostProcessor 的实现。其中 ConfigurationClassPostProcessor 是最低优先级执行的 BeanDefinitionRegistryPostProcessor。</p>
<p>ConfigurationClassPostProcessor 会使用 ConfigurationClassParser 的 ConditionEvaluator 解析所有 @Configuration 注解的bean。</p>
<p>ConfigurationClassParser 使用 ConditionEvaluator 解析：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.conditionEvaluator.shouldSkip(configClass.getMetadata(),</div><div class="line">                                       ConfigurationPhase.PARSE_CONFIGURATION)) &#123;</div><div class="line">  <span class="keyword">return</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>ConditionEvaluator的 shouldSkip 方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldSkip</span><span class="params">(AnnotatedTypeMetadata metadata, ConfigurationPhase phase)</span> </span>&#123;</div><div class="line">   <span class="comment">// 如果这个类没有被@Conditional注解所修饰，不会skip</span></div><div class="line">   <span class="keyword">if</span> (metadata == <span class="keyword">null</span> || !metadata.isAnnotated(Conditional.class.getName())) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">   &#125;</div><div class="line">   <span class="comment">// 如果参数中沒有设置条件注解的生效阶段</span></div><div class="line">   <span class="keyword">if</span> (phase == <span class="keyword">null</span>) &#123;</div><div class="line">      <span class="comment">// 是配置类的话直接使用PARSE_CONFIGURATION阶段</span></div><div class="line">      <span class="keyword">if</span> (metadata <span class="keyword">instanceof</span> AnnotationMetadata &amp;&amp;</div><div class="line">            ConfigurationClassUtils.isConfigurationCandidate((AnnotationMetadata) metadata)) &#123;</div><div class="line">         <span class="keyword">return</span> shouldSkip(metadata, ConfigurationPhase.PARSE_CONFIGURATION);</div><div class="line">      &#125;</div><div class="line">      <span class="comment">// 否则使用REGISTER_BEAN阶段</span></div><div class="line">      <span class="keyword">return</span> shouldSkip(metadata, ConfigurationPhase.REGISTER_BEAN);</div><div class="line">   &#125;</div><div class="line">   <span class="comment">// 获取配置类的条件注解得到条件数据，并添加到集合中</span></div><div class="line">   List&lt;Condition&gt; conditions = <span class="keyword">new</span> ArrayList&lt;Condition&gt;();</div><div class="line">   <span class="keyword">for</span> (String[] conditionClasses : getConditionClasses(metadata)) &#123;</div><div class="line">      <span class="keyword">for</span> (String conditionClass : conditionClasses) &#123;</div><div class="line">         Condition condition = getCondition(conditionClass, <span class="keyword">this</span>.context.getClassLoader());</div><div class="line">         conditions.add(condition);</div><div class="line">      &#125;</div><div class="line">   &#125;</div><div class="line">   <span class="comment">// 对条件集合做个排序</span></div><div class="line">   AnnotationAwareOrderComparator.sort(conditions);</div><div class="line">   <span class="comment">// 遍历条件集合</span></div><div class="line">   <span class="keyword">for</span> (Condition condition : conditions) &#123;</div><div class="line">      ConfigurationPhase requiredPhase = <span class="keyword">null</span>;</div><div class="line">      <span class="keyword">if</span> (condition <span class="keyword">instanceof</span> ConfigurationCondition) &#123;</div><div class="line">         requiredPhase = ((ConfigurationCondition) condition).getConfigurationPhase();</div><div class="line">      &#125;</div><div class="line">      <span class="comment">// 没有这个解析类不需要阶段的判断或者解析类和参数中的阶段一致才会继续进行</span></div><div class="line">      <span class="keyword">if</span> (requiredPhase == <span class="keyword">null</span> || requiredPhase == phase) &#123;</div><div class="line">         <span class="comment">// 不满足条件返回 true</span></div><div class="line">         <span class="keyword">if</span> (!condition.matches(<span class="keyword">this</span>.context, metadata)) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">         &#125;</div><div class="line">      &#125;</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>条件注入激活还是在容器 refresh 过程中，更具体是在 invokeBeanFactoryPostProcessors 方法中解析配置类时，会跳过不满足条件的类。</p>
<hr>
<p>注解条件使用的 demo：<a href="http://fangjian0423.github.io/2017/05/16/springboot-condition-annotation/" target="_blank" rel="external">SpringBoot源码分析之条件注解的底层实现</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[【SpringBoot】配置加载]]></title>
      <url>https://zhanghtk.github.io/2017/09/18/%E3%80%90SpringBoot%E3%80%91%E9%85%8D%E7%BD%AE%E5%8A%A0%E8%BD%BD/</url>
      <content type="html"><![CDATA[<p>前面的文章已经基本讲清楚从 Spring Boot 应用完整的启动过程了，不过中间过程缺少自动配置相关的功能实现说明。</p>
<p>我把功能配置分为两个部分：</p>
<ul>
<li>自动化配置</li>
<li>条件注解</li>
</ul>
<p>以上两个功能极大的简化了 Spring Boot 应用的配置</p>
<h2 id="自动化配置"><a href="#自动化配置" class="headerlink" title="自动化配置"></a>自动化配置</h2><p>要弄清自动化配置的起源就得从入口类的 SpringBootApplication 注解说起：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@EnableAutoConfiguration</span></div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootApplication &#123;</div><div class="line">  <span class="comment">// 省略注解的字段，别名</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>SpringBootApplication 作为一个组合注解，配置的功能是其核心功能，这部分功能由 EnableAutoConfiguration 注解实现。 EnableAutoConfiguration  也是个符合注解：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@Documented</span></div><div class="line"><span class="meta">@Inherited</span></div><div class="line"><span class="meta">@AutoConfigurationPackage</span></div><div class="line"><span class="meta">@Import</span>(&#123;EnableAutoConfigurationImportSelector.class&#125;)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAutoConfiguration &#123;</div><div class="line">    String ENABLED_OVERRIDE_PROPERTY = <span class="string">"spring.boot.enableautoconfiguration"</span>;</div><div class="line">    Class&lt;?&gt;[] exclude() <span class="keyword">default</span> &#123;&#125;;</div><div class="line">    String[] excludeName() <span class="keyword">default</span> &#123;&#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>EnableAutoConfiguration 的关键是导入了 EnableAutoConfigurationImportSelector ，这类继承自 AutoConfigurationImportSelector。在 Spring 容器刷新的过程中的 invokeBeanFactoryPostProcessors 方法会调用到 EnableAutoConfigurationImportSelector 的逻辑：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// EnableAutoConfigurationImportSelector</span></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="keyword">public</span> String[] selectImports(AnnotationMetadata annotationMetadata) &#123;</div><div class="line">   <span class="keyword">if</span> (!isEnabled(annotationMetadata)) &#123;</div><div class="line">      <span class="keyword">return</span> NO_IMPORTS;</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">try</span> &#123;</div><div class="line">      <span class="comment">// 获取注解属性</span></div><div class="line">      AutoConfigurationMetadata autoConfigurationMetadata = AutoConfigurationMetadataLoader</div><div class="line">            .loadMetadata(<span class="keyword">this</span>.beanClassLoader);</div><div class="line">      AnnotationAttributes attributes = getAttributes(annotationMetadata);</div><div class="line">      <span class="comment">// 读取spring.factories属性文件中的数据</span></div><div class="line">      List&lt;String&gt; configurations = getCandidateConfigurations(annotationMetadata,</div><div class="line">            attributes);</div><div class="line">      <span class="comment">// 删除重复的配置类</span></div><div class="line">      configurations = removeDuplicates(configurations);</div><div class="line">      configurations = sort(configurations, autoConfigurationMetadata);</div><div class="line">      <span class="comment">// 找到@EnableAutoConfiguration注解中定义的需要被过滤的配置类</span></div><div class="line">      Set&lt;String&gt; exclusions = getExclusions(annotationMetadata, attributes);</div><div class="line">      checkExcludedClasses(configurations, exclusions);</div><div class="line">      <span class="comment">// 删除这些需要被过滤的配置类</span></div><div class="line">      configurations.removeAll(exclusions);</div><div class="line">      configurations = filter(configurations, autoConfigurationMetadata);</div><div class="line">      fireAutoConfigurationImportListeners(configurations, exclusions);</div><div class="line">      <span class="comment">// 返回最终得到的自动化配置类</span></div><div class="line">      <span class="keyword">return</span> configurations.toArray(<span class="keyword">new</span> String[configurations.size()]);</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">catch</span> (IOException ex) &#123;</div><div class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(ex);</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">protected</span> List&lt;String&gt; <span class="title">getCandidateConfigurations</span><span class="params">(AnnotationMetadata metadata,</span></span></div><div class="line">      AnnotationAttributes attributes) &#123;</div><div class="line">   <span class="comment">// 调用SpringFactoriesLoader的loadFactoryNames静态方法</span></div><div class="line">   <span class="comment">// getSpringFactoriesLoaderFactoryClass方法返回的是EnableAutoConfiguration类对象</span></div><div class="line">   List&lt;String&gt; configurations = SpringFactoriesLoader.loadFactoryNames(</div><div class="line">         getSpringFactoriesLoaderFactoryClass(), getBeanClassLoader());</div><div class="line">   Assert.notEmpty(configurations,</div><div class="line">         <span class="string">"No auto configuration classes found in META-INF/spring.factories. If you "</span></div><div class="line">               + <span class="string">"are using a custom packaging, make sure that file is correct."</span>);</div><div class="line">   <span class="keyword">return</span> configurations;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>EnableAutoConfigurationImportSelector 会使用 SpringFactoriesLoader 加载相应的配置</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// SpringFactoriesLoader </span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">loadFactoryNames</span><span class="params">(Class&lt;?&gt; factoryClass, ClassLoader classLoader)</span> </span>&#123;</div><div class="line">   <span class="comment">// 解析出properties文件中需要的key值</span></div><div class="line">   String factoryClassName = factoryClass.getName();</div><div class="line">   <span class="keyword">try</span> &#123;</div><div class="line">      <span class="comment">// 常量FACTORIES_RESOURCE_LOCATION的值为META-INF/spring.factories</span></div><div class="line">      <span class="comment">// 使用类加载器找META-INF/spring.factories资源</span></div><div class="line">      Enumeration&lt;URL&gt; urls = (classLoader != <span class="keyword">null</span> ? classLoader.getResources(FACTORIES_RESOURCE_LOCATION) :</div><div class="line">            ClassLoader.getSystemResources(FACTORIES_RESOURCE_LOCATION));</div><div class="line">      List&lt;String&gt; result = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">      <span class="keyword">while</span> (urls.hasMoreElements()) &#123;</div><div class="line">         URL url = urls.nextElement();</div><div class="line">         Properties properties = PropertiesLoaderUtils.loadProperties(<span class="keyword">new</span> UrlResource(url));</div><div class="line">         String factoryClassNames = properties.getProperty(factoryClassName);</div><div class="line">         result.addAll(Arrays.asList(StringUtils.commaDelimitedListToStringArray(factoryClassNames)));</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">return</span> result;</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">catch</span> (IOException ex) &#123;</div><div class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Unable to load ["</span> + factoryClass.getName() +</div><div class="line">            <span class="string">"] factories from location ["</span> + FACTORIES_RESOURCE_LOCATION + <span class="string">"]"</span>, ex);</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="条件注解"><a href="#条件注解" class="headerlink" title="条件注解"></a>条件注解</h2><h3 id="条件注解实现"><a href="#条件注解实现" class="headerlink" title="条件注解实现"></a>条件注解实现</h3><p>以常见的 ConditionalOnClass 注解为例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">@Target(&#123; ElementType.TYPE, ElementType.METHOD &#125;)</div><div class="line">@Retention(RetentionPolicy.RUNTIME)</div><div class="line">@Documented</div><div class="line">@Conditional(OnClassCondition.class)</div><div class="line">public @interface ConditionalOnClass &#123;</div><div class="line">   Class&lt;?&gt;[] value() default &#123;&#125;;  // 要匹配的类</div><div class="line">   String[] name() default &#123;&#125;;  // 要匹配的类名</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>必要重要的是 Conditional 注解：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@Retention(RetentionPolicy.RUNTIME)</div><div class="line">@Target(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</div><div class="line">public @interface Conditional &#123;</div><div class="line">   Class&lt;? extends Condition&gt;[] value();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从命名可以看出 Conditional 注解的  value 属性是具体的 Condition 实现，Spring Boot 提供了通用的 Condition 抽象类： SpringBootCondition，其完成了具体匹配逻辑之外的其他模板：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// SpringBootCondition</span></div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(ConditionContext context,</span></span></div><div class="line">      AnnotatedTypeMetadata metadata) &#123;</div><div class="line">   <span class="comment">// 获得类名或方法名</span></div><div class="line">   String classOrMethodName = getClassOrMethodName(metadata);</div><div class="line">   <span class="keyword">try</span> &#123;</div><div class="line">      <span class="comment">// 抽象方法由子类实现匹配逻辑</span></div><div class="line">      <span class="comment">// 返回结构包装了匹配结果和log信息</span></div><div class="line">      ConditionOutcome outcome = getMatchOutcome(context, metadata);</div><div class="line">      <span class="comment">// log</span></div><div class="line">      logOutcome(classOrMethodName, outcome);</div><div class="line">      <span class="comment">// 报告一下</span></div><div class="line">      recordEvaluation(context, classOrMethodName, outcome);</div><div class="line">      <span class="comment">// 返回匹配结果</span></div><div class="line">      <span class="keyword">return</span> outcome.isMatch();</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">catch</span> <span class="comment">// 省略异常处理</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>具体到 ConditionalOnClass 使用的是 OnClassCondition：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> ConditionOutcome <span class="title">getMatchOutcome</span><span class="params">(ConditionContext context,</span></span></div><div class="line">      AnnotatedTypeMetadata metadata) &#123;</div><div class="line">   ClassLoader classLoader = context.getClassLoader();</div><div class="line">   ConditionMessage matchMessage = ConditionMessage.empty();</div><div class="line">   <span class="comment">// 获得 ConditionalOnClass 注解的属性</span></div><div class="line">   List&lt;String&gt; onClasses = getCandidates(metadata, ConditionalOnClass.class);</div><div class="line">   <span class="keyword">if</span> (onClasses != <span class="keyword">null</span>) &#123;</div><div class="line">      <span class="comment">// 属性不为空</span></div><div class="line">      <span class="comment">// 获取具体缺失的类</span></div><div class="line">      List&lt;String&gt; missing = getMatches(onClasses, MatchType.MISSING, classLoader);</div><div class="line">      <span class="keyword">if</span> (!missing.isEmpty()) &#123;</div><div class="line">         <span class="keyword">return</span> ConditionOutcome</div><div class="line">               .noMatch(ConditionMessage.forCondition(ConditionalOnClass.class)</div><div class="line">                     .didNotFind(<span class="string">"required class"</span>, <span class="string">"required classes"</span>)</div><div class="line">                     .items(Style.QUOTE, missing));</div><div class="line">      &#125;</div><div class="line">      matchMessage = matchMessage.andCondition(ConditionalOnClass.class)</div><div class="line">            .found(<span class="string">"required class"</span>, <span class="string">"required classes"</span>).items(Style.QUOTE,</div><div class="line">                  getMatches(onClasses, MatchType.PRESENT, classLoader));</div><div class="line">   &#125;</div><div class="line">   <span class="comment">// 获得 ConditionalOnMissingClass 注解的属性</span></div><div class="line">   List&lt;String&gt; onMissingClasses = getCandidates(metadata,</div><div class="line">         ConditionalOnMissingClass.class);</div><div class="line">   <span class="keyword">if</span> (onMissingClasses != <span class="keyword">null</span>) &#123;</div><div class="line">      List&lt;String&gt; present = getMatches(onMissingClasses, MatchType.PRESENT,</div><div class="line">            classLoader);</div><div class="line">      <span class="keyword">if</span> (!present.isEmpty()) &#123;</div><div class="line">         <span class="keyword">return</span> ConditionOutcome.noMatch(</div><div class="line">               ConditionMessage.forCondition(ConditionalOnMissingClass.class)</div><div class="line">                     .found(<span class="string">"unwanted class"</span>, <span class="string">"unwanted classes"</span>)</div><div class="line">                     .items(Style.QUOTE, present));</div><div class="line">      &#125;</div><div class="line">      matchMessage = matchMessage.andCondition(ConditionalOnMissingClass.class)</div><div class="line">            .didNotFind(<span class="string">"unwanted class"</span>, <span class="string">"unwanted classes"</span>).items(Style.QUOTE,</div><div class="line">                  getMatches(onMissingClasses, MatchType.MISSING, classLoader));</div><div class="line">   &#125;</div><div class="line">   <span class="comment">// 返回全部匹配成功的ConditionalOutcome</span></div><div class="line">   <span class="keyword">return</span> ConditionOutcome.match(matchMessage);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="条件注解激活"><a href="#条件注解激活" class="headerlink" title="条件注解激活"></a>条件注解激活</h3><p>这里又要从 Spring 容器的 refresh 方法说起了，这个方法太重要了。其中的 invokeBeanFactoryPostProcessors 方法调用 BeanFactoryPostProcessor 和 BeanDefinitionRegistryPostProcessor 的处理逻辑，在 bean 实例化阶段开始之前，对注册到容器的 BeanDefinition 保存的原始数据做出修改。与条件注解激活有关的 posstProcessor 是 ConfigurationClassPostProcessor，其实现自 BeanFactoryPostProcessor 。</p>
<p>ConfigurationClassPostProcessor 会从 BeanFactory 中找出所有被 @Configuration 直接或间接注解的类（包括 @Component, @ComponentScan, @Import, @ImportResource 修饰的类）进行解析。对解析的结果使用 ConditionEvaluator 进行过滤判断。判断逻辑：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldSkip</span><span class="params">(AnnotatedTypeMetadata metadata, ConfigurationPhase phase)</span> </span>&#123;</div><div class="line">   <span class="comment">// </span></div><div class="line">   <span class="keyword">if</span> (metadata == <span class="keyword">null</span> || !metadata.isAnnotated(Conditional.class.getName())) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="keyword">if</span> (phase == <span class="keyword">null</span>) &#123;</div><div class="line">      <span class="keyword">if</span> (metadata <span class="keyword">instanceof</span> AnnotationMetadata &amp;&amp;</div><div class="line">            ConfigurationClassUtils.isConfigurationCandidate((AnnotationMetadata) metadata)) &#123;</div><div class="line">         <span class="keyword">return</span> shouldSkip(metadata, ConfigurationPhase.PARSE_CONFIGURATION);</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">return</span> shouldSkip(metadata, ConfigurationPhase.REGISTER_BEAN);</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   List&lt;Condition&gt; conditions = <span class="keyword">new</span> ArrayList&lt;Condition&gt;();</div><div class="line">   <span class="keyword">for</span> (String[] conditionClasses : getConditionClasses(metadata)) &#123;</div><div class="line">      <span class="keyword">for</span> (String conditionClass : conditionClasses) &#123;</div><div class="line">         Condition condition = getCondition(conditionClass, <span class="keyword">this</span>.context.getClassLoader());</div><div class="line">         conditions.add(condition);</div><div class="line">      &#125;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   AnnotationAwareOrderComparator.sort(conditions);</div><div class="line"></div><div class="line">   <span class="keyword">for</span> (Condition condition : conditions) &#123;</div><div class="line">      ConfigurationPhase requiredPhase = <span class="keyword">null</span>;</div><div class="line">      <span class="keyword">if</span> (condition <span class="keyword">instanceof</span> ConfigurationCondition) &#123;</div><div class="line">         requiredPhase = ((ConfigurationCondition) condition).getConfigurationPhase();</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">if</span> (requiredPhase == <span class="keyword">null</span> || requiredPhase == phase) &#123;</div><div class="line">         <span class="keyword">if</span> (!condition.matches(<span class="keyword">this</span>.context, metadata)) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">         &#125;</div><div class="line">      &#125;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其中 ConfigurationCondition 是 Condition 的子接口，内部主要定义了枚举类型表示条件注解生效的阶段：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ConfigurationCondition</span> <span class="keyword">extends</span> <span class="title">Condition</span> </span>&#123;</div><div class="line">   <span class="function">ConfigurationPhase <span class="title">getConfigurationPhase</span><span class="params">()</span></span>;</div><div class="line">   <span class="keyword">enum</span> ConfigurationPhase &#123;</div><div class="line">      PARSE_CONFIGURATION,</div><div class="line">      REGISTER_BEAN</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>完整的 ConfigurationClassPostProcessor 处理逻辑：</p>
<p><img src="https://i.loli.net/2017/08/29/59a4d381568f6.png" alt="configuration-annotation-process.png"></p>
<hr>
<p>参考：<a href="http://fangjian0423.github.io/2017/05/10/springboot-context-refresh/" target="_blank" rel="external">SpringBoot源码分析之Spring容器的refresh过程</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[【SpringBoot】Servlet容器]]></title>
      <url>https://zhanghtk.github.io/2017/08/31/%E3%80%90SpringBoot%E3%80%91Servlet%E5%AE%B9%E5%99%A8/</url>
      <content type="html"><![CDATA[<p>记得自己看 Spring Boot 源码的初衷是对部署时不需要额外的 Servlet 容器的好奇，好像看着看着关注到了其他细节。挖了几个坑就跳过了，今天把之前关于 Spring Boot 与 Servlet 容器的坑填一下。</p>
<p>先回（rang）顾（wo）一（xiang）下（xiang）之前与 Web 环境相关的内容：</p>
<ul>
<li><a href="http://zhangh.tk/2017/06/20/SpringBoot%E5%8C%85%E6%96%87%E4%BB%B6%E6%89%A7%E8%A1%8C%E5%88%86%E6%9E%90/" target="_blank" rel="external">SpringBoot包文件执行分析</a>，这里说到开启了新线程调用应用入口，该线程设置了上下文类加载器 LaunchedURLClassLoader</li>
<li><a href="http://zhangh.tk/2017/07/05/%E3%80%90SpringBoot%E3%80%91SpringApplication%E5%AE%9E%E4%BE%8B%E5%88%9B%E5%BB%BA/" target="_blank" rel="external">【SpringBoot】SpringApplication实例创建</a>，这里说到根据 CLASSPTH 的包含的类推断当前是否是 web 环境</li>
<li><a href="http://zhangh.tk/2017/07/10/%E3%80%90SpringBoot%E3%80%91%E5%AE%B9%E5%99%A8%E5%90%AF%E5%8A%A8/" target="_blank" rel="external">【SpringBoot】容器启动</a>，这里说到根据是否 web 环境创建做相关准备，创建处理 web 环境对应的 Spring容器</li>
<li><a href="http://zhangh.tk/2017/07/16/%E3%80%90Spring%E3%80%91%E5%AE%B9%E5%99%A8%E5%88%B7%E6%96%B0/" target="_blank" rel="external">【Spring容器刷新】</a>，这里说到 Spring 容器生命周期的相关方法</li>
</ul>
<h2 id="Servlet-容器启动"><a href="#Servlet-容器启动" class="headerlink" title="Servlet 容器启动"></a>Servlet 容器启动</h2><p><a href="http://zhangh.tk/2017/07/10/%E3%80%90SpringBoot%E3%80%91%E5%AE%B9%E5%99%A8%E5%90%AF%E5%8A%A8/" target="_blank" rel="external">【SpringBoot】容器启动 </a>中提到的创建处理 web 环境对应的 Spring 容器实际创建的就是 AnnotationConfigEmbeddedWebApplicationContext，这个类是 ApplicationContext 的子类。其分别在 onRefresh 和 finishRefresh 方法中创建和启动 Servlet 容器：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onRefresh</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="keyword">super</span>.onRefresh();</div><div class="line">   <span class="keyword">try</span> &#123;</div><div class="line">      createEmbeddedServletContainer();</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">catch</span> (Throwable ex) &#123;</div><div class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> ApplicationContextException(<span class="string">"Unable to start embedded container"</span>, ex);</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">finishRefresh</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="keyword">super</span>.finishRefresh();</div><div class="line">  EmbeddedServletContainer localContainer = startEmbeddedServletContainer();</div><div class="line">  <span class="keyword">if</span> (localContainer != <span class="keyword">null</span>) &#123;</div><div class="line">    publishEvent(</div><div class="line">	<span class="keyword">new</span> EmbeddedServletContainerInitializedEvent(<span class="keyword">this</span>, localContainer));</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在 Spring 容器生命周期里与 Servlet 容器相关的逻辑封装在以上两个方法，分别用以创建和启动 Servlet 容器。</p>
<h2 id="Servlet-容器创建细节"><a href="#Servlet-容器创建细节" class="headerlink" title="Servlet 容器创建细节"></a>Servlet 容器创建细节</h2><p>上面说到 AnnotationConfigEmbeddedWebApplicationContext 中创建 Servlet 容器，具体的细节如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// AnnotationConfigEmbeddedWebApplicationContext</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">createEmbeddedServletContainer</span><span class="params">()</span> </span>&#123;</div><div class="line">   EmbeddedServletContainer localContainer = <span class="keyword">this</span>.embeddedServletContainer;</div><div class="line">   ServletContext localServletContext = getServletContext();</div><div class="line">   <span class="keyword">if</span> (localContainer == <span class="keyword">null</span> &amp;&amp; localServletContext == <span class="keyword">null</span>) &#123;</div><div class="line">      <span class="comment">// 获取 Servlet 容器工厂</span></div><div class="line">      EmbeddedServletContainerFactory containerFactory = getEmbeddedServletContainerFactory();</div><div class="line">      <span class="comment">// 获取 Servlet 容器初始化器</span></div><div class="line">      <span class="comment">// 使用 Servlet 容器初始化器创建 Servlet 容器</span></div><div class="line">      <span class="keyword">this</span>.embeddedServletContainer = </div><div class="line">        containerFactory.getEmbeddedServletContainer(getSelfInitializer());</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">else</span> <span class="keyword">if</span> (localServletContext != <span class="keyword">null</span>) &#123;</div><div class="line">      <span class="keyword">try</span> &#123;</div><div class="line">         getSelfInitializer().onStartup(localServletContext);</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">catch</span> (ServletException ex) &#123;</div><div class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> ApplicationContextException(<span class="string">"Cannot initialize servlet context"</span>,</div><div class="line">               ex);</div><div class="line">      &#125;</div><div class="line">   &#125;</div><div class="line">   initPropertySources();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>细节可以分为：</p>
<ol>
<li>获取 Servlet 容器工厂</li>
<li>获取 Servlet 容器初始化器</li>
<li>创建 Servlet 容器</li>
</ol>
<h3 id="获取-Servlet-容器工厂"><a href="#获取-Servlet-容器工厂" class="headerlink" title="获取 Servlet 容器工厂"></a>获取 Servlet 容器工厂</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// AnnotationConfigEmbeddedWebApplicationContext</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">protected</span> EmbeddedServletContainerFactory <span class="title">getEmbeddedServletContainerFactory</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="comment">// Use bean names so that we don't consider the hierarchy</span></div><div class="line">   String[] beanNames = getBeanFactory()</div><div class="line">         .getBeanNamesForType(EmbeddedServletContainerFactory.class);</div><div class="line">   <span class="comment">// 省略异常</span></div><div class="line">   <span class="keyword">return</span> getBeanFactory().getBean(beanNames[<span class="number">0</span>],</div><div class="line">         EmbeddedServletContainerFactory.class);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>直接从 Spring 容器里获取 Servlet 容器工厂。一时之间卡住了不知道 EmbeddedServletContainerFactory 这个类时怎么注册到 Spring 容器中的。在网上查了一下发现是 META-INF/spring.factories 里指定了 EmbeddedServletContainerAutoConfiguration 这个配置类。而 EmbeddedServletContainerFactory 是 EmbeddedServletContainerAutoConfiguration 这个自动化配置类中被注册到 Spring 容器中的，关于配置类的注册我又要挖坑了。EmbeddedServletContainerAutoConfiguration：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@AutoConfigureOrder</span>(-<span class="number">2147483648</span>)</div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@ConditionalOnWebApplication</span>  <span class="comment">// 在Web环境下起作用</span></div><div class="line"><span class="meta">@Import</span>(&#123;EmbeddedServletContainerAutoConfiguration.BeanPostProcessorsRegistrar.class&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmbeddedServletContainerAutoConfiguration</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EmbeddedServletContainerAutoConfiguration</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// 在 import 中导入该类</span></div><div class="line">    <span class="comment">// 主要作用是注册 EmbeddedServletContainerCustomizerBeanPostProcessor,</span></div><div class="line">    <span class="comment">// ErrorPageRegistrarBeanPostProcessor</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanPostProcessorsRegistrar</span> </span></div><div class="line">      <span class="keyword">implements</span> <span class="title">ImportBeanDefinitionRegistrar</span>, <span class="title">BeanFactoryAware</span> &#123;</div><div class="line">        <span class="comment">// 省略</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(AnnotationMetadata importingClassMetadata,</span></span></div><div class="line">                                            BeanDefinitionRegistry registry) &#123;</div><div class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.beanFactory != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="comment">// 注册 EmbeddedServletContainerCustomizerBeanPostProcessor</span></div><div class="line">                <span class="keyword">this</span>.registerSyntheticBeanIfMissing(</div><div class="line">                  registry, <span class="string">"embeddedServletContainerCustomizerBeanPostProcessor"</span>, </div><div class="line">                  EmbeddedServletContainerCustomizerBeanPostProcessor.class);</div><div class="line">                <span class="comment">// 注册 ErrorPageRegistrarBeanPostProcessor</span></div><div class="line">                <span class="keyword">this</span>.registerSyntheticBeanIfMissing(</div><div class="line">                  registry, <span class="string">"errorPageRegistrarBeanPostProcessor"</span>, </div><div class="line">                  ErrorPageRegistrarBeanPostProcessor.class);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">registerSyntheticBeanIfMissing</span><span class="params">(BeanDefinitionRegistry registry, </span></span></div><div class="line">                                                    String name, Class&lt;?&gt; beanClass) &#123;</div><div class="line">            <span class="keyword">if</span>(ObjectUtils.isEmpty(<span class="keyword">this</span>.beanFactory.getBeanNamesForType(beanClass, </div><div class="line">                                                                        <span class="keyword">true</span>, <span class="keyword">false</span>))) &#123;</div><div class="line">                RootBeanDefinition beanDefinition = <span class="keyword">new</span> RootBeanDefinition(beanClass);</div><div class="line">                beanDefinition.setSynthetic(<span class="keyword">true</span>);</div><div class="line">                registry.registerBeanDefinition(name, beanDefinition);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 省略 Jetty，Undertow 配置</span></div><div class="line"></div><div class="line">    <span class="meta">@Configuration</span></div><div class="line">    <span class="meta">@ConditionalOnClass</span>(&#123;Servlet.class, Tomcat.class&#125;)</div><div class="line">    <span class="meta">@ConditionalOnMissingBean</span>(</div><div class="line">        value = &#123;EmbeddedServletContainerFactory.class&#125;,</div><div class="line">        search = SearchStrategy.CURRENT</div><div class="line">    )</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">EmbeddedTomcat</span> </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">EmbeddedTomcat</span><span class="params">()</span> </span>&#123;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Bean</span></div><div class="line">        <span class="function"><span class="keyword">public</span> TomcatEmbeddedServletContainerFactory <span class="title">tomcatEmbeddedServletContainerFactory</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="comment">// 注册 EmbeddedServletContainerFactory 的实现类</span></div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> TomcatEmbeddedServletContainerFactory();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当满足特定条件时会注册具体的 EmbeddedServletContainerFactory 实现类，例如 TomcatEmbeddedServletContainerFactory。</p>
<p>这里还看到 注册了 EmbeddedServletContainerCustomizerBeanPostProcessor 和 ErrorPageRegistrarBeanPostProcessor 。简单看了一下 EmbeddedServletContainerCustomizerBeanPostProcessor，这是一个基本的 BeanPostProcessor，具体作用是对 EmbeddedServletContainerCustomizer 的实例进行定制，具体的实现包括：ErrorPageCustomizer，TomcatWebSocketContainerCustomizer，ServerProperties 等。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// EmbeddedServletContainerCustomizerBeanPostProcessor </span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmbeddedServletContainerCustomizerBeanPostProcessor</span></span></div><div class="line">      <span class="keyword">implements</span> <span class="title">BeanPostProcessor</span>, <span class="title">BeanFactoryAware</span> &#123;</div><div class="line"></div><div class="line">   <span class="keyword">private</span> ListableBeanFactory beanFactory;</div><div class="line"></div><div class="line">   <span class="keyword">private</span> List&lt;EmbeddedServletContainerCustomizer&gt; customizers;</div><div class="line"></div><div class="line">   <span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span></span></div><div class="line">         <span class="keyword">throws</span> BeansException &#123;</div><div class="line">      <span class="keyword">if</span> (bean <span class="keyword">instanceof</span> ConfigurableEmbeddedServletContainer) &#123;</div><div class="line">         <span class="comment">// 处理ConfigurableEmbeddedServletContainer类型的bean</span></div><div class="line">         postProcessBeforeInitialization((ConfigurableEmbeddedServletContainer) bean);</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">return</span> bean;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">postProcessBeforeInitialization</span><span class="params">(</span></span></div><div class="line">         ConfigurableEmbeddedServletContainer bean) &#123;</div><div class="line">      <span class="comment">// 对ConfigurableEmbeddedServletContainer类型的bean定制化处理</span></div><div class="line">      <span class="keyword">for</span> (EmbeddedServletContainerCustomizer customizer : getCustomizers()) &#123;</div><div class="line">         customizer.customize(bean);</div><div class="line">      &#125;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">private</span> Collection&lt;EmbeddedServletContainerCustomizer&gt; <span class="title">getCustomizers</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.customizers == <span class="keyword">null</span>) &#123;</div><div class="line">         <span class="comment">// 从容器中找出所有EmbeddedServletContainerCustomizer类型的bean</span></div><div class="line">         <span class="keyword">this</span>.customizers = <span class="keyword">new</span> ArrayList&lt;EmbeddedServletContainerCustomizer&gt;(</div><div class="line">               <span class="keyword">this</span>.beanFactory.getBeansOfType(EmbeddedServletContainerCustomizer.class,</div><div class="line">                                               <span class="keyword">false</span>, <span class="keyword">false</span>).values());</div><div class="line">         Collections.sort(<span class="keyword">this</span>.customizers, AnnotationAwareOrderComparator.INSTANCE);</div><div class="line">         <span class="keyword">this</span>.customizers = Collections.unmodifiableList(<span class="keyword">this</span>.customizers);</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.customizers;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Servlet-容器初始化器"><a href="#Servlet-容器初始化器" class="headerlink" title="Servlet 容器初始化器"></a>Servlet 容器初始化器</h3><p>再回顾一下 Servlet 容器的创建核心逻辑：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">containerFactory.getEmbeddedServletContainer(getSelfInitializer());</div></pre></td></tr></table></figure>
<p>先获取 Servlet 初始化器，然后创建 Servlet 容器</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> org.springframework.boot.web.servlet.<span class="function">ServletContextInitializer <span class="title">getSelfInitializer</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="keyword">return</span> <span class="keyword">new</span> ServletContextInitializer() &#123;</div><div class="line">      <span class="meta">@Override</span></div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStartup</span><span class="params">(ServletContext servletContext)</span> <span class="keyword">throws</span> ServletException </span>&#123;</div><div class="line">         selfInitialize(servletContext);</div><div class="line">      &#125;</div><div class="line">   &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">selfInitialize</span><span class="params">(ServletContext servletContext)</span> <span class="keyword">throws</span> ServletException </span>&#123;</div><div class="line">   <span class="comment">// Servlet 容器准备</span></div><div class="line">   prepareEmbeddedWebApplicationContext(servletContext);</div><div class="line">   <span class="comment">// 初始 scopes</span></div><div class="line">   ConfigurableListableBeanFactory beanFactory = getBeanFactory();</div><div class="line">   ExistingWebApplicationScopes existingScopes = <span class="keyword">new</span> ExistingWebApplicationScopes(</div><div class="line">         beanFactory);</div><div class="line">   WebApplicationContextUtils.registerWebApplicationScopes(beanFactory,</div><div class="line">         getServletContext());</div><div class="line">   existingScopes.restore();</div><div class="line">   <span class="comment">// 注册 web 相关 bean</span></div><div class="line">   WebApplicationContextUtils.registerEnvironmentBeans(beanFactory,</div><div class="line">         getServletContext());</div><div class="line">   <span class="comment">// 初始化 servlet, filter, Listener 并注册</span></div><div class="line">   <span class="keyword">for</span> (ServletContextInitializer beans : getServletContextInitializerBeans()) &#123;</div><div class="line">      beans.onStartup(servletContext);</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 获取 ServletContext 初始化 bean</span></div><div class="line"><span class="function"><span class="keyword">protected</span> Collection&lt;ServletContextInitializer&gt; <span class="title">getServletContextInitializerBeans</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">new</span> ServletContextInitializerBeans(getBeanFactory());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ServletContextInitializerBeans</span><span class="params">(ListableBeanFactory beanFactory)</span> </span>&#123;</div><div class="line">   <span class="keyword">this</span>.initializers = <span class="keyword">new</span> LinkedMultiValueMap&lt;Class&lt;?&gt;, ServletContextInitializer&gt;();</div><div class="line">   <span class="comment">// 添加 ServletContextInitializer 类型的 bean</span></div><div class="line">   addServletContextInitializerBeans(beanFactory);</div><div class="line">   addAdaptableBeans(beanFactory);</div><div class="line">   List&lt;ServletContextInitializer&gt; sortedInitializers = </div><div class="line">     <span class="keyword">new</span> ArrayList&lt;ServletContextInitializer&gt;();</div><div class="line">   <span class="keyword">for</span> (Map.Entry&lt;?, List&lt;ServletContextInitializer&gt;&gt; entry : <span class="keyword">this</span>.initializers.entrySet()) &#123;</div><div class="line">      AnnotationAwareOrderComparator.sort(entry.getValue());</div><div class="line">      sortedInitializers.addAll(entry.getValue());</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">this</span>.sortedList = Collections.unmodifiableList(sortedInitializers);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addServletContextInitializerBeans</span><span class="params">(ListableBeanFactory beanFactory)</span> </span>&#123;</div><div class="line">   <span class="keyword">for</span> (Entry&lt;String, ServletContextInitializer&gt; initializerBean : getOrderedBeansOfType(</div><div class="line">         beanFactory, ServletContextInitializer.class)) &#123;</div><div class="line">      addServletContextInitializerBean(initializerBean.getKey(),</div><div class="line">            initializerBean.getValue(), beanFactory);</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addServletContextInitializerBean</span><span class="params">(String beanName,</span></span></div><div class="line">      ServletContextInitializer initializer, ListableBeanFactory beanFactory) &#123;</div><div class="line">   <span class="keyword">if</span> (initializer <span class="keyword">instanceof</span> ServletRegistrationBean) &#123;</div><div class="line">      <span class="comment">// servlet</span></div><div class="line">      Servlet source = ((ServletRegistrationBean) initializer).getServlet();</div><div class="line">      addServletContextInitializerBean(Servlet.class, beanName, initializer,</div><div class="line">            beanFactory, source);</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">else</span> <span class="keyword">if</span> (initializer <span class="keyword">instanceof</span> FilterRegistrationBean) &#123;</div><div class="line">      <span class="comment">// filter</span></div><div class="line">      Filter source = ((FilterRegistrationBean) initializer).getFilter();</div><div class="line">      addServletContextInitializerBean(Filter.class, beanName, initializer,</div><div class="line">            beanFactory, source);</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">else</span> <span class="keyword">if</span> (initializer <span class="keyword">instanceof</span> DelegatingFilterProxyRegistrationBean) &#123;</div><div class="line">      <span class="comment">// filter</span></div><div class="line">      String source = ((DelegatingFilterProxyRegistrationBean) initializer)</div><div class="line">            .getTargetBeanName();</div><div class="line">      addServletContextInitializerBean(Filter.class, beanName, initializer,</div><div class="line">            beanFactory, source);</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">else</span> <span class="keyword">if</span> (initializer <span class="keyword">instanceof</span> ServletListenerRegistrationBean) &#123;</div><div class="line">      <span class="comment">// listener</span></div><div class="line">      EventListener source = ((ServletListenerRegistrationBean&lt;?&gt;) initializer)</div><div class="line">            .getListener();</div><div class="line">      addServletContextInitializerBean(EventListener.class, beanName, initializer,</div><div class="line">            beanFactory, source);</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">else</span> &#123;</div><div class="line">      addServletContextInitializerBean(ServletContextInitializer.class, beanName,</div><div class="line">            initializer, beanFactory, initializer);</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="创建-Servlet-容器"><a href="#创建-Servlet-容器" class="headerlink" title="创建 Servlet 容器"></a>创建 Servlet 容器</h3><p>以 TomcatEmbeddedServletContainerFactory 的创建容器方法为例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> EmbeddedServletContainer <span class="title">getEmbeddedServletContainer</span><span class="params">(</span></span></div><div class="line">      ServletContextInitializer... initializers) &#123;</div><div class="line">   Tomcat tomcat = <span class="keyword">new</span> Tomcat();</div><div class="line">   File baseDir = (<span class="keyword">this</span>.baseDirectory != <span class="keyword">null</span> ? <span class="keyword">this</span>.baseDirectory</div><div class="line">         : createTempDir(<span class="string">"tomcat"</span>));</div><div class="line">   tomcat.setBaseDir(baseDir.getAbsolutePath());</div><div class="line">   Connector connector = <span class="keyword">new</span> Connector(<span class="keyword">this</span>.protocol);</div><div class="line">   tomcat.getService().addConnector(connector);</div><div class="line">   customizeConnector(connector);</div><div class="line">   tomcat.setConnector(connector);</div><div class="line">   tomcat.getHost().setAutoDeploy(<span class="keyword">false</span>);</div><div class="line">   configureEngine(tomcat.getEngine());</div><div class="line">   <span class="keyword">for</span> (Connector additionalConnector : <span class="keyword">this</span>.additionalTomcatConnectors) &#123;</div><div class="line">      tomcat.getService().addConnector(additionalConnector);</div><div class="line">   &#125;</div><div class="line">   prepareContext(tomcat.getHost(), initializers);</div><div class="line">   <span class="keyword">return</span> getTomcatEmbeddedServletContainer(tomcat);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的代码完成了 Servlet 容器启动前所有的创建，配置动作。</p>
<h2 id="Servlet-容器启动-1"><a href="#Servlet-容器启动-1" class="headerlink" title="Servlet 容器启动"></a>Servlet 容器启动</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> EmbeddedServletContainer <span class="title">startEmbeddedServletContainer</span><span class="params">()</span> </span>&#123;</div><div class="line">   EmbeddedServletContainer localContainer = <span class="keyword">this</span>.embeddedServletContainer;</div><div class="line">   <span class="keyword">if</span> (localContainer != <span class="keyword">null</span>) &#123;</div><div class="line">      localContainer.start();</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> localContainer;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>启动的逻辑并不复杂，直接调用 Servlet 容器的 start 方法。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Spring Boot 使用的内嵌 Servlet 容器启动过程：</p>
<ol>
<li>从 spring.factories 中读取并注册了 EmbeddedServletContainerAutoConfiguration 类</li>
<li>EmbeddedServletContainerAutoConfiguration 注册了 Servlet 容器工厂类</li>
<li>在 Spring 容器生命周期的 onRefresh 方法中开始创建 Servlet 容器<ol>
<li>获取 Servlet 容器工厂</li>
<li>获取 Servlet 相关初始化 bean</li>
<li>配置并创建 Servlet 容器</li>
</ol>
</li>
<li>在 Spring 容器生命周期的 finishRefresh 方法中调用 Servlet 容器的 start 方法启动容器</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spring事件驱动模型与观察者模式]]></title>
      <url>https://zhanghtk.github.io/2017/08/14/Spring%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8%E6%A8%A1%E5%9E%8B%E4%B8%8E%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h2 id="事件驱动模式"><a href="#事件驱动模式" class="headerlink" title="事件驱动模式"></a>事件驱动模式</h2><p>关于事件驱动模式，这又是个大话题了，不是本文的核心关注点，开涛的博客中以用户注册为例子做了<a href="http://jinnianshilongnian.iteye.com/blog/1902886" target="_blank" rel="external">介绍</a>，这里就不做搬运工了。总结起来，事件驱动的关键点：松散耦合对象间的一对多依赖关系。</p>
<p>具体到实现可以在语言层面使用观察者模式进行对象解耦，也可以使用消息队列对服务进行解耦，下面看看观察者模式。</p>
<h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><h3 id="JDK-支持"><a href="#JDK-支持" class="headerlink" title="JDK 支持"></a>JDK 支持</h3><p>JDK 中直接提供了对观察者模式的抽象：</p>
<ul>
<li>被观察者：java.util.Observable</li>
<li>观察者：java.util.Observer</li>
</ul>
<p>JDK 观察者模式的简单使用 <a href="https://github.com/zhanghTK/JPattern/tree/master/src/main/java/tk/zhangh/pattern/behavior/observer" target="_blank" rel="external">demo</a></p>
<p>值得注意的是：JDK 的观察者模式同时支持了 push 和 pull 两种模式，具体来说：</p>
<p>push：每当被观察者（主题）更新，被观察者主动推送消息到各个观察者</p>
<p>pull：每当被观察者（主题）更新，被观察者仅通知观察者已更新，由观察者自行决定更新策略</p>
<h3 id="push-amp-pull"><a href="#push-amp-pull" class="headerlink" title="push &amp; pull"></a>push &amp; pull</h3><p>push 的优点，被观察者（主题）可控：</p>
<ol>
<li>可以实时推送，事件发生后第一时间即可触发通知操作</li>
<li>延迟推送，避开繁忙时间、明确事件发生顺序</li>
</ol>
<p>pull 的优点：</p>
<ol>
<li>减轻被观察者（主题类）负担</li>
<li>更新策略策略自定义，何时更新，更新哪些内容都由观察者自定义</li>
<li>权限管控，被观察者（主题类）可以根据不同主题集中处理权限管控</li>
</ol>
<p>网上看到关系新浪微博的推/拉架构的讨论：</p>
<p><a href="http://www.jianshu.com/p/dfb7fd88cd33" target="_blank" rel="external">软件架构模式-事件驱动不错哦</a></p>
<p><a href="http://www.cnblogs.com/sunli/archive/2010/08/24/twitter_feeds_push_pull.html" target="_blank" rel="external">微博feed系统的推(push)模式和拉(pull)模式和时间分区拉模式架构探讨</a></p>
<h2 id="Spring-事件机制"><a href="#Spring-事件机制" class="headerlink" title="Spring 事件机制"></a>Spring 事件机制</h2><p>其实之前在<a href="http://zhangh.tk/2017/07/05/%E3%80%90SpringBoot%E3%80%91%E7%9B%91%E5%90%AC%E5%99%A8%E7%AF%87/" target="_blank" rel="external">【SpringBoot】监听器篇</a>，<a href="http://zhangh.tk/2017/07/16/%E3%80%90Spring%E3%80%91%E5%AE%B9%E5%99%A8%E5%88%B7%E6%96%B0/" target="_blank" rel="external">【Spring】容器刷新</a> 中已经把 Spring 中的使用到的场景说的七七八八了，这里做一下补充和归纳，合起来阅读效果更佳。</p>
<p>Spring 事件体系包括三个组件：事件，事件监听器，事件广播器。</p>
<h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><p><img src="https://i.loli.net/2017/08/14/5991c0618bfb4.jpeg" alt="Spring 事件"></p>
<p>Spring 默认对 ApplicationEvent 事件提供了如下实现：</p>
<ul>
<li>ContextStoppedEvent：ApplicationContext停止后触发的事件；</li>
<li>ContextRefreshedEvent：ApplicationContext初始化或刷新完成后触发的事件；</li>
<li><p>ContextClosedEvent：ApplicationContext关闭后触发的事件；（如web容器关闭时自动会触发spring容器的关闭，如果是普通java应用，需要调用ctx.registerShutdownHook();注册虚拟机关闭时的钩子才行）</p>
</li>
<li><p>ContextStartedEvent：ApplicationContext启动后触发的事件；</p>
</li>
</ul>
<p>Spring Boot 额外支持的事件类型：</p>
<ul>
<li>ApplicationStartingEvent</li>
<li>ApplicationEnvironmentPreparedEvent</li>
<li>ApplicationFailedEvent</li>
<li>ApplicationPreparedEvent</li>
</ul>
<h3 id="事件监听器"><a href="#事件监听器" class="headerlink" title="事件监听器"></a>事件监听器</h3><p><img src="https://i.loli.net/2017/08/14/5991bfaf3c0a7.jpeg" alt="Spring事件监听器"></p>
<p>Spring 事件监听器注册：<a href="http://zhangh.tk/2017/07/16/%E3%80%90Spring%E3%80%91%E5%AE%B9%E5%99%A8%E5%88%B7%E6%96%B0/#registerListeners" target="_blank" rel="external">Spring 事件监听器注册</a></p>
<p>Spring Boot 事件监听器：<a href="http://zhangh.tk/2017/07/05/%E3%80%90SpringBoot%E3%80%91%E7%9B%91%E5%90%AC%E5%99%A8%E7%AF%87/" target="_blank" rel="external">【SpringBoot】监听器篇</a></p>
<p>自定义事件、事件监听器的使用：</p>
<ul>
<li><a href="https://github.com/zhanghTK/spring-boot-start/tree/master/listener" target="_blank" rel="external">Spring Boot 自定义事件监听器</a></li>
<li><a href="https://github.com/zhanghTK/spring-boot-start/tree/master/refresh" target="_blank" rel="external">Spring 自定义事件监听器</a></li>
</ul>
<h3 id="事件广播器"><a href="#事件广播器" class="headerlink" title="事件广播器"></a>事件广播器</h3><p><img src="https://i.loli.net/2017/08/14/599114f2dda29.png" alt="事件广播器.png"></p>
<p>Spring 事件广播器的初始化：<a href="http://zhangh.tk/2017/07/16/%E3%80%90Spring%E3%80%91%E5%AE%B9%E5%99%A8%E5%88%B7%E6%96%B0/#initMessageSource" target="_blank" rel="external">Spring 事件广播器的初始化</a></p>
<h4 id="事件同步、异步广播"><a href="#事件同步、异步广播" class="headerlink" title="事件同步、异步广播"></a>事件同步、异步广播</h4><p>事件广播：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">multicastEvent</span><span class="params">(<span class="keyword">final</span> ApplicationEvent event, ResolvableType eventType)</span> </span>&#123;</div><div class="line">   ResolvableType type = (eventType != <span class="keyword">null</span> ? eventType : resolveDefaultEventType(event));</div><div class="line">   <span class="keyword">for</span> (<span class="keyword">final</span> ApplicationListener&lt;?&gt; listener : getApplicationListeners(event, type)) &#123;</div><div class="line">      Executor executor = getTaskExecutor();</div><div class="line">      <span class="keyword">if</span> (executor != <span class="keyword">null</span>) &#123;</div><div class="line">         executor.execute(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">               invokeListener(listener, event);</div><div class="line">            &#125;</div><div class="line">         &#125;);</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">else</span> &#123;</div><div class="line">         invokeListener(listener, event);</div><div class="line">      &#125;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>方法一：指定线程池</p>
<p>当未指定线程池时（getTaskExecutor = null），使用同步的方式广播线程，因此可以同步指定线程池开启异步调用。缺点：全局异步，无法对指定的事件进行异步处理。</p>
<p>方法二：@Aync 注解</p>
<p>使用 @Aync 注解指定需要异步调用的事件监听器监听器。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[【重拾网络】DNS]]></title>
      <url>https://zhanghtk.github.io/2017/07/20/%E3%80%90%E9%87%8D%E6%8B%BE%E7%BD%91%E7%BB%9C%E3%80%91DNS/</url>
      <content type="html"><![CDATA[<h2 id="DNS-是什么"><a href="#DNS-是什么" class="headerlink" title="DNS 是什么"></a>DNS 是什么</h2><p>了解网络的同学应该都是知道 DNS的，它提供最基本的从域名到 IP 地址的转换服务。简单可以把 DNS 理解成一个翻译官，这位翻译官每天默默地为我们处理上网请求时域名到 IP 的转换。</p>
<p>上网时每次对域名的请求使用的是 HTTP 协议，而作为翻译官 DNS 发生在HTTP 真实请求之前。尽管 DNS 协议执行在 HTTP 请求之前，但与 HTTP 一样，DNS 也是 TP/IP 协议模型中应用层协议。更具体一点默认使用的是 UDP 的传输方式，端口号为 53 。</p>
<p>补充一下，除了基本的域名到 IP 的转换服务， DNS 还可以提供主机别名，邮件服务器别名，负载均衡功能。</p>
<h2 id="DNS-结构"><a href="#DNS-结构" class="headerlink" title="DNS 结构"></a>DNS 结构</h2><p>从功能上来看，DNS 只提供了非常简单的字符串到字符串的转换服务。类似于程序语言中的字典结构就可以完成映射转换。所以在很多网络结构图中 DNS 服务往往被描述成一台服务器，在客户端与服务器请求之前，首先在 DNS 服务器上查询服务器对应的 IP 即可。我们日常的使用中 DNS 也确实扮演了这样一个默默无闻的角色，运行的过程对用户非常透明。</p>
<p>为了使 DNS 可以做到全球范围的高可用，一台简单的服务器肯定是无法满足的。实际上DNS 根据域名的层级也划分出不同的 DNS 层级。</p>
<h3 id="域名层级"><a href="#域名层级" class="headerlink" title="域名层级"></a>域名层级</h3><p>域名层级的划分示意：</p>
<p><img src="https://ooo.0o0.ooo/2017/07/05/595c6d4dc5144.jpg" alt="Name_schema.jpg"></p>
<p>域名的层级结构：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">主机名.次级域名.顶级域名.根域名</div><div class="line"></div><div class="line">host.sld.tld.root</div></pre></td></tr></table></figure>
<p>以  www.example.com 域名为例，看看域名的划分：</p>
<table>
<thead>
<tr>
<th style="text-align:center">域名</th>
<th style="text-align:center">值</th>
<th style="text-align:center">备注</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">使用的域名</td>
<td style="text-align:center">www.example.com</td>
<td style="text-align:center">日常真实使用的域名</td>
</tr>
<tr>
<td style="text-align:center">真正的域名</td>
<td style="text-align:center">www.example.com.root</td>
<td style="text-align:center">.root通常省略</td>
</tr>
<tr>
<td style="text-align:center">根域名</td>
<td style="text-align:center">.root</td>
<td style="text-align:center">对所有域名</td>
</tr>
<tr>
<td style="text-align:center">顶级域名</td>
<td style="text-align:center">.com</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">次顶级域名</td>
<td style="text-align:center">.example</td>
<td style="text-align:center">用户可注册的</td>
</tr>
<tr>
<td style="text-align:center">三级域名（主机名）</td>
<td style="text-align:center">www</td>
<td style="text-align:center">用户在自己的域里面为服务器分配的名称</td>
</tr>
</tbody>
</table>
<h3 id="DNS-层级"><a href="#DNS-层级" class="headerlink" title="DNS 层级"></a>DNS 层级</h3><p>域名层级结构对应的 DNS 服务结构划分： </p>
<p><img src="https://ooo.0o0.ooo/2017/07/05/595c6c612da55.jpg" alt="Structure_DNS.jpg"></p>
<p>上面 DNS 的层级结构很明显是一个树型的结构，解析的过程就是从根到叶子节点的访问过程。作为基础的网络服务，单节点肯定是不可靠的，所以上图的节点实际中不是孤立存在的，而是由一组服务器构成。例如根节点就对应了全世界 13 台根服务器。</p>
<h2 id="DNS-查询过程"><a href="#DNS-查询过程" class="headerlink" title="DNS 查询过程"></a>DNS 查询过程</h2><p>既然树型的 DNS 的结构不能一步获取到最终查询结果，这里就有两种方式处理处理查询过程了：</p>
<ul>
<li><p>递归查询</p>
<p>客户端发出查询请求后，只接受一个准确的查询结果，而不能是查询的中间过程</p>
</li>
<li><p>迭代查询</p>
<p>客户端发出查询请求后，DNS 服务器不直接回复查询结果，而是告诉客户端另一台 DNS 服务器地址，客户端再向这台 DNS 服务器请求解析，依此循环直到返回查询的结果</p>
</li>
</ul>
<p>两者各有利弊，通常是将两者结合在一起，一个 DNS 的解析大致可以分两个部分：</p>
<ol>
<li>客户端向 Local DNS 的请求，通常这部分使用递归请求</li>
<li>Local DNS 的请求，通常这部分使用迭代请求</li>
</ol>
<p>按照上述规则一个基本的 DNS 解析过程：</p>
<p><img src="https://ooo.0o0.ooo/2017/07/05/595c5beaef747.png" alt="dn-sresolution.png"></p>
<ol>
<li>发出域名解析请求</li>
<li>本机的域名解析器 resolver 程序查询本地缓存和 host 文件中是否为域名的映射关系</li>
<li>本地解析器向 TCP/IP 参数中设置的首选 DNS 服务器（我们叫它 Local DNS 服务器）发起一个递归的查询请求</li>
<li>服务器收到查询时<ol>
<li>如果要查询的域名由 Local DNS 服务器负责解析，则返回解析结果给客户机，完成域名解析，且此解析具有权威性</li>
<li>如果要查询的域名不由 Local DNS 服务器解析，则调用这个 IP 地址映射，完成域名解析，且此解析不具有权威性</li>
</ol>
</li>
<li>根据 Local DNS 服务器的设置（是否递归）进行查询<ol>
<li>如果是迭代查询，Local DNS 就把请求发至13台 Root DNS</li>
<li>如果是递归查询，Local DNS 就会把请求转发至上一级 DNS 服务器，由上一级服务器进行解析，上一级服务器如果不能解析，或找根 DNS 或把转请求转至上上级，以此循环</li>
</ol>
</li>
<li>Root DNS 服务器收到请求后会判断这个域名是谁来授权管理，并会返回一个负责该顶级域名服务器的一个 IP</li>
<li>Local DNS 服务器收到 IP 信息后，将会联系负责 .edu 域的这台服务器</li>
<li>负责 .edu 域的服务器收到请求后，如果自己无法解析，它就会找一个管理 .edu 域的下一级 DNS 服务器地址给 Local DNS 服务器</li>
<li>当 Local DNS 服务器收到这个地址后，就会找 googleplex.edu 域服务器</li>
<li>负责 googleplex.edu 域的服务器接收到请求后，如果自己无法解析，继续找管理 googleplex.edu 域的下一级 DNS 服务器地址给 Local DNS 服务器</li>
<li>当 Local DNS 服务器收到这个地址后，就会找 compsci.googleplex.edu 域服务器</li>
<li>最后 compsci.googleplex.edu 域服务器返回需要解析的域名的 IP 地址给 Local DNS 服务器</li>
<li>Local DNS 服务器缓存这个解析结果（同时也会缓存，6、8、10返回的结果）</li>
<li>Local DNS 服务器同时将结果返回给本机域名解析器</li>
<li>本机缓存解析结果</li>
<li>本机解析器将结果返回给浏览器</li>
<li>浏览器通过返回的 IP 地址发起请求</li>
</ol>
<h2 id="DNS-记录"><a href="#DNS-记录" class="headerlink" title="DNS 记录"></a>DNS 记录</h2><p>资源记录：name, value, type, ttl</p>
<p>ttl：记录存活时间</p>
<p>type 分类：</p>
<ul>
<li>A：name：主机域名，value：IP地址</li>
<li>NS：name：域，value：域的权威域名解析服务的主机域名</li>
<li>CNAME：name：真实域名的别名，value：真实域名</li>
<li>MX：value是与name相对应的邮件服务器</li>
</ul>
<h2 id="其他-DNS-相关"><a href="#其他-DNS-相关" class="headerlink" title="其他 DNS 相关"></a>其他 DNS 相关</h2><h3 id="常见的-DNS-功能说明"><a href="#常见的-DNS-功能说明" class="headerlink" title="常见的 DNS 功能说明"></a>常见的 DNS 功能说明</h3><ul>
<li>权威 DNS： 最终决定域名解析结果的服务器，可以在其上配置具体域名的对应解析结果信息</li>
<li>递归 DNS 或本地 DNS：有域名解析结果的决定权，但代理了用户向权威DNS获取域名解析结果的过程，不属于 DNS 层次体系</li>
<li>公共 DNS：全网开放的递归 DNS，不同于一般的本地 DNS 由 ISP 提供</li>
</ul>
<h3 id="DNS-相关命令"><a href="#DNS-相关命令" class="headerlink" title="DNS 相关命令"></a>DNS 相关命令</h3><ul>
<li>dig</li>
<li>host</li>
<li>nslookup</li>
</ul>
<p>命令的参考：<a href="http://luodw.cc/2015/12/27/dns03/" target="_blank" rel="external">域名解析之dig,host,nslookup命令</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[【重拾网络】应用层]]></title>
      <url>https://zhanghtk.github.io/2017/07/20/%E3%80%90%E9%87%8D%E6%8B%BE%E7%BD%91%E7%BB%9C%E3%80%91%E5%BA%94%E7%94%A8%E5%B1%82/</url>
      <content type="html"><![CDATA[<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><ul>
<li><p>网络应用的体系结构：CS, P2P, 混合</p>
</li>
<li><p>不同端系统上的进程通信方式：跨越计算机网络交换报文</p>
</li>
<li><p>套接字：传输基础设施向进程提供的 API</p>
</li>
<li><p>进程寻址：</p>
<ul>
<li>主机地址：IP</li>
<li>进程标示符：端口号</li>
</ul>
</li>
</ul>
<ul>
<li>网络应用的需求：<ul>
<li>数据丢失/可靠性</li>
<li>时间/延迟</li>
<li>带宽</li>
<li>安全</li>
</ul>
</li>
</ul>
<ul>
<li>传输层提供的服务：<ul>
<li>TCP:<ul>
<li>面向连接</li>
<li>可靠传输</li>
<li>流量控制</li>
<li>拥塞控制</li>
</ul>
</li>
<li>UDP<ul>
<li>无连接</li>
<li>不可靠数据传输</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>  TCP &amp; UDP 都无法提供时间/延时保障、最小带宽保障</p>
<p>  安全传输服务：在 TCP 套接字基础上实现的应用层协议——SSL(Secure Socket Layer)</p>
<h2 id="应用层协议"><a href="#应用层协议" class="headerlink" title="应用层协议"></a>应用层协议</h2><p>应用层协议定义的内容：</p>
<ul>
<li>交换的报文类型</li>
<li>各种报文语法</li>
<li>字段语义</li>
<li>一个进程何时 &amp; 如何发送报文</li>
</ul>
<h3 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h3><p>这部分不知道怎么说啊，内容有点多、有点杂，简单记一下，尤其是众多头部。<br>简单记一下，挖个坑后期填。</p>
<ul>
<li>连接类型：<ul>
<li>非持久连接：HTTP 1.0 版本默认</li>
<li>持久连接：HTTP 1.1 版本默认<ul>
<li>无流水线：使用一个 TCP 连接，一个一个请求</li>
<li>流水线：并行请求</li>
</ul>
</li>
</ul>
</li>
</ul>
<ul>
<li>各种头部信息</li>
</ul>
<ul>
<li>无状态 &amp; Cokite 技术</li>
</ul>
<ul>
<li><p>代理 &amp; 缓存</p>
<p>条件 GET</p>
<p>对于相同 IP 的访问，HOST 头部完整指定主机名/域名URI </p>
</li>
</ul>
<h3 id="EMAIL"><a href="#EMAIL" class="headerlink" title="EMAIL"></a>EMAIL</h3><p>邮件系统构成：用户代理，邮件服务器（邮箱，报文队列）、简单邮件传输协议</p>
<p>邮件协议基于命令/响应模式</p>
<ul>
<li>命令：ASCII 文本</li>
<li>响应：状态代码和语句</li>
</ul>
<h4 id="SMTP"><a href="#SMTP" class="headerlink" title="SMTP"></a>SMTP</h4><p>简单邮件传输协议，特点：</p>
<ol>
<li>邮件报文体只能采用简单的 7 比特 ASCII 表示</li>
<li>一般不使用中间邮件服务器，邮件不在中间某个服务器留存</li>
<li>使用 TCP 可靠数据传输服务，端口 25</li>
<li>MIME：多媒体邮件扩展，头部增加 MIME 内容类型</li>
</ol>
<p>与 HTTP 比较：</p>
<ol>
<li>都建立在 TCP 连接，都是 持续连接</li>
<li>HTTP 是拉协议，SMTP 是推协议</li>
<li>SMTP 要求每个报文使用 7 比特 ASCII, HTTP 不受该限制</li>
<li>对混合消息处理，HTTP 把每个对象封装在一个相应报文里，SMTP 把所有对象放在一个报文</li>
</ol>
<h4 id="POP3-amp-IMAP"><a href="#POP3-amp-IMAP" class="headerlink" title="POP3 &amp; IMAP"></a>POP3 &amp; IMAP</h4><p>邮件访问协议</p>
<p>POP3 特点：</p>
<ol>
<li>实现简单</li>
<li>使用 TCP 连接，110 端口</li>
<li>三个阶段：<ol>
<li>认证</li>
<li>事务处理</li>
<li>退出</li>
</ol>
</li>
<li>无状态</li>
</ol>
<p>IMAP 特点：</p>
<ol>
<li>实现相对复杂</li>
<li>使用 TCP 连接，端口 145</li>
<li>可以把邮件与文件夹联系起来</li>
<li>允许用户代理获取邮件</li>
<li>有状态</li>
</ol>
<h4 id="TELNET-收发邮件-demo"><a href="#TELNET-收发邮件-demo" class="headerlink" title="TELNET 收发邮件 demo"></a>TELNET 收发邮件 demo</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">// 使用 SMTP 发邮件</div><div class="line">telnet smtp.163.com 25</div><div class="line"></div><div class="line">HELO 163.com</div><div class="line"></div><div class="line">AUTH LOGIN</div><div class="line"></div><div class="line">Base64(YourUsername)</div><div class="line"></div><div class="line">Base64(YourPassword)</div><div class="line"></div><div class="line">MAIL FROM: &lt;$&#123;Your Email Address&#125;&gt;</div><div class="line"></div><div class="line">RCPT TO: &lt;$&#123;Receiver&apos;s Email Address&#125;&gt;</div><div class="line"></div><div class="line">data</div><div class="line"></div><div class="line">Subject:$&#123;SUBJECT&#125;</div><div class="line">From:$&#123;SENDER&#125;</div><div class="line">To:$&#123;RECEIVER&#125;</div><div class="line"></div><div class="line">$&#123;DATA&#125;</div><div class="line">.</div><div class="line"></div><div class="line">// 使用 POP3 收邮件</div><div class="line">Telnet pop3.163.com 110</div><div class="line"></div><div class="line">User:YourUsername</div><div class="line"></div><div class="line">Pass:yourPassword</div><div class="line"></div><div class="line">List</div><div class="line"></div><div class="line">Retr 邮件编号</div><div class="line"></div><div class="line">Dele 邮件编号</div><div class="line"></div><div class="line">Quit</div></pre></td></tr></table></figure>
<h3 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h3><p><a href="http://zhangh.tk/2017/07/20/【重拾网络】DNS/" target="_blank" rel="external">【重拾网络】DNS</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[【重拾网络】基本概念]]></title>
      <url>https://zhanghtk.github.io/2017/07/19/%E3%80%90%E9%87%8D%E6%8B%BE%E7%BD%91%E7%BB%9C%E3%80%91%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
      <content type="html"><![CDATA[<p>Netty 还没看几页就碰到 TCP 接收滑块的问题。隐约记得传输层协议学习的时候看过，但也忘的七七八八的了。毕业两年网络相关的知识也差不多丢完了（就好像自己以前会一样），从本文开始回顾一下网络知识。目标至少网络层以上的主要协议大致过程要清楚，尤其是 Web 开发常见协议，总结的顺序依据《计算机网络——自顶向下学习方法》。</p>
<h2 id="网络构成"><a href="#网络构成" class="headerlink" title="网络构成"></a>网络构成</h2><h3 id="网络边缘"><a href="#网络边缘" class="headerlink" title="网络边缘"></a>网络边缘</h3><ul>
<li>主机</li>
<li>网络应用，模型<ul>
<li>C/S</li>
<li>P2P</li>
</ul>
</li>
</ul>
<h3 id="接入网络"><a href="#接入网络" class="headerlink" title="接入网络"></a>接入网络</h3><ul>
<li>目的：将网络边缘接入网络核心（边缘路由器）</li>
<li>物理介质：有线、无线通信链路</li>
</ul>
<ul>
<li>分类：家庭、机构、移动</li>
<li>关心主题：带宽、独占 / 共享</li>
</ul>
<h4 id="DSL"><a href="#DSL" class="headerlink" title="DSL"></a>DSL</h4><ul>
<li>利用电话线</li>
<li>频分多路复用<ul>
<li>0 ~ 4HKZ：电话</li>
<li>4KHZ ~ 50KHZ：上行</li>
<li>50KHZ ~ 1MHZ：下行</li>
</ul>
</li>
<li>带宽：上行 &lt; 2.5 或 1 Mbps, 下行 &gt; 24 或 10 Mbps</li>
<li>独占</li>
</ul>
<h4 id="电缆"><a href="#电缆" class="headerlink" title="电缆"></a>电缆</h4><ul>
<li>电视网络</li>
<li>频分多路复用</li>
<li>HFC：混合光纤同轴电缆</li>
<li>带宽：上行 2Mbps，下行 20Mbps</li>
<li>共享</li>
</ul>
<h4 id="以太网"><a href="#以太网" class="headerlink" title="以太网"></a>以太网</h4><ul>
<li>机构使用</li>
<li>带宽：10Mbps, 100Mbps, 1Gbps, 10Gbps</li>
</ul>
<h4 id="无线接入"><a href="#无线接入" class="headerlink" title="无线接入"></a>无线接入</h4><ul>
<li>共享无线网络</li>
<li>无线局域网：802.11 b/g, 11Mbps, 50Mbps</li>
<li>广域无线接入</li>
</ul>
<h3 id="网络核心"><a href="#网络核心" class="headerlink" title="网络核心"></a>网络核心</h3><p>目的：数据交换，从源主机通过核心网络送到目的主机</p>
<h4 id="互联"><a href="#互联" class="headerlink" title="互联"></a>互联</h4><ul>
<li>路由：确定分组从源主机到目的主机的传输路径</li>
<li>转发：将分组从路由器输入端口交换至正确的输出端口</li>
</ul>
<h4 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h4><p>网络的网络——Internet</p>
<ul>
<li>端系统通过接入 ISP 连接到 Internet</li>
<li>ISP 必须进一步互联，构成复杂网络</li>
</ul>
<p>ISP 互联方式：</p>
<ol>
<li><p>直接彼此互联</p>
<p>需要 N * (N-1) / 2 条连接</p>
</li>
<li><p>每个接入 ISP 连接到一个国家/全球ISP</p>
<p>引入交换设备简化了方式 1，问题：1. 距离；规模：瓶颈，端口</p>
</li>
<li><p>在方式 2 基础引入竞争者——二级，三级 ISP</p>
<p>引入交换网络，解决连通性、网络规模问题</p>
</li>
<li><p>引入区域 ISP，连接端系统和接入 ISP</p>
</li>
<li><p>内容提供网络</p>
</li>
</ol>
<h2 id="数据交换"><a href="#数据交换" class="headerlink" title="数据交换"></a>数据交换</h2><ul>
<li>交换含义：<ol>
<li>动态转义</li>
<li>动态分配传输资源</li>
</ol>
</li>
<li>数据交换方式：电路、报文、分组</li>
</ul>
<h3 id="多路复用技术"><a href="#多路复用技术" class="headerlink" title="多路复用技术"></a>多路复用技术</h3><ul>
<li>链路/网络资源划分为资源片</li>
<li>将资源片分配给各路呼叫</li>
<li>每路呼叫独占分配到的资源进行通信</li>
<li>资源可被闲置</li>
<li>分配<ul>
<li>频分复用 FDM，有先电视网络，占用不同频带</li>
<li>时分复用 TDM，占用不同时间片</li>
<li>波分复用 WDM，光的频分复用</li>
<li>码分复用 CDM，无线链路共享</li>
</ul>
</li>
</ul>
<h3 id="交换技术"><a href="#交换技术" class="headerlink" title="交换技术"></a>交换技术</h3><h4 id="电路交换"><a href="#电路交换" class="headerlink" title="电路交换"></a>电路交换</h4><ul>
<li>典型：电话网络</li>
<li>过程：<ol>
<li>建立连接</li>
<li>通信</li>
<li>释放连接</li>
</ol>
</li>
<li>特点：独占资源</li>
<li>中继线共享——多路复用</li>
</ul>
<h4 id="报文交换"><a href="#报文交换" class="headerlink" title="报文交换"></a>报文交换</h4><p>源（应用）发送信息整体，典型：电报</p>
<h4 id="分组交换"><a href="#分组交换" class="headerlink" title="分组交换"></a>分组交换</h4><p>分组：报文拆分出来的较小的数据包</p>
<p>过程：报文拆分、重复</p>
<p>额外开销：1. 拆分，重组；2. 头信息</p>
<h4 id="报文、分组交换异同"><a href="#报文、分组交换异同" class="headerlink" title="报文、分组交换异同"></a>报文、分组交换异同</h4><ul>
<li>同：过程都是存储-转发</li>
<li>异：交换过程是否查分数据</li>
</ul>
<h4 id="分组、电路交换特点"><a href="#分组、电路交换特点" class="headerlink" title="分组、电路交换特点"></a>分组、电路交换特点</h4><ul>
<li>分组不独占，电路独占资源</li>
<li>分组更适合突发数据传输网络</li>
<li>分组特点：<ul>
<li>无需呼叫建立</li>
<li>资源充分共享</li>
<li>可能产生拥塞：分组延迟，丢失</li>
</ul>
</li>
</ul>
<h4 id="分组、报文耗时比较"><a href="#分组、报文耗时比较" class="headerlink" title="分组、报文耗时比较"></a>分组、报文耗时比较</h4><p>发送 M bits 的报文，链路带宽为 R bps，分组长 L bits，跳步数 h，路由器数 n。（n = h -1）</p>
<p>报文：M / R * h</p>
<p>报文：(M / R) + (h -1) * L / R -&gt; M / R + nL / R</p>
<h4 id="分组交换时延-amp-丢包-amp-吞吐量"><a href="#分组交换时延-amp-丢包-amp-吞吐量" class="headerlink" title="分组交换时延 &amp; 丢包 &amp; 吞吐量"></a>分组交换时延 &amp; 丢包 &amp; 吞吐量</h4><ul>
<li><p>时延：结点处理时延、排队时延、传输时延、传播时延</p>
</li>
<li><p>流量强度</p>
<p>流量强度：分组 * 分组到达平均速率 / 传输速率</p>
<p>流量强度 &gt; 1：表示比特到达平均速率超过队列传输出去速率，队列趋于无界增加，排队时延趋于无穷大</p>
</li>
<li><p>丢包：到达的分组排满一个队列后，路由器将丢弃分组</p>
</li>
<li><p>吞吐量：取决于数据流过的链路的传输速率，近似为沿着源和目的地之间路径的最小传输速率</p>
</li>
</ul>
<h2 id="网络分层"><a href="#网络分层" class="headerlink" title="网络分层"></a>网络分层</h2><h3 id="TCP-IP-五层模型"><a href="#TCP-IP-五层模型" class="headerlink" title="TCP/IP 五层模型"></a>TCP/IP 五层模型</h3><table>
<thead>
<tr>
<th style="text-align:center">协议</th>
<th style="text-align:center">主要作用</th>
<th style="text-align:center">关注点</th>
<th>常见协议</th>
<th>协议数据单位</th>
<th>物理设备</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">应用层</td>
<td style="text-align:center">为应用程序提供网络传输接口</td>
<td style="text-align:center">进程如何通信</td>
<td>HTTP, DNS</td>
<td>PDU</td>
<td></td>
</tr>
<tr>
<td style="text-align:center">传输层</td>
<td style="text-align:center">负责将上层数据分段并提供端到端的传输</td>
<td style="text-align:center">端到端的差错控制和流量控制</td>
<td>TCP, UDP</td>
<td>segment</td>
<td></td>
</tr>
<tr>
<td style="text-align:center">网络层</td>
<td style="text-align:center">网络地址翻译成对应的物理地 ，解决如何将数据从发送方路由到接收方</td>
<td style="text-align:center">对子网间的数据包进行路由选择，实现拥塞控制、网际互连等功能</td>
<td>ARP, IP</td>
<td>packet</td>
<td>路由器</td>
</tr>
<tr>
<td style="text-align:center">连接层</td>
<td style="text-align:center">控制网络层与物理层之间的通信，在不可靠的物理介质上提供可靠的传输。</td>
<td style="text-align:center">物理地址寻址、数据的成帧、流量控制、数据的检错、重发等</td>
<td></td>
<td>frame</td>
<td>交换机，网桥</td>
</tr>
<tr>
<td style="text-align:center">物理层</td>
<td style="text-align:center">为上层协议提供了一个传输数据的物理媒体</td>
<td style="text-align:center">规定了激活、维持、关闭通信端点之间的机械特性、电气特性、功能特性以及过程特性</td>
<td></td>
<td>bit</td>
<td>集线器，中继器</td>
</tr>
</tbody>
</table>
<p>为什么强调五层呢？因为还有个 TCP/IP 四层协议把链路层和物理层合并了，统称为网络接口层</p>
<h3 id="OSI-模型"><a href="#OSI-模型" class="headerlink" title="OSI 模型"></a>OSI 模型</h3><p>实际上 TCP/IP 模型是从 OSI 模型演化来的。学院派先搞出的 OSI 模型，工业使用了更简化的 TCP/IP 协议。</p>
<p>具体表现是 TCP/IP 协议把 OSI 的应用层、表示层、会话层合同为应用层。</p>
<h3 id="分层的过程："><a href="#分层的过程：" class="headerlink" title="分层的过程："></a>分层的过程：</h3><ol>
<li>发送方应用程序的数据总是从最上层开始，层层向下，最终经由物理层发送出去</li>
<li>接收方的物理层接收到数据后，层层向上，最终经由应用层分发到具体的应用程序进程中</li>
<li>在数据层层向下的过程中，每一层都会对数据进行一些封装处理（如打包或者编码）</li>
<li>在数据层层向上的过程中，每一层都会对数据进行一些逆处理（如解包或者解码）</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[【Netty】IO模型]]></title>
      <url>https://zhanghtk.github.io/2017/07/17/%E3%80%90Netty%E3%80%91IO%E6%A8%A1%E5%9E%8B/</url>
      <content type="html"><![CDATA[<h2 id="网络-IO-模型"><a href="#网络-IO-模型" class="headerlink" title="网络 IO 模型"></a>网络 IO 模型</h2><p>UNIX 网络编程对 IO 模型分类， UNIX 提供 5 种 IO 模型</p>
<p>在这 5 个 IO 模型之前，先看看这五个 IO 模型最后的关注点：</p>
<h3 id="用户-amp-内核空间"><a href="#用户-amp-内核空间" class="headerlink" title="用户 &amp; 内核空间"></a>用户 &amp; 内核空间</h3><p>内核：操作系统的核心，独立于普通的应用程序，可以访问受保护的内存空间，有访问底层硬件设备的所有权限</p>
<p>为了保证用户进程不能直接操作内核（kernel），保证内核的安全，操作系统将虚拟空间划分为两部分，一部分为内核空间，一部分为用户空间。</p>
<h3 id="缓存-IO"><a href="#缓存-IO" class="headerlink" title="缓存 IO"></a>缓存 IO</h3><p>数据会先拷贝到操作系统内核的缓冲区，然后才从操作系统内核的缓冲区拷贝到应用程序的地址空间</p>
<p>缺点：数据需要在应用程序空间和内核空间进行数据拷贝，影响效率</p>
<p>有了上面几个基本概念下面看看网络 IO</p>
<h2 id="网络-IO"><a href="#网络-IO" class="headerlink" title="网络 IO"></a>网络 IO</h2><p>IO 操作的本质是对数据的读写。因为 IO 缓存的缘故，一个 IO 操作需要分为两步，以读操作为例：</p>
<ol>
<li>等待数据准备</li>
<li>将数据从内核空间拷贝到用户空间</li>
</ol>
<p>对网络 IO 而言，上面的两步可以更具象的表述为：</p>
<ol>
<li>等待网络数据分组到达，然后将其复制到内核缓冲区</li>
<li>把数据从内核缓冲区复制到应用空间缓冲区</li>
</ol>
<p>由于网络传输的不确定性，第一步操作可能成为最耗时的过程（可能比后面的业务逻辑计算都更为耗时）。</p>
<p>下面看 5 个 IO 模型是如何解决问题的，相关的图就不放了网上一大把：</p>
<h3 id="阻塞-IO-模型"><a href="#阻塞-IO-模型" class="headerlink" title="阻塞 IO 模型"></a>阻塞 IO 模型</h3><p>这个模型下，其实就是不解决任何问题，第一步，第二部都是阻塞的。</p>
<p>以 socket 操作为例，进程空间调用 recvfrom，其系统调用会直到数据包到达并且复制到应用进程缓冲区才返回。</p>
<h3 id="非阻塞-IO-模型"><a href="#非阻塞-IO-模型" class="headerlink" title="非阻塞 IO 模型"></a>非阻塞 IO 模型</h3><p>使用轮询操作，避免第一步操作完全被阻塞。</p>
<p>进程调用 recvfrom，如果缓冲区没有数据立即返回一个 EWOULDBLOCK，通过轮询操作检查内核缓冲区是否有数据到来。</p>
<h3 id="IO-复用模型"><a href="#IO-复用模型" class="headerlink" title="IO 复用模型"></a>IO 复用模型</h3><p>Linux 提供系统调用，进程将文件描述符传递给系统调用，若第一步未就绪则阻塞在系统调用上。</p>
<p>Linux对 IO 复用模型提供的系统调用：</p>
<ul>
<li>select：顺序描述所有文件描述符，文件描述符最多持有 1024 个</li>
<li>poll：类似于select，只是去除了文件描述符数组长度的限制</li>
<li>epoll：利用mmap技术避免了这些复制和遍历操作</li>
</ul>
<p><strong>Java NIO多路复用器 Selector 就是基于 epoll 的多路复用技术实现的</strong></p>
<h3 id="信号驱动-IO-模型"><a href="#信号驱动-IO-模型" class="headerlink" title="信号驱动 IO 模型"></a>信号驱动 IO 模型</h3><p>应用进程建立 SIGIO 信号处理程序，调用 sigaction 后返回。IO 第一步完成后通知程序。</p>
<h3 id="异步-IO"><a href="#异步-IO" class="headerlink" title="异步 IO"></a>异步 IO</h3><p>告知内核启动某个操作，并让内核在整个操作完成后通知我们。</p>
<h3 id="IO-模型对比"><a href="#IO-模型对比" class="headerlink" title="IO 模型对比"></a>IO 模型对比</h3><p><img src="https://i.loli.net/2017/07/16/596b64fa04869.png" alt="1486392482597_6.png"></p>
<h2 id="Java-对于-IO-模型的实现"><a href="#Java-对于-IO-模型的实现" class="headerlink" title="Java 对于 IO 模型的实现"></a>Java 对于 IO 模型的实现</h2><h3 id="JDK-支持"><a href="#JDK-支持" class="headerlink" title="JDK 支持"></a>JDK 支持</h3><ul>
<li>JDK 1.0 ~ JDK 1.3：传统的 BIO，基于阻塞 IO 模型</li>
<li>JDK 1.4 ~ JDK 1.5：加入 NIO，基于 IO 复用模型<ul>
<li>JDK 1.4 ~ JDK 1.5 update10：Selector 基于 select/poll 模型实现</li>
<li>JDK 1.5 update &amp; Linux core 2.6 以上：Selector 使用 epoll 模型实现</li>
</ul>
</li>
<li>JDK 1.7 ~ JDK 1.8（目前）：加入 NIO 2.0（AIO），增加异步套接字通道</li>
</ul>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ul>
<li><a href="https://github.com/zhanghTK/netty/tree/master/src/main/java/tk/zhangh/netty/ch1/bio" target="_blank" rel="external">阻塞 IO</a></li>
<li><a href="https://github.com/zhanghTK/netty/tree/master/src/main/java/tk/zhangh/netty/ch1/paio" target="_blank" rel="external">伪异步 IO</a></li>
<li><a href="https://github.com/zhanghTK/netty/tree/master/src/main/java/tk/zhangh/netty/ch1/nio" target="_blank" rel="external">非阻塞 IO</a></li>
<li><a href="https://github.com/zhanghTK/netty/tree/master/src/main/java/tk/zhangh/netty/ch1/aio" target="_blank" rel="external">异步 IO</a></li>
</ul>
<hr>
<p>参考：</p>
<ol>
<li>《Netty 权威指南》（第2版）：第1章，第2章</li>
<li><a href="http://blog.leanote.com/post/joesay/Concurrency-Model-Part-1-IO-Concurrency" target="_blank" rel="external">聊聊并发，Part 1：IO模型</a></li>
<li><a href="http://www.jianshu.com/p/486b0965c296" target="_blank" rel="external">聊聊Linux 五种IO模型</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[【Spring】容器刷新]]></title>
      <url>https://zhanghtk.github.io/2017/07/16/%E3%80%90Spring%E3%80%91%E5%AE%B9%E5%99%A8%E5%88%B7%E6%96%B0/</url>
      <content type="html"><![CDATA[<p>前面文章在分析 Spring Boot 的启动过程中提到了 AbstractApplicationContext 类的 refresh 方法，这个方法是 Spring 容器的核心方法之一，该方法提供了基本的模板，完成容器的初始化，并提供了丰富的接口可以从纵向（容器启动过程）、横向（不同的容器子类型）、不同形式（声明式、编程式等）进行自定义扩展。</p>
<p>有关 ApplicationContext 和 BeanFactory 的内容可以参考之前关于 Spring 的文章：</p>
<ul>
<li><a href="http://zhangh.tk/2017/03/13/Spring%E4%B9%8BBeanFactory/" target="_blank" rel="external">Spring之BeanFactory</a></li>
<li><a href="http://zhangh.tk/2017/03/19/Spring%E4%B9%8BApplicationContext/" target="_blank" rel="external">Spring之ApplicationContext</a></li>
</ul>
<p>这里详细过一下 refresh 方法的过程，留个印象，方便以后回顾。</p>
<p>这篇文章就不记录关于 Spring Boot 在启动刷新阶段的特殊实现了，只关心 Spring 的通用实现模板</p>
<h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException, IllegalStateException </span>&#123;</div><div class="line">   <span class="keyword">synchronized</span> (<span class="keyword">this</span>.startupShutdownMonitor) &#123;</div><div class="line">      <span class="comment">// 刷新前准备工作</span></div><div class="line">      prepareRefresh();</div><div class="line"></div><div class="line">      <span class="comment">// 调用子类refreshBeanFactory()方法，获取bean factory</span></div><div class="line">      ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();</div><div class="line"></div><div class="line">      <span class="comment">// 创建bean Factory的通用设置</span></div><div class="line">      prepareBeanFactory(beanFactory);</div><div class="line"></div><div class="line">      <span class="keyword">try</span> &#123;</div><div class="line">         <span class="comment">// 子类特殊的bean factory设置</span></div><div class="line">         postProcessBeanFactory(beanFactory);</div><div class="line"></div><div class="line">         <span class="comment">// 实例化beanFactoryPostProcessor</span></div><div class="line">         <span class="comment">// 调用beanFactoryPostProcessor修改bean definition</span></div><div class="line">         invokeBeanFactoryPostProcessors(beanFactory);</div><div class="line"></div><div class="line">         <span class="comment">// 注册 bean pst processors</span></div><div class="line">         registerBeanPostProcessors(beanFactory);</div><div class="line"></div><div class="line">         <span class="comment">// 初始化信息源，和国际化相关</span></div><div class="line">         initMessageSource();</div><div class="line"></div><div class="line">         <span class="comment">// 初始化容器事件传播器</span></div><div class="line">         initApplicationEventMulticaster();</div><div class="line"></div><div class="line">         <span class="comment">// 调用子类特殊的刷新逻辑</span></div><div class="line">         onRefresh();</div><div class="line"></div><div class="line">         <span class="comment">// 为事件传播器注册事件监听器</span></div><div class="line">         registerListeners();</div><div class="line"></div><div class="line">         <span class="comment">// 实例化所有非懒加载单例</span></div><div class="line">         finishBeanFactoryInitialization(beanFactory);</div><div class="line"></div><div class="line">         <span class="comment">// 初始化容器的生命周期事件处理器，并发布容器的生命周期事件</span></div><div class="line">         finishRefresh();</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">catch</span> (BeansException ex) &#123;</div><div class="line">         <span class="comment">// ...</span></div><div class="line">      &#125;</div><div class="line">      <span class="keyword">finally</span> &#123;</div><div class="line">         <span class="comment">// ...</span></div><div class="line">      &#125;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="刷新过程详述"><a href="#刷新过程详述" class="headerlink" title="刷新过程详述"></a>刷新过程详述</h2><h3 id="prepareRefresh"><a href="#prepareRefresh" class="headerlink" title="prepareRefresh"></a>prepareRefresh</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">prepareRefresh</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="comment">// 设置Spring容器的启动时间，撤销关闭状态，开启活跃状态</span></div><div class="line">   <span class="keyword">this</span>.startupDate = System.currentTimeMillis();</div><div class="line">   <span class="keyword">this</span>.closed.set(<span class="keyword">false</span>);</div><div class="line">   <span class="keyword">this</span>.active.set(<span class="keyword">true</span>);</div><div class="line"></div><div class="line">   <span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</div><div class="line">      logger.info(<span class="string">"Refreshing "</span> + <span class="keyword">this</span>);</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="comment">// 模板方法，设置属性源信息</span></div><div class="line">   initPropertySources();</div><div class="line"></div><div class="line">   <span class="comment">// 验证环境信息里一些必须存在的属性</span></div><div class="line">   getEnvironment().validateRequiredProperties();</div><div class="line"></div><div class="line">   <span class="keyword">this</span>.earlyApplicationEvents = <span class="keyword">new</span> LinkedHashSet&lt;ApplicationEvent&gt;();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="obtainFreshBeanFactory"><a href="#obtainFreshBeanFactory" class="headerlink" title="obtainFreshBeanFactory"></a>obtainFreshBeanFactory</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> ConfigurableListableBeanFactory <span class="title">obtainFreshBeanFactory</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="comment">// 模板方法</span></div><div class="line">   <span class="comment">// 获取刷新Spring上下文的Bean工厂</span></div><div class="line">   refreshBeanFactory();</div><div class="line">   ConfigurableListableBeanFactory beanFactory = getBeanFactory();</div><div class="line">   <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">      logger.debug(<span class="string">"Bean factory for "</span> + getDisplayName() + <span class="string">": "</span> + beanFactory);</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> beanFactory;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="prepareBeanFactory"><a href="#prepareBeanFactory" class="headerlink" title="prepareBeanFactory"></a>prepareBeanFactory</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">prepareBeanFactory</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> </span>&#123;</div><div class="line">   <span class="comment">// 设置classloader</span></div><div class="line">   beanFactory.setBeanClassLoader(getClassLoader());</div><div class="line">   <span class="comment">// 设置表达式解析器</span></div><div class="line">   beanFactory.setBeanExpressionResolver(<span class="keyword">new</span> StandardBeanExpressionResolver(beanFactory.getBeanClassLoader()));</div><div class="line">   <span class="comment">// 添加属性编辑注册器</span></div><div class="line">   beanFactory.addPropertyEditorRegistrar(<span class="keyword">new</span> ResourceEditorRegistrar(<span class="keyword">this</span>, getEnvironment()));</div><div class="line"></div><div class="line">   <span class="comment">// 添加ApplicationContextAwareProcessor这个BeanPostProcessor用于回调</span></div><div class="line">   <span class="comment">// ApplicationContextAwareProcessor主要的作用是给实现XxxxAware的bean注入相关属性</span></div><div class="line">   beanFactory.addBeanPostProcessor(<span class="keyword">new</span> ApplicationContextAwareProcessor(<span class="keyword">this</span>));</div><div class="line">   <span class="comment">// 取消以下接口的自动注入</span></div><div class="line">   beanFactory.ignoreDependencyInterface(EnvironmentAware.class);</div><div class="line">   beanFactory.ignoreDependencyInterface(EmbeddedValueResolverAware.class);</div><div class="line">   beanFactory.ignoreDependencyInterface(ResourceLoaderAware.class);</div><div class="line">   beanFactory.ignoreDependencyInterface(ApplicationEventPublisherAware.class);</div><div class="line">   beanFactory.ignoreDependencyInterface(MessageSourceAware.class);</div><div class="line">   beanFactory.ignoreDependencyInterface(ApplicationContextAware.class);</div><div class="line"></div><div class="line">   <span class="comment">// 设置特殊的类型对应的bean，修正依赖</span></div><div class="line">   beanFactory.registerResolvableDependency(BeanFactory.class, beanFactory);</div><div class="line">   beanFactory.registerResolvableDependency(ResourceLoader.class, <span class="keyword">this</span>);</div><div class="line">   beanFactory.registerResolvableDependency(ApplicationEventPublisher.class, <span class="keyword">this</span>);</div><div class="line">   beanFactory.registerResolvableDependency(ApplicationContext.class, <span class="keyword">this</span>);</div><div class="line"></div><div class="line">   <span class="comment">// Register early post-processor for detecting inner beans as ApplicationListeners.</span></div><div class="line">   beanFactory.addBeanPostProcessor(<span class="keyword">new</span> ApplicationListenerDetector(<span class="keyword">this</span>));</div><div class="line"></div><div class="line">   <span class="comment">// 如果自定义的Bean中没有一个名为”loadTimeWeaver”的Bena</span></div><div class="line">   <span class="comment">// 添加一个LoadTimeWeaverAwareProcessor</span></div><div class="line">   <span class="keyword">if</span> (beanFactory.containsBean(LOAD_TIME_WEAVER_BEAN_NAME)) &#123;</div><div class="line">      beanFactory.addBeanPostProcessor(<span class="keyword">new</span> LoadTimeWeaverAwareProcessor(beanFactory));</div><div class="line">      <span class="comment">// Set a temporary ClassLoader for type matching.</span></div><div class="line">      beanFactory.setTempClassLoader(<span class="keyword">new</span> ContextTypeMatchClassLoader(beanFactory.getBeanClassLoader()));</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="comment">// 如果自定义的Bean中没有名为”systemProperties”和”systemEnvironment”的Bean</span></div><div class="line">   <span class="comment">// 注册两个Bena，Key为”systemProperties”和”systemEnvironment”，Value为Map</span></div><div class="line">   <span class="comment">// 这两个bean包含系统配置和系统环绕信息</span></div><div class="line">   <span class="keyword">if</span> (!beanFactory.containsLocalBean(ENVIRONMENT_BEAN_NAME)) &#123;</div><div class="line">      beanFactory.registerSingleton(ENVIRONMENT_BEAN_NAME, getEnvironment());</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">if</span> (!beanFactory.containsLocalBean(SYSTEM_PROPERTIES_BEAN_NAME)) &#123;</div><div class="line">      beanFactory.registerSingleton(SYSTEM_PROPERTIES_BEAN_NAME, getEnvironment().getSystemProperties());</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">if</span> (!beanFactory.containsLocalBean(SYSTEM_ENVIRONMENT_BEAN_NAME)) &#123;</div><div class="line">      beanFactory.registerSingleton(SYSTEM_ENVIRONMENT_BEAN_NAME, getEnvironment().getSystemEnvironment());</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="postProcessBeanFactory"><a href="#postProcessBeanFactory" class="headerlink" title="postProcessBeanFactory"></a>postProcessBeanFactory</h3><p>空实现，由具体子类实现。为子类特殊的 Application Context 实现指定特殊的 bean post 事件处理器</p>
<h3 id="invokeBeanFactoryPostProcessors"><a href="#invokeBeanFactoryPostProcessors" class="headerlink" title="invokeBeanFactoryPostProcessors"></a>invokeBeanFactoryPostProcessors</h3><p>整个 Spring 流程中非常重要的方法，大量的用户自定义扩展都与这个方法有关。</p>
<p>第一次读的时候看着怪复杂的直接跳过去了，结果启动过程的好多问题还是没搞清楚。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">invokeBeanFactoryPostProcessors</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> </span>&#123;</div><div class="line">   <span class="comment">// 实例化并调用所有注册的 beanFactoryPostProcessor</span></div><div class="line">   PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(beanFactory, getBeanFactoryPostProcessors());</div><div class="line"></div><div class="line">   <span class="comment">// Detect a LoadTimeWeaver and prepare for weaving, if found in the meantime</span></div><div class="line">   <span class="comment">// (e.g. through an @Bean method registered by ConfigurationClassPostProcessor)</span></div><div class="line">   <span class="keyword">if</span> (beanFactory.getTempClassLoader() == <span class="keyword">null</span> &amp;&amp; beanFactory.containsBean(LOAD_TIME_WEAVER_BEAN_NAME)) &#123;</div><div class="line">      beanFactory.addBeanPostProcessor(<span class="keyword">new</span> LoadTimeWeaverAwareProcessor(beanFactory));</div><div class="line">      beanFactory.setTempClassLoader(<span class="keyword">new</span> ContextTypeMatchClassLoader(beanFactory.getBeanClassLoader()));</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>复杂的东西不在上面，是 PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors 方法的调用</p>
<p>说明这个方法之前有两个类需要特备说明，这个方法的操作都是围绕这两个类的：</p>
<ul>
<li><p>BeanFactoryPostProcessor</p>
<p>在 bean 实例化阶段开始之前，对注册到容器的 BeanDefinition 保存的原始数据做出修改</p>
</li>
<li><p>BeanDefinitionRegistryPostProcessor</p>
<p>继承自上面的 BeanFactoryPostProcessor</p>
<p>专门用来对注册的容器的 BeanFactoryPostProcessor 的BeanDefinition 保存的原始数据做出修改</p>
</li>
</ul>
<p>有点拗口，不过意思类似指针与二级指针的关系。</p>
<p>整个 PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors 的实现太复杂了，但其实就一个意思：</p>
<ol>
<li>先用 BeanDefinitionRegistryPostProcessor 修改 BeanFactoryPostProcessor 的 BeanDefinition </li>
<li>然后用 BeanFactoryPostProcessor 修改普通的 BeanDefinition</li>
</ol>
<p>具体在操作过程中 BeanDefinitionRegistryPostProcessor 和 BeanFactoryPostProcessor 执行的顺序有明确的限制，两者都是根据以下规则执行：</p>
<ol>
<li>首先执行实现 PriorityOrdered 接口的，调用顺序是按照接口方法 getOrder() 的实现</li>
<li>其次执行实现 Ordered 接口的，调用顺序是按照接口方法 getOrder() 的实现</li>
<li>最后执行既没有实现 PriorityOrdered  也没有实现 Ordered 的，调用顺序是 bean 的定义顺序</li>
</ol>
<h3 id="registerBeanPostProcessors"><a href="#registerBeanPostProcessors" class="headerlink" title="registerBeanPostProcessors"></a>registerBeanPostProcessors</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">registerBeanPostProcessors</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> </span>&#123;</div><div class="line">   <span class="comment">// 从Spring容器中找出的BeanPostProcessor接口的bean，并设置到BeanFactory的属性中</span></div><div class="line">   PostProcessorRegistrationDelegate.registerBeanPostProcessors(beanFactory, <span class="keyword">this</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>思路与 invokeBeanFactoryPostProcessors 方法类似。</p>
<p>但只是从容器中找出实现 BeanPostProcessor 的bean，排序后设置到BeanFactory的属性中，并不调用。</p>
<p>具体的排序过程：</p>
<ol>
<li>优先调用 PriorityOrdered 接口的子接口，调用顺序依照接口方法getOrder的返回值从小到大排序</li>
<li>其次调用Ordered接口的子接口，调用顺序依照接口方法getOrder的返回值从小到大排序</li>
<li>接着按照 BeanPostProcessor 实现类在配置文件中定义的顺序进行调用</li>
<li>最后调用MergedBeanDefinitionPostProcessor接口的实现Bean，同样按照在配置文件中定义的顺序进行调用</li>
</ol>
<h3 id="initMessageSource"><a href="#initMessageSource" class="headerlink" title="initMessageSource"></a>initMessageSource</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initMessageSource</span><span class="params">()</span> </span>&#123;</div><div class="line">   ConfigurableListableBeanFactory beanFactory = getBeanFactory();</div><div class="line">   <span class="keyword">if</span> (beanFactory.containsLocalBean(MESSAGE_SOURCE_BEAN_NAME)) &#123;</div><div class="line">      <span class="comment">// 如果自定义了名为”messageSource”的Bean</span></div><div class="line">      <span class="comment">// 直接实例化Bean，该Bean必须是MessageSource接口的实现Bean</span></div><div class="line">      <span class="comment">// 该Bean如果是HierarchicalMessageSource接口的实现类</span></div><div class="line">      <span class="comment">// 强转为HierarchicalMessageSource接口，并设置一下parentMessageSource</span></div><div class="line">      <span class="keyword">this</span>.messageSource = beanFactory.getBean(MESSAGE_SOURCE_BEAN_NAME, MessageSource.class);</div><div class="line">      <span class="comment">// Make MessageSource aware of parent MessageSource.</span></div><div class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.parent != <span class="keyword">null</span> &amp;&amp; <span class="keyword">this</span>.messageSource <span class="keyword">instanceof</span> HierarchicalMessageSource) &#123;</div><div class="line">         HierarchicalMessageSource hms = (HierarchicalMessageSource) <span class="keyword">this</span>.messageSource;</div><div class="line">         <span class="keyword">if</span> (hms.getParentMessageSource() == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="comment">// Only set parent context as parent MessageSource if no parent MessageSource</span></div><div class="line">            <span class="comment">// registered already.</span></div><div class="line">            hms.setParentMessageSource(getInternalParentMessageSource());</div><div class="line">         &#125;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">         logger.debug(<span class="string">"Using MessageSource ["</span> + <span class="keyword">this</span>.messageSource + <span class="string">"]"</span>);</div><div class="line">      &#125;</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">else</span> &#123;</div><div class="line">      <span class="comment">// 如果没有自定义名为”messageSource”的Bean，那么会默认注册一个DelegatingMessageSource并加入</span></div><div class="line">      <span class="comment">// Use empty MessageSource to be able to accept getMessage calls.</span></div><div class="line">      DelegatingMessageSource dms = <span class="keyword">new</span> DelegatingMessageSource();</div><div class="line">      dms.setParentMessageSource(getInternalParentMessageSource());</div><div class="line">      <span class="keyword">this</span>.messageSource = dms;</div><div class="line">      beanFactory.registerSingleton(MESSAGE_SOURCE_BEAN_NAME, <span class="keyword">this</span>.messageSource);</div><div class="line">      <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">         logger.debug(<span class="string">"Unable to locate MessageSource with name '"</span> + MESSAGE_SOURCE_BEAN_NAME +</div><div class="line">               <span class="string">"': using default ["</span> + <span class="keyword">this</span>.messageSource + <span class="string">"]"</span>);</div><div class="line">      &#125;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="initApplicationEventMulticaster"><a href="#initApplicationEventMulticaster" class="headerlink" title="initApplicationEventMulticaster"></a>initApplicationEventMulticaster</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initApplicationEventMulticaster</span><span class="params">()</span> </span>&#123;</div><div class="line">   ConfigurableListableBeanFactory beanFactory = getBeanFactory();</div><div class="line">   <span class="keyword">if</span> (beanFactory.containsLocalBean(APPLICATION_EVENT_MULTICASTER_BEAN_NAME)) &#123;</div><div class="line">      <span class="comment">// 如果自定义了名为”applicationEventMulticaster”的Bean</span></div><div class="line">      <span class="comment">// 实例化自定义的Bean，自定义的Bean必须是ApplicationEventMulticaster接口的实现类</span></div><div class="line">      <span class="keyword">this</span>.applicationEventMulticaster =</div><div class="line">            beanFactory.getBean(APPLICATION_EVENT_MULTICASTER_BEAN_NAME, ApplicationEventMulticaster.class);</div><div class="line">      <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">         logger.debug(<span class="string">"Using ApplicationEventMulticaster ["</span> + <span class="keyword">this</span>.applicationEventMulticaster + <span class="string">"]"</span>);</div><div class="line">      &#125;</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">else</span> &#123;</div><div class="line">      <span class="comment">// 如果没有自定义名为”ApplicationEventMulticaster”的Bean</span></div><div class="line">      <span class="comment">// 注册一个类型为SimpleApplicationEventMulticaster的Bean</span></div><div class="line">      <span class="keyword">this</span>.applicationEventMulticaster = <span class="keyword">new</span> SimpleApplicationEventMulticaster(beanFactory);</div><div class="line">      beanFactory.registerSingleton(APPLICATION_EVENT_MULTICASTER_BEAN_NAME, <span class="keyword">this</span>.applicationEventMulticaster);</div><div class="line">      <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">         logger.debug(<span class="string">"Unable to locate ApplicationEventMulticaster with name '"</span> +</div><div class="line">               APPLICATION_EVENT_MULTICASTER_BEAN_NAME +</div><div class="line">               <span class="string">"': using default ["</span> + <span class="keyword">this</span>.applicationEventMulticaster + <span class="string">"]"</span>);</div><div class="line">      &#125;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="onRefresh"><a href="#onRefresh" class="headerlink" title="onRefresh"></a>onRefresh</h3><p>空的模板方法，根据不同的 ApplicationContext 子类实现对应的业务逻辑</p>
<h3 id="registerListeners"><a href="#registerListeners" class="headerlink" title="registerListeners"></a>registerListeners</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">registerListeners</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="comment">// Register statically specified listeners first.</span></div><div class="line">   <span class="keyword">for</span> (ApplicationListener&lt;?&gt; listener : getApplicationListeners()) &#123;</div><div class="line">      getApplicationEventMulticaster().addApplicationListener(listener);</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="comment">// Do not initialize FactoryBeans here: We need to leave all regular beans</span></div><div class="line">   <span class="comment">// uninitialized to let post-processors apply to them!</span></div><div class="line">   String[] listenerBeanNames = getBeanNamesForType(ApplicationListener.class, <span class="keyword">true</span>, <span class="keyword">false</span>);</div><div class="line">   <span class="keyword">for</span> (String listenerBeanName : listenerBeanNames) &#123;</div><div class="line">      getApplicationEventMulticaster().addApplicationListenerBean(listenerBeanName);</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="comment">// Publish early application events now that we finally have a multicaster...</span></div><div class="line">   Set&lt;ApplicationEvent&gt; earlyEventsToProcess = <span class="keyword">this</span>.earlyApplicationEvents;</div><div class="line">   <span class="keyword">this</span>.earlyApplicationEvents = <span class="keyword">null</span>;</div><div class="line">   <span class="keyword">if</span> (earlyEventsToProcess != <span class="keyword">null</span>) &#123;</div><div class="line">      <span class="keyword">for</span> (ApplicationEvent earlyEvent : earlyEventsToProcess) &#123;</div><div class="line">         getApplicationEventMulticaster().multicastEvent(earlyEvent);</div><div class="line">      &#125;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="finishBeanFactoryInitialization"><a href="#finishBeanFactoryInitialization" class="headerlink" title="finishBeanFactoryInitialization"></a>finishBeanFactoryInitialization</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">finishBeanFactoryInitialization</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> </span>&#123;</div><div class="line">   <span class="comment">//有容器转换服务bean时先实例化这种Bean</span></div><div class="line">   <span class="keyword">if</span> (beanFactory.containsBean(CONVERSION_SERVICE_BEAN_NAME) &amp;&amp;</div><div class="line">         beanFactory.isTypeMatch(CONVERSION_SERVICE_BEAN_NAME, ConversionService.class)) &#123;</div><div class="line">      beanFactory.setConversionService(</div><div class="line">            beanFactory.getBean(CONVERSION_SERVICE_BEAN_NAME, ConversionService.class));</div><div class="line">   &#125;</div><div class="line">   </div><div class="line">   <span class="comment">// 注册一个默认的嵌入式值解析器</span></div><div class="line">   <span class="keyword">if</span> (!beanFactory.hasEmbeddedValueResolver()) &#123;</div><div class="line">      beanFactory.addEmbeddedValueResolver(<span class="keyword">new</span> StringValueResolver() &#123;</div><div class="line">         <span class="meta">@Override</span></div><div class="line">         <span class="function"><span class="keyword">public</span> String <span class="title">resolveStringValue</span><span class="params">(String strVal)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> getEnvironment().resolvePlaceholders(strVal);</div><div class="line">         &#125;</div><div class="line">      &#125;);</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="comment">// 实例化LoadTimeWeaverAware类型Bean</span></div><div class="line">   String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, <span class="keyword">false</span>, <span class="keyword">false</span>);</div><div class="line">   <span class="keyword">for</span> (String weaverAwareName : weaverAwareNames) &#123;</div><div class="line">      getBean(weaverAwareName);</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="comment">// 停止使用临时类加载器</span></div><div class="line">   beanFactory.setTempClassLoader(<span class="keyword">null</span>);</div><div class="line"></div><div class="line">   <span class="comment">// 缓存容器中所有注册的BeanDefinition元数据，以防被修改</span></div><div class="line">   beanFactory.freezeConfiguration();</div><div class="line"></div><div class="line">   <span class="comment">// 实例化剩余的所有非lazy-init singleton Bean</span></div><div class="line">   beanFactory.preInstantiateSingletons();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="finishRefresh"><a href="#finishRefresh" class="headerlink" title="finishRefresh"></a>finishRefresh</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">finishRefresh</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="comment">// 初始化生命周期处理器（LifecycleProcessor）</span></div><div class="line">   <span class="comment">// 先找一下有没有自定义名为lifecycleProcessor的Bean，有的话就实例化出来</span></div><div class="line">   <span class="comment">// 该Bean必须是LifecycleProcessor的实现类</span></div><div class="line">   <span class="comment">// 没有则向Spring上下文中注册一个类型为DefaultLifecycleProcessor的LifecycleProcessor实现类</span></div><div class="line">   initLifecycleProcessor();</div><div class="line"></div><div class="line">   <span class="comment">// 调用生命周期处理器的onRefresh方法</span></div><div class="line">   getLifecycleProcessor().onRefresh();</div><div class="line"></div><div class="line">   <span class="comment">// 发布ContextRefreshedEvent事件告知对应的ApplicationListener进行响应的操作</span></div><div class="line">   publishEvent(<span class="keyword">new</span> ContextRefreshedEvent(<span class="keyword">this</span>));</div><div class="line"></div><div class="line">   <span class="comment">// 如果设置了JMX相关的属性，则就调用该方法</span></div><div class="line">   LiveBeansView.registerApplicationContext(<span class="keyword">this</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以上就是简单的记录了 Spring 启动过程中容器刷新的动作。</p>
<hr>
<p>以上内容除了源码的阅读还参考了其他博客，学习到了很多细节，这里表示感谢了：</p>
<p><a href="http://fangjian0423.github.io/2017/05/10/springboot-context-refresh/" target="_blank" rel="external">SpringBoot源码分析之Spring容器的refresh过程</a></p>
<p><a href="http://blog.csdn.net/bubaxiu/article/details/41415685" target="_blank" rel="external">Spring– Ioc 容器Bean实例化的几种场景</a></p>
<p><a href="http://blog.csdn.net/chjttony/article/details/6278627" target="_blank" rel="external">《Spring技术内幕》学习笔记6——IoC容器的高级特性</a></p>
<p><a href="http://www.importnew.com/24282.html" target="_blank" rel="external">Spring源码分析：非懒加载的单例Bean初始化前后的一些操作</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[【SpringBoot】容器启动]]></title>
      <url>https://zhanghtk.github.io/2017/07/10/%E3%80%90SpringBoot%E3%80%91%E5%AE%B9%E5%99%A8%E5%90%AF%E5%8A%A8/</url>
      <content type="html"><![CDATA[<p>Spring Boot 的启动前面说到了：</p>
<ul>
<li>包文件启动：从<code>JarLauncher</code>的<code>main</code>方法启动，加载各种资源后，开启一个新的线程调用程序的<code>main</code>方法</li>
<li><code>SpringApplication</code>实例创建：判断是否是web环境，加载并实例化初始化器和监听器，查找<code>main</code>方法所在类</li>
<li>启动监听器：创建<code>SpringApplicationRunListeners</code>实例统一管理监听器。在启动过程中调用不同容器生命周期通知，创建不同的事件类型，由<code>ApplicationEventMulticaster</code>广播对应事件给<code>ApplicationListener</code></li>
</ul>
<p>前面做了各种准备工作就是为了最后的容器提供服务，本文以注释的形式记录一下 Spring Boot 容器的启动过程：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> ConfigurableApplicationContext <span class="title">run</span><span class="params">(String... args)</span> </span>&#123;</div><div class="line">	<span class="comment">// ...</span></div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">         	<span class="comment">// 封装应用启动参数</span></div><div class="line">		ApplicationArguments applicationArguments = <span class="keyword">new</span> DefaultApplicationArguments(args);</div><div class="line">		<span class="comment">// 准备环境</span></div><div class="line">         	ConfigurableEnvironment environment = prepareEnvironment(listeners,</div><div class="line">				applicationArguments);</div><div class="line">		Banner printedBanner = printBanner(environment);</div><div class="line">         	<span class="comment">// 创建容器</span></div><div class="line">		context = createApplicationContext();</div><div class="line">		analyzers = <span class="keyword">new</span> FailureAnalyzers(context);</div><div class="line">         	<span class="comment">// 准备容器</span></div><div class="line">		prepareContext(context, environment, listeners, applicationArguments,</div><div class="line">				printedBanner);</div><div class="line">         	<span class="comment">// 刷新容器</span></div><div class="line">		refreshContext(context);</div><div class="line">         	<span class="comment">// 运行runner</span></div><div class="line">		afterRefresh(context, applicationArguments);</div><div class="line">		listeners.finished(context, <span class="keyword">null</span>);</div><div class="line">		stopWatch.stop();</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.logStartupInfo) &#123;</div><div class="line">			<span class="keyword">new</span> StartupInfoLogger(<span class="keyword">this</span>.mainApplicationClass)</div><div class="line">					.logStarted(getApplicationLog(), stopWatch);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> context;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">catch</span> (Throwable ex) &#123;</div><div class="line">         	<span class="comment">// ...</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> ConfigurableEnvironment <span class="title">prepareEnvironment</span><span class="params">(</span></span></div><div class="line">		SpringApplicationRunListeners listeners,</div><div class="line">		ApplicationArguments applicationArguments) &#123;</div><div class="line">     	<span class="comment">// 创建环境</span></div><div class="line">	ConfigurableEnvironment environment = getOrCreateEnvironment();</div><div class="line">     	<span class="comment">// 配置环境</span></div><div class="line">	configureEnvironment(environment, applicationArguments.getSourceArgs());</div><div class="line">     	<span class="comment">// 监听器通知事件</span></div><div class="line">	listeners.environmentPrepared(environment);</div><div class="line">     	<span class="comment">// 处理非web环境</span></div><div class="line">	<span class="keyword">if</span> (isWebEnvironment(environment) &amp;&amp; !<span class="keyword">this</span>.webEnvironment) &#123;</div><div class="line">		environment = convertToStandardEnvironment(environment);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> environment;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> ConfigurableEnvironment <span class="title">getOrCreateEnvironment</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (<span class="keyword">this</span>.environment != <span class="keyword">null</span>) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.environment;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (<span class="keyword">this</span>.webEnvironment) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> StandardServletEnvironment();</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">new</span> StandardEnvironment();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configureEnvironment</span><span class="params">(ConfigurableEnvironment environment,</span></span></div><div class="line">		String[] args) &#123;</div><div class="line">     	<span class="comment">// 配置property</span></div><div class="line">	configurePropertySources(environment, args);</div><div class="line">       <span class="comment">// 配置profiles</span></div><div class="line">	configureProfiles(environment, args);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String COMMAND_LINE_PROPERTY_SOURCE_NAME = <span class="string">"commandLineArgs"</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configurePropertySources</span><span class="params">(ConfigurableEnvironment environment,</span></span></div><div class="line">		String[] args) &#123;</div><div class="line">	MutablePropertySources sources = environment.getPropertySources();</div><div class="line">     	<span class="comment">// 判断defaultProperties是否为空</span></div><div class="line">	<span class="keyword">if</span> (<span class="keyword">this</span>.defaultProperties != <span class="keyword">null</span> &amp;&amp; !<span class="keyword">this</span>.defaultProperties.isEmpty()) &#123;</div><div class="line">         	<span class="comment">// MutablePropertySources内部维护一个list&lt;PropertySource&lt;?&gt;&gt;集合</span></div><div class="line">         	<span class="comment">// addLast先removeIfPresent()然后把defaultProperties加到最后</span></div><div class="line">		sources.addLast(</div><div class="line">				<span class="keyword">new</span> MapPropertySource(<span class="string">"defaultProperties"</span>, <span class="keyword">this</span>.defaultProperties));</div><div class="line">	&#125;</div><div class="line">     	<span class="comment">// 判断addCommandLineProperties ==true 和 args的长度</span></div><div class="line">	<span class="keyword">if</span> (<span class="keyword">this</span>.addCommandLineProperties &amp;&amp; args.length &gt; <span class="number">0</span>) &#123;</div><div class="line">         	<span class="comment">// name=commandLineArgs</span></div><div class="line">		String name = CommandLinePropertySource.COMMAND_LINE_PROPERTY_SOURCE_NAME;</div><div class="line">		<span class="keyword">if</span> (sources.contains(name)) &#123;</div><div class="line">             	<span class="comment">// 如果列表中包含，替换</span></div><div class="line">			PropertySource&lt;?&gt; source = sources.get(name);</div><div class="line">			CompositePropertySource composite = <span class="keyword">new</span> CompositePropertySource(name);</div><div class="line">			composite.addPropertySource(<span class="keyword">new</span> SimpleCommandLinePropertySource(</div><div class="line">					name + <span class="string">"-"</span> + args.hashCode(), args));</div><div class="line">			composite.addPropertySource(source);</div><div class="line">			sources.replace(name, composite);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> &#123;</div><div class="line">             	<span class="comment">// 如果列表中不包含</span></div><div class="line">             	<span class="comment">// 将配置信息添加在最前面，优先执行</span></div><div class="line">			sources.addFirst(<span class="keyword">new</span> SimpleCommandLinePropertySource(args));</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configureProfiles</span><span class="params">(ConfigurableEnvironment environment, String[] args)</span> </span>&#123;</div><div class="line">	<span class="comment">// spring.active.profile值</span></div><div class="line">     	environment.getActiveProfiles();</div><div class="line">	<span class="comment">// But these ones should go first (last wins in a property key clash)</span></div><div class="line">	Set&lt;String&gt; profiles = <span class="keyword">new</span> LinkedHashSet&lt;String&gt;(<span class="keyword">this</span>.additionalProfiles);</div><div class="line">	profiles.addAll(Arrays.asList(environment.getActiveProfiles()));</div><div class="line">     	<span class="comment">// 将additionalProfiles和getActiveProfiles的值加到一起设置到环境中</span></div><div class="line">	environment.setActiveProfiles(profiles.toArray(<span class="keyword">new</span> String[profiles.size()]));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注释比较详细的说明了代码的作用了：</p>
<ol>
<li>创建环境</li>
<li>配置环境</li>
<li>监听器通知环境准备完毕</li>
<li>对异常环境处理</li>
</ol>
<p>上面代码注释跳过了web环境相关的配置，猜测里面会有servlet容器相关配置，这里跳过另开一文记录。</p>
<h2 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_WEB_CONTEXT_CLASS = <span class="string">"org.springframework."</span></div><div class="line">			+ <span class="string">"boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext"</span>;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_CONTEXT_CLASS = <span class="string">"org.springframework.context."</span></div><div class="line">			+ <span class="string">"annotation.AnnotationConfigApplicationContext"</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">protected</span> ConfigurableApplicationContext <span class="title">createApplicationContext</span><span class="params">()</span> </span>&#123;</div><div class="line">   Class&lt;?&gt; contextClass = <span class="keyword">this</span>.applicationContextClass;</div><div class="line">   <span class="keyword">if</span> (contextClass == <span class="keyword">null</span>) &#123;</div><div class="line">      <span class="keyword">try</span> &#123;</div><div class="line">         contextClass = Class.forName(<span class="keyword">this</span>.webEnvironment</div><div class="line">               ? DEFAULT_WEB_CONTEXT_CLASS : DEFAULT_CONTEXT_CLASS);</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">catch</span> (ClassNotFoundException ex) &#123;</div><div class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</div><div class="line">               <span class="string">"Unable create a default ApplicationContext, "</span></div><div class="line">                     + <span class="string">"please specify an ApplicationContextClass"</span>,</div><div class="line">               ex);</div><div class="line">      &#125;</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> (ConfigurableApplicationContext) BeanUtils.instantiate(contextClass);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这部分没什么可说的，就是根据环境通过反射直接创建对应的容器的实例。</p>
<h2 id="准备容器"><a href="#准备容器" class="headerlink" title="准备容器"></a>准备容器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">prepareContext</span><span class="params">(ConfigurableApplicationContext context,</span></span></div><div class="line">      ConfigurableEnvironment environment, SpringApplicationRunListeners listeners,</div><div class="line">      ApplicationArguments applicationArguments, Banner printedBanner) &#123;</div><div class="line">   context.setEnvironment(environment);</div><div class="line">   postProcessApplicationContext(context);</div><div class="line">   applyInitializers(context);</div><div class="line">   listeners.contextPrepared(context);</div><div class="line">   <span class="keyword">if</span> (<span class="keyword">this</span>.logStartupInfo) &#123;</div><div class="line">      logStartupInfo(context.getParent() == <span class="keyword">null</span>);</div><div class="line">      logStartupProfileInfo(context);</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="comment">// Add boot specific singleton beans</span></div><div class="line">   context.getBeanFactory().registerSingleton(<span class="string">"springApplicationArguments"</span>,</div><div class="line">         applicationArguments);</div><div class="line">   <span class="keyword">if</span> (printedBanner != <span class="keyword">null</span>) &#123;</div><div class="line">      context.getBeanFactory().registerSingleton(<span class="string">"springBootBanner"</span>, printedBanner);</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="comment">// Load the sources</span></div><div class="line">   Set&lt;Object&gt; sources = getSources();</div><div class="line">   Assert.notEmpty(sources, <span class="string">"Sources must not be empty"</span>);</div><div class="line">   load(context, sources.toArray(<span class="keyword">new</span> Object[sources.size()]));</div><div class="line">   listeners.contextLoaded(context);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">postProcessApplicationContext</span><span class="params">(ConfigurableApplicationContext context)</span> </span>&#123;</div><div class="line">   <span class="comment">//  beanNameGenerator不为空，注册</span></div><div class="line">   <span class="keyword">if</span> (<span class="keyword">this</span>.beanNameGenerator != <span class="keyword">null</span>) &#123;</div><div class="line">      context.getBeanFactory().registerSingleton(</div><div class="line">            AnnotationConfigUtils.CONFIGURATION_BEAN_NAME_GENERATOR,</div><div class="line">            <span class="keyword">this</span>.beanNameGenerator);</div><div class="line">   &#125;</div><div class="line">   <span class="comment">// resourceLoader不为空，注册</span></div><div class="line">   <span class="keyword">if</span> (<span class="keyword">this</span>.resourceLoader != <span class="keyword">null</span>) &#123;</div><div class="line">      <span class="keyword">if</span> (context <span class="keyword">instanceof</span> GenericApplicationContext) &#123;</div><div class="line">         ((GenericApplicationContext) context)</div><div class="line">               .setResourceLoader(<span class="keyword">this</span>.resourceLoader);</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">if</span> (context <span class="keyword">instanceof</span> DefaultResourceLoader) &#123;</div><div class="line">         ((DefaultResourceLoader) context)</div><div class="line">               .setClassLoader(<span class="keyword">this</span>.resourceLoader.getClassLoader());</div><div class="line">      &#125;</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">applyInitializers</span><span class="params">(ConfigurableApplicationContext context)</span> </span>&#123;</div><div class="line">   <span class="comment">// 容器使用初始化器</span></div><div class="line">   <span class="keyword">for</span> (ApplicationContextInitializer initializer : getInitializers()) &#123;</div><div class="line">      Class&lt;?&gt; requiredType = GenericTypeResolver.resolveTypeArgument(</div><div class="line">            initializer.getClass(), ApplicationContextInitializer.class);</div><div class="line">      Assert.isInstanceOf(requiredType, context, <span class="string">"Unable to call initializer."</span>);</div><div class="line">      initializer.initialize(context);</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 加载各种bean到容器中</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">load</span><span class="params">(ApplicationContext context, Object[] sources)</span> </span>&#123;</div><div class="line">   <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">      logger.debug(</div><div class="line">            <span class="string">"Loading source "</span> + StringUtils.arrayToCommaDelimitedString(sources));</div><div class="line">   &#125;</div><div class="line">   BeanDefinitionLoader loader = createBeanDefinitionLoader(</div><div class="line">         getBeanDefinitionRegistry(context), sources);</div><div class="line">   <span class="keyword">if</span> (<span class="keyword">this</span>.beanNameGenerator != <span class="keyword">null</span>) &#123;</div><div class="line">      loader.setBeanNameGenerator(<span class="keyword">this</span>.beanNameGenerator);</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">if</span> (<span class="keyword">this</span>.resourceLoader != <span class="keyword">null</span>) &#123;</div><div class="line">      loader.setResourceLoader(<span class="keyword">this</span>.resourceLoader);</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">if</span> (<span class="keyword">this</span>.environment != <span class="keyword">null</span>) &#123;</div><div class="line">      loader.setEnvironment(<span class="keyword">this</span>.environment);</div><div class="line">   &#125;</div><div class="line">   loader.load();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>容器的准备阶段的操作：</p>
<ol>
<li>为容器设置环境信息</li>
<li>容器的预设置</li>
<li>生效初始化器</li>
<li>监听器通知容器准备完毕</li>
<li>加载各种bean到容器中</li>
<li>监听器通知容器加载完毕</li>
</ol>
<h2 id="刷新容器"><a href="#刷新容器" class="headerlink" title="刷新容器"></a>刷新容器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">refreshContext</span><span class="params">(ConfigurableApplicationContext context)</span> </span>&#123;</div><div class="line">   refresh(context);</div><div class="line">   <span class="keyword">if</span> (<span class="keyword">this</span>.registerShutdownHook) &#123;</div><div class="line">      <span class="keyword">try</span> &#123;</div><div class="line">         context.registerShutdownHook();</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">catch</span> (AccessControlException ex) &#123;</div><div class="line">         <span class="comment">// Not allowed in some environments.</span></div><div class="line">      &#125;</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">(ApplicationContext applicationContext)</span> </span>&#123;</div><div class="line">   Assert.isInstanceOf(AbstractApplicationContext.class, applicationContext);</div><div class="line">   ((AbstractApplicationContext) applicationContext).refresh();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后这个<code>((AbstractApplicationContext) applicationContext).refresh();</code>就厉害了，终于把 Spring 容器整合到一起了，这里不详细分析，说起来话有点多，还是再开一篇文章介绍。</p>
<h2 id="Runner"><a href="#Runner" class="headerlink" title="Runner"></a>Runner</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">afterRefresh</span><span class="params">(ConfigurableApplicationContext context,</span></span></div><div class="line">      ApplicationArguments args) &#123;</div><div class="line">   callRunners(context, args);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">callRunners</span><span class="params">(ApplicationContext context, ApplicationArguments args)</span> </span>&#123;</div><div class="line">   List&lt;Object&gt; runners = <span class="keyword">new</span> ArrayList&lt;Object&gt;();</div><div class="line">   <span class="comment">// 找出Spring容器中ApplicationRunner接口的实现类</span></div><div class="line">   runners.addAll(context.getBeansOfType(ApplicationRunner.class).values());</div><div class="line">   <span class="comment">// 找出Spring容器中CommandLineRunner接口的实现类</span></div><div class="line">   runners.addAll(context.getBeansOfType(CommandLineRunner.class).values());</div><div class="line">   AnnotationAwareOrderComparator.sort(runners);</div><div class="line">   <span class="keyword">for</span> (Object runner : <span class="keyword">new</span> LinkedHashSet&lt;Object&gt;(runners)) &#123;</div><div class="line">      <span class="keyword">if</span> (runner <span class="keyword">instanceof</span> ApplicationRunner) &#123;</div><div class="line">         callRunner((ApplicationRunner) runner, args);</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">if</span> (runner <span class="keyword">instanceof</span> CommandLineRunner) &#123;</div><div class="line">         callRunner((CommandLineRunner) runner, args);</div><div class="line">      &#125;</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">callRunner</span><span class="params">(ApplicationRunner runner, ApplicationArguments args)</span> </span>&#123;</div><div class="line">   <span class="keyword">try</span> &#123;</div><div class="line">      (runner).run(args);</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">catch</span> (Exception ex) &#123;</div><div class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Failed to execute ApplicationRunner"</span>, ex);</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">callRunner</span><span class="params">(CommandLineRunner runner, ApplicationArguments args)</span> </span>&#123;</div><div class="line">   <span class="keyword">try</span> &#123;</div><div class="line">      (runner).run(args.getSourceArgs());</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">catch</span> (Exception ex) &#123;</div><div class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Failed to execute CommandLineRunner"</span>, ex);</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>刷新完容器后，Spring 容器的启动就全部完成，最后这个<code>afterRefresh</code>方法是调用程序中的<code>ApplicationRunner</code>和<code>CommandLineRunner</code>，没有什么特别的。</p>
<hr>
<p>总结一下，整个容器的启动步骤：</p>
<ol>
<li>准备环境<ol>
<li>创建环境</li>
<li>配置环境</li>
<li>对异常环境处理</li>
</ol>
</li>
<li>创建容器<ol>
<li>根据环境通过反射直接创建对应的容器的实例</li>
</ol>
</li>
<li>刷新容器<ol>
<li><code>AbstractApplicationContext.refresh()</code></li>
</ol>
</li>
<li>运行runner<ol>
<li>调用程序中的<code>ApplicationRunner</code>和<code>CommandLineRunner</code></li>
</ol>
</li>
</ol>
<p>监听器穿插在以上步骤中，根据容器的启动、运行状态广播对应的事件。</p>
<p>上述步骤当中忽略了两个关键的具体实现：</p>
<ol>
<li><p>容器的创建，根据环境创建容器：</p>
<p>web环境：<code>AnnotationConfigEmbeddedWebApplicationContext</code></p>
<p>非web环境：<code>`AnnotationConfigApplicationContext</code></p>
</li>
<li><p>容器的创建完成后的刷新</p>
</li>
</ol>
<p>这两部分内容较多，挖坑以后填写。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[【SpringBoot】监听器篇]]></title>
      <url>https://zhanghtk.github.io/2017/07/05/%E3%80%90SpringBoot%E3%80%91%E7%9B%91%E5%90%AC%E5%99%A8%E7%AF%87/</url>
      <content type="html"><![CDATA[<p>还是先回顾前文：</p>
<ul>
<li>包文件启动：从<code>JarLauncher</code>的<code>main</code>方法启动，加载各种资源后，开启一个新的线程调用程序的<code>main</code>方法</li>
<li><code>SpringApplication</code>实例创建：判断是否是web环境，加载并实例化初始化器和监听器，查找<code>main</code>方法所在类</li>
</ul>
<p>至此终于可以运行<code>SpringApplication</code>的非静态<code>run</code>方法了：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> ConfigurableApplicationContext <span class="title">run</span><span class="params">(String... args)</span> </span>&#123;</div><div class="line">	StopWatch stopWatch = <span class="keyword">new</span> StopWatch();</div><div class="line">	stopWatch.start();</div><div class="line">	ConfigurableApplicationContext context = <span class="keyword">null</span>;</div><div class="line">	FailureAnalyzers analyzers = <span class="keyword">null</span>;</div><div class="line">	configureHeadlessProperty();</div><div class="line">	SpringApplicationRunListeners listeners = getRunListeners(args);</div><div class="line">	listeners.starting();</div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		ApplicationArguments applicationArguments = <span class="keyword">new</span> DefaultApplicationArguments(</div><div class="line">				args);</div><div class="line">		ConfigurableEnvironment environment = prepareEnvironment(listeners,</div><div class="line">				applicationArguments);</div><div class="line">		Banner printedBanner = printBanner(environment);</div><div class="line">		context = createApplicationContext();</div><div class="line">		analyzers = <span class="keyword">new</span> FailureAnalyzers(context);</div><div class="line">		prepareContext(context, environment, listeners, applicationArguments,</div><div class="line">				printedBanner);</div><div class="line">		refreshContext(context);</div><div class="line">		afterRefresh(context, applicationArguments);</div><div class="line">		listeners.finished(context, <span class="keyword">null</span>);</div><div class="line">		stopWatch.stop();</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.logStartupInfo) &#123;</div><div class="line">			<span class="keyword">new</span> StartupInfoLogger(<span class="keyword">this</span>.mainApplicationClass)</div><div class="line">					.logStarted(getApplicationLog(), stopWatch);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> context;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">catch</span> (Throwable ex) &#123;</div><div class="line">		handleRunFailure(context, listeners, analyzers, ex);</div><div class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(ex);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>整个方法中间穿插着listener的各种操作，本文就先看看listen的操作。</p>
<h2 id="监听器加载、实例化"><a href="#监听器加载、实例化" class="headerlink" title="监听器加载、实例化"></a>监听器加载、实例化</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> ConfigurableApplicationContext <span class="title">run</span><span class="params">(String... args)</span> </span>&#123;</div><div class="line">	<span class="comment">// ...</span></div><div class="line">	SpringApplicationRunListeners listeners = getRunListeners(args);</div><div class="line">   	<span class="comment">// ...</span></div><div class="line">   &#125;  </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> SpringApplicationRunListeners <span class="title">getRunListeners</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">	Class&lt;?&gt;[] types = <span class="keyword">new</span> Class&lt;?&gt;[] &#123; SpringApplication.class, String[].class &#125;;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">new</span> SpringApplicationRunListeners(logger, getSpringFactoriesInstances(</div><div class="line">			SpringApplicationRunListener.class, types, <span class="keyword">this</span>, args));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>加载的逻辑和上一篇文章提到的初始化器加载方式一致，都是从配置文件<code>META-INF/spring.factories</code>中加载：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># Run Listeners</div><div class="line">org.springframework.boot.SpringApplicationRunListener=\</div><div class="line">org.springframework.boot.context.event.EventPublishingRunListener</div></pre></td></tr></table></figure>
<p>加载并实例化<code>EventPublishingRunListener</code>之后，与<code>logger</code>实例一起创建了<code>SpringApplicationRunListeners</code>，其类图：</p>
<p><img src="https://ooo.0o0.ooo/2017/06/23/594cbdc2572ef.png" alt="SpringApplicationRunListeners"></p>
<h3 id="监听器实现"><a href="#监听器实现" class="headerlink" title="监听器实现"></a>监听器实现</h3><p>上面配置文件中的两个类<code>SpringApplicationRunListener</code>和<code>EventPublishingRunListener</code>分别就是监听器的接口和实现。</p>
<p>接口中定义了五个方法都是围绕着容器的生命周期的：</p>
<ol>
<li><code>starting</code>：run方法首次调用</li>
<li><code>environmentPrepared</code>：<code>ApplicationContext</code>创建之前并且环境信息准备好的时候调用</li>
<li><code>contextPrepared</code>：<code>ApplicationContext</code>创建好并且在source加载之前调用一次</li>
<li><code>contextLoaded</code>：<code>ApplicationContext</code>创建并加载之后并在refresh之前调用</li>
<li><code>finished</code>：<code>run</code>方法结束之前调用</li>
</ol>
<p><code>EventPublishingRunListener</code>的实例创建：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">EventPublishingRunListener</span><span class="params">(SpringApplication application, String[] args)</span> </span>&#123;</div><div class="line">	<span class="keyword">this</span>.application = application;</div><div class="line">	<span class="keyword">this</span>.args = args;</div><div class="line">	<span class="keyword">this</span>.initialMulticaster = <span class="keyword">new</span> SimpleApplicationEventMulticaster();</div><div class="line">	<span class="keyword">for</span> (ApplicationListener&lt;?&gt; listener : application.getListeners()) &#123;</div><div class="line">		<span class="keyword">this</span>.initialMulticaster.addApplicationListener(listener);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>实例的创建过程中创建了一个<code>SimpleApplicationEventMulticaster</code>实例，并且从上文创建的<code>SpringApplication</code>的实例中获取了所有的监听器并追加到了<code>SimpleApplicationEventMulticaster</code>实例。</p>
<p><code>SimpleApplicationEventMulticaster</code>是一个 Spring 事件体系的一员，用于将事件广播给监听者。</p>
<p>这里就是讲事件广播给上一篇文章提及的加载并实例化的监听器。</p>
<p>因此<code>EventPublishingRunListener</code>的实现类似与：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"deprecation"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">starting</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// 构造事件，使用事件广播者发送事件</span></div><div class="line">	<span class="keyword">this</span>.initialMulticaster</div><div class="line">			.multicastEvent(<span class="keyword">new</span> ApplicationStartedEvent(<span class="keyword">this</span>.application, <span class="keyword">this</span>.args));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从调用顺序上：</p>
<p><img src="https://ooo.0o0.ooo/2017/06/23/594cbe5e3a355.jpg" alt="监听事件"></p>
<p><code>SpringApplication</code>持有了<code>SpringApplicationRunListeners</code>就间接掌管了所有的<code>ApplicationListener</code>了，想执行哪个<code>applicationListener</code>只要调用对应的<code>applicationListener</code>所监听的事件就可以了。</p>
<p>这里再看看上一篇文章初始化的监听器，例如<code>LiquibaseServiceLocatorApplicationListener</code>，其在实现<code>ApplicationListener</code>接口的同时，还指定了泛型，用于限定具体的事件类型：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LiquibaseServiceLocatorApplicationListener</span></span></div><div class="line">		<span class="keyword">implements</span> <span class="title">ApplicationListener</span>&lt;<span class="title">ApplicationStartingEvent</span>&gt; &#123;</div><div class="line">	<span class="comment">//...</span></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(ApplicationStartingEvent event)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (ClassUtils.isPresent(<span class="string">"liquibase.servicelocator.ServiceLocator"</span>, <span class="keyword">null</span>)) &#123;</div><div class="line">			<span class="keyword">new</span> LiquibasePresent().replaceServiceLocator();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="事件发布"><a href="#事件发布" class="headerlink" title="事件发布"></a>事件发布</h2><p>上面已经看到 Spring Boot 是如何加载，实例化事件的了。除了 Spring Boot 内部定义的时间，也可以自定义事件</p>
<h3 id="事件类型"><a href="#事件类型" class="headerlink" title="事件类型"></a>事件类型</h3><p>Spring Boot支持的事件类型：</p>
<ul>
<li>ApplicationStartingEvent</li>
<li>ApplicationEnvironmentPreparedEvent</li>
<li>ApplicationFailedEvent</li>
<li>ApplicationPreparedEvent</li>
</ul>
<h3 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h3><p>使用泛型指定具体的事件类型，例如（以T代表具体的事件类型）：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplicationStartedEventListener</span> <span class="keyword">implements</span> <span class="title">ApplicationListener</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">   	<span class="meta">@Override</span></div><div class="line">   	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(T event)</span> </span>&#123;</div><div class="line">   	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="发布事件"><a href="#发布事件" class="headerlink" title="发布事件"></a>发布事件</h3><ul>
<li><p>使用 API 发布</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    SpringApplication app = <span class="keyword">new</span> SpringApplication(ListenerApplication.class);</div><div class="line">    app.addListeners(</div><div class="line">            <span class="keyword">new</span> MyApplicationStartedEventListener(),</div><div class="line">            <span class="keyword">new</span> MyApplicationEnvironmentPreparedEventListener(),</div><div class="line">            <span class="keyword">new</span> MyApplicationPreparedEventListener(),</div><div class="line">            <span class="keyword">new</span> MyApplicationFailedEventListener());</div><div class="line">    app.run(args);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>配置文件</p>
<p>如加载事件的过程分析，可以在工程下添加<code>META-INF/spring.factories</code>文件，在文件内指自定义事件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">org.springframework.context.ApplicationListener=</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[【SpringBoot】SpringApplication实例创建]]></title>
      <url>https://zhanghtk.github.io/2017/07/05/%E3%80%90SpringBoot%E3%80%91SpringApplication%E5%AE%9E%E4%BE%8B%E5%88%9B%E5%BB%BA/</url>
      <content type="html"><![CDATA[<p>书接上文，上回说到 Spring Boot 启动的入口是<code>JarLauncher</code>的<code>main</code>方法。其中的主要逻辑是在加载完各种资源后，开启一个新的线程调用程序的入口。整个应用的启动就此缓缓展开，本文只说明从<code>SpringApplication</code>的静态方法<code>run</code>调用后，生成<code>SpringApplication</code>实例的过程。而后的其他启动步骤不在本文记录。</p>
<p>上文说到<code>main</code>方法的调用：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        SpringApplication.run(Application.class, args);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>静态的<code>run</code>方法是整个程序的入口，但最终还是实例化了<code>SpringApplication</code>对象：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> Set&lt;Object&gt; sources = <span class="keyword">new</span> LinkedHashSet&lt;Object&gt;();</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ConfigurableApplicationContext <span class="title">run</span><span class="params">(Object source, String... args)</span> </span>&#123;</div><div class="line">	<span class="keyword">return</span> run(<span class="keyword">new</span> Object[] &#123; source &#125;, args);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ConfigurableApplicationContext <span class="title">run</span><span class="params">(Object[] sources, String[] args)</span> </span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">new</span> SpringApplication(sources).run(args);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">SpringApplication</span><span class="params">(Object... sources)</span> </span>&#123;</div><div class="line">	initialize(sources);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>今天的目标就是<code>initialize</code>方法的实现了：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(Object[] sources)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (sources != <span class="keyword">null</span> &amp;&amp; sources.length &gt; <span class="number">0</span>) &#123;</div><div class="line">		<span class="keyword">this</span>.sources.addAll(Arrays.asList(sources));</div><div class="line">	&#125;</div><div class="line">     	<span class="comment">// 是否是web程序环境</span></div><div class="line">	<span class="keyword">this</span>.webEnvironment = deduceWebEnvironment();</div><div class="line">       <span class="comment">// 设置初始化器</span></div><div class="line">	setInitializers((Collection) getSpringFactoriesInstances(</div><div class="line">			ApplicationContextInitializer.class));</div><div class="line">       <span class="comment">// 设置监听器</span></div><div class="line">	setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));</div><div class="line">     	<span class="comment">// main方法所在类</span></div><div class="line">	<span class="keyword">this</span>.mainApplicationClass = deduceMainApplicationClass();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="推断Web环境"><a href="#推断Web环境" class="headerlink" title="推断Web环境"></a>推断Web环境</h2><p>先看看web环境的判断：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// org/springframework/boot/SpringApplication.java</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] WEB_ENVIRONMENT_CLASSES = &#123; <span class="string">"javax.servlet.Servlet"</span>,</div><div class="line">		<span class="string">"org.springframework.web.context.ConfigurableWebApplicationContext"</span> &#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">deduceWebEnvironment</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">for</span> (String className : WEB_ENVIRONMENT_CLASSES) &#123;</div><div class="line">		<span class="keyword">if</span> (!ClassUtils.isPresent(className, <span class="keyword">null</span>)) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>是通过判断给定的类加载器（null）是否可以加载给定的类（<code>WEB_ENVIRONMENT_CLASSES</code>）判断的。加载器给的是空，跟进去看到了为空时是有默认类加载器的：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// org/springframework/util/ClassUtils.java</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ClassLoader <span class="title">getDefaultClassLoader</span><span class="params">()</span> </span>&#123;</div><div class="line">	ClassLoader cl = <span class="keyword">null</span>;</div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		cl = Thread.currentThread().getContextClassLoader();</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">catch</span> (Throwable ex) &#123;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (cl == <span class="keyword">null</span>) &#123;</div><div class="line">		cl = ClassUtils.class.getClassLoader();</div><div class="line">		<span class="keyword">if</span> (cl == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				cl = ClassLoader.getSystemClassLoader();</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">catch</span> (Throwable ex) &#123;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> cl;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="查找-Main-方法"><a href="#查找-Main-方法" class="headerlink" title="查找 Main 方法"></a>查找 Main 方法</h2><p>跳过其他方法先看<code>main</code>方法所在类的查找</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> Class&lt;?&gt; deduceMainApplicationClass() &#123;</div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		StackTraceElement[] stackTrace = <span class="keyword">new</span> RuntimeException().getStackTrace();</div><div class="line">		<span class="keyword">for</span> (StackTraceElement stackTraceElement : stackTrace) &#123;</div><div class="line">			<span class="keyword">if</span> (<span class="string">"main"</span>.equals(stackTraceElement.getMethodName())) &#123;</div><div class="line">				<span class="keyword">return</span> Class.forName(stackTraceElement.getClassName());</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">catch</span> (ClassNotFoundException ex) &#123;</div><div class="line">		<span class="comment">// Swallow and continue</span></div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个<code>main</code>方法所在类的查找还是比较6的，万万没想到直接搞了个异常从堆栈里查找，也算是奇技淫巧吧。</p>
<h2 id="初始化器，监听器的加载、实例化"><a href="#初始化器，监听器的加载、实例化" class="headerlink" title="初始化器，监听器的加载、实例化"></a>初始化器，监听器的加载、实例化</h2><p>下面重点看看<code>SpringApplication</code>实例化最重要的部分：初始化器和监听器的设置。</p>
<p>两者的核心逻辑都是一样，只是参数有所区别：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> &lt;T&gt; Collection&lt;? extends T&gt; getSpringFactoriesInstances(Class&lt;T&gt; type) &#123;</div><div class="line">	<span class="keyword">return</span> getSpringFactoriesInstances(type, <span class="keyword">new</span> Class&lt;?&gt;[] &#123;&#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">private</span> &lt;T&gt; Collection&lt;? extends T&gt; getSpringFactoriesInstances(Class&lt;T&gt; type,</div><div class="line">		Class&lt;?&gt;[] parameterTypes, Object... args) &#123;</div><div class="line">	ClassLoader classLoader = Thread.currentThread().getContextClassLoader();</div><div class="line">       <span class="comment">// 使用上下文类加载器，加载指定配置文件中的配置</span></div><div class="line">	Set&lt;String&gt; names = <span class="keyword">new</span> LinkedHashSet&lt;String&gt;(</div><div class="line">			SpringFactoriesLoader.loadFactoryNames(type, classLoader));</div><div class="line">     	<span class="comment">// 反射创建，没什么特别的</span></div><div class="line">	List&lt;T&gt; instances = createSpringFactoriesInstances(type, parameterTypes,</div><div class="line">			classLoader, args, names);</div><div class="line">	AnnotationAwareOrderComparator.sort(instances);</div><div class="line">	<span class="keyword">return</span> instances;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 加载的配置文件</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String FACTORIES_RESOURCE_LOCATION = <span class="string">"META-INF/spring.factories"</span>;</div><div class="line"><span class="comment">// 加载配置文件中key为factoryClass.getName()的项</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">loadFactoryNames</span><span class="params">(Class&lt;?&gt; factoryClass, </span></span></div><div class="line">                                               ClassLoader classLoader) &#123;</div><div class="line">	String factoryClassName = factoryClass.getName();</div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		Enumeration&lt;URL&gt; urls = (classLoader != <span class="keyword">null</span> ?</div><div class="line">                                    classLoader.getResources(FACTORIES_RESOURCE_LOCATION) :</div><div class="line">                                  ClassLoader.getSystemResources(FACTORIES_RESOURCE_LOCATION));</div><div class="line">		List&lt;String&gt; result = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">		<span class="keyword">while</span> (urls.hasMoreElements()) &#123;</div><div class="line">             	URL url = urls.nextElement();</div><div class="line">			Properties properties = </div><div class="line">                 PropertiesLoaderUtils.loadProperties(<span class="keyword">new</span> UrlResource(url));</div><div class="line">			String factoryClassNames = </div><div class="line">                 properties.getProperty(factoryClassName);</div><div class="line">             	result.addAll(Arrays.asList(</div><div class="line">                 StringUtils.commaDelimitedListToStringArray(factoryClassNames)));</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> result;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">catch</span> (IOException ex) &#123;</div><div class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Unable to load ["</span> + factoryClass.getName() +</div><div class="line">				<span class="string">"] factories from location ["</span> + FACTORIES_RESOURCE_LOCATION + <span class="string">"]"</span>, ex);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>所有的初始化器和监听器都是从 CLASSPATH 下的<code>META-INF/spring.factories</code>文件中获取的，具体配置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"># Application Context Initializers</div><div class="line">org.springframework.context.ApplicationContextInitializer=\</div><div class="line">org.springframework.boot.context.ConfigurationWarningsApplicationContextInitializer,\</div><div class="line">org.springframework.boot.context.ContextIdApplicationContextInitializer,\</div><div class="line">org.springframework.boot.context.config.DelegatingApplicationContextInitializer,\</div><div class="line">org.springframework.boot.context.embedded.ServerPortInfoApplicationContextInitializer</div><div class="line"></div><div class="line"># Application Listeners</div><div class="line">org.springframework.context.ApplicationListener=\</div><div class="line">org.springframework.boot.ClearCachesApplicationListener,\</div><div class="line">org.springframework.boot.builder.ParentContextCloserApplicationListener,\</div><div class="line">org.springframework.boot.context.FileEncodingApplicationListener,\</div><div class="line">org.springframework.boot.context.config.AnsiOutputApplicationListener,\</div><div class="line">org.springframework.boot.context.config.ConfigFileApplicationListener,\</div><div class="line">org.springframework.boot.context.config.DelegatingApplicationListener,\</div><div class="line">org.springframework.boot.liquibase.LiquibaseServiceLocatorApplicationListener,\</div><div class="line">org.springframework.boot.logging.ClasspathLoggingApplicationListener,\</div><div class="line">org.springframework.boot.logging.LoggingApplicationListener</div></pre></td></tr></table></figure>
<hr>
<p>总结一下，SpringApplication的实例过程：</p>
<ol>
<li>判断是否是 web 环境</li>
<li>加载初始化器和监听器并实例化</li>
<li>查找 main 方法所在类</li>
</ol>
<p>每个过程的特点：</p>
<ol>
<li>判断 web 环境是根据 Spring 的默认加载器是否能够加载给定类</li>
<li>初始化器和监听器的加载都依据<code>META-INF/spring.factories</code></li>
<li>main方法所在类的查找是抛出异常在堆栈中查找的</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SpringBoot包文件执行分析]]></title>
      <url>https://zhanghtk.github.io/2017/06/20/SpringBoot%E5%8C%85%E6%96%87%E4%BB%B6%E6%89%A7%E8%A1%8C%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<p>Spring Boot的一大特性是可以直接打包，并且这个Jar是可以直接启动的，不需要额外配置Servlet容器。</p>
<p>这一特性极大的简化了配置，运维的工作。之前碰到这个问题也没有深究，今天记一下，以备后看。</p>
<p>（最终本文未完成Servlet容器启动的说明，只记录了Jar包的启动）</p>
<h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><p>期初以为Spring Boot的启动入口就是应用中由<code>@SpringBootApplication</code>注解的<code>Main</code>方法，还在想到底是怎么把容器集成进去的。事先在网上查了一下，启动是从打包后Jar包中的 MANIFEST.MF 文件入手的。</p>
<p>首先看一下一个空的Spring Boot应用打包后的结构：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">├── BOOT-INF</div><div class="line">│   ├── classes</div><div class="line">│   │   ├── application.properties</div><div class="line">│   │   └── com</div><div class="line">│   │       └── example</div><div class="line">│   │           └── demo</div><div class="line">│   │               └── DemoApplication.class</div><div class="line">│   └── lib</div><div class="line">│       ├── classmate-1.3.3.jar</div><div class="line">│       ├── ...</div><div class="line">├── META-INF</div><div class="line">│   ├── MANIFEST.MF</div><div class="line">│   └── maven</div><div class="line">│       └── com.example</div><div class="line">│           └── demo</div><div class="line">│               ├── pom.properties</div><div class="line">│               └── pom.xml</div><div class="line">└── org</div><div class="line">    └── springframework</div><div class="line">        └── boot</div><div class="line">            └── loader</div><div class="line">                ├── JarLauncher.class</div><div class="line">                ├── ...</div></pre></td></tr></table></figure>
<p>整个结构从结构和命名就能大体猜到含义，与网上看到的结构有些差异，但整体大同小异。</p>
<p>回到刚才提及的 MANIFEST.MF，其内容如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">Manifest-Version: 1.0</div><div class="line">Implementation-Title: demo</div><div class="line">Implementation-Version: 0.0.1-SNAPSHOT</div><div class="line">Archiver-Version: Plexus Archiver</div><div class="line">Built-By: user</div><div class="line">Implementation-Vendor-Id: com.example</div><div class="line">Spring-Boot-Version: 1.5.4.RELEASE</div><div class="line">Implementation-Vendor: Pivotal Software, Inc.</div><div class="line">Main-Class: org.springframework.boot.loader.JarLauncher</div><div class="line">Start-Class: com.example.demo.DemoApplication</div><div class="line">Spring-Boot-Classes: BOOT-INF/classes/</div><div class="line">Spring-Boot-Lib: BOOT-INF/lib/</div><div class="line">Created-By: Apache Maven 3.3.9</div><div class="line">Build-Jdk: 1.8.0_91</div><div class="line">Implementation-URL: http://projects.spring.io/spring-boot/demo/</div></pre></td></tr></table></figure>
<p>里面有构建的各项基本信息，其中的Main-Class指定了<code>JarLauncher</code>，<code>Start-Class</code>指定了应用中的入口。</p>
<p>看来<code>JarLauncher</code>才是项目的启动入口。除了Launcher外，Spring还提供了另一个重要的支持：Archive，先看看Archive。</p>
<h2 id="Archive"><a href="#Archive" class="headerlink" title="Archive"></a>Archive</h2><p><code>Archive</code>是资源的抽象接口，定义了基本的资源获取抽象方法，可以用来表示Jar，文件目录等各种资源。</p>
<p>其子类<code>JarFileArchive</code>表示Jar包文件的抽象，内部包含一个<code>JarFile</code>对应一个Jar包，在创建<code>JarFile</code>实例时会解析Jar包的内部结构。</p>
<p>在资源解析过程中获取的URL可能存在多个<code>!/</code>作为资源分隔符分隔符，这是Spring在Jar协议基础上扩展出的，默认使用<code>org.springframework.boot.loader.jar.Handler</code>作为URL处理器。</p>
<p>资源解析较为繁琐，且与启动逻辑关系不紧密，这里不做多记录。</p>
<h2 id="Launcher"><a href="#Launcher" class="headerlink" title="Launcher"></a>Launcher</h2><p>Launcher作为启动器的抽象，提供了多个具体实现：<code>ExecutableArchiveLauncher</code>,<code>JarLauncher</code>,<code>WarLauncher</code>以及<code>PropertiesLauncher</code> ，其中<code>ExecutableArchiveLauncher</code>是个抽象实现，作为<code>JarLauncher</code>和<code>WarLauncher</code>的父类。</p>
<p><code>JarLauncher</code>是Jar包的启动类，下面详细看看启动过程实现：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    <span class="keyword">new</span> JarLauncher().launch(args);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>直接调用父类<code>Launcher</code>的实现：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">launch</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">  <span class="keyword">try</span> &#123;</div><div class="line">    <span class="comment">// 设置上文提及的URL处理器</span></div><div class="line">    JarFile.registerUrlProtocolHandler();</div><div class="line">    <span class="comment">// 获取classpath下的JarFileArchive，根据这些JarFileArchive创建类加载器</span></div><div class="line">    ClassLoader classLoader = createClassLoader(getClassPathArchives());</div><div class="line">    <span class="comment">// 获得上文提及的start-class，调用重载launch方法</span></div><div class="line">    launch(args, getMainClass(), classLoader);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">catch</span> (Exception ex) &#123;</div><div class="line">    ex.printStackTrace();</div><div class="line">    System.exit(<span class="number">1</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">launch</span><span class="params">(String[] args, String mainClass, ClassLoader classLoader)</span> </span></div><div class="line">  						<span class="keyword">throws</span> Exception &#123;</div><div class="line">    <span class="comment">// 反射创建一个MainMethodRunner</span></div><div class="line">	Runnable runner = createMainMethodRunner(mainClass, args, classLoader);</div><div class="line">    <span class="comment">// 创建线程，启动</span></div><div class="line">	Thread runnerThread = <span class="keyword">new</span> Thread(runner);</div><div class="line">	runnerThread.setContextClassLoader(classLoader);</div><div class="line">	runnerThread.setName(Thread.currentThread().getName());</div><div class="line">	runnerThread.start();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里的ClassLoader是Spring自定义了类加载器<code>LaunchedURLClassLoader</code>，该类继承自<code>URLClassLoader</code>，加载逻辑：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="keyword">protected</span> Class&lt;?&gt; loadClass(String name, <span class="keyword">boolean</span> resolve) <span class="keyword">throws</span> ClassNotFoundException &#123;</div><div class="line">  <span class="keyword">synchronized</span> (LaunchedURLClassLoader.LOCK_PROVIDER.getLock(<span class="keyword">this</span>, name)) &#123;</div><div class="line">    Class&lt;?&gt; loadedClass = findLoadedClass(name);</div><div class="line">    <span class="keyword">if</span> (loadedClass == <span class="keyword">null</span>) &#123;</div><div class="line">      Handler.setUseFastConnectionExceptions(<span class="keyword">true</span>);</div><div class="line">      <span class="keyword">try</span> &#123;</div><div class="line">        loadedClass = doLoadClass(name);</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">finally</span> &#123;</div><div class="line">        Handler.setUseFastConnectionExceptions(<span class="keyword">false</span>);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (resolve) &#123;</div><div class="line">      resolveClass(loadedClass);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> loadedClass;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">private</span> Class&lt;?&gt; doLoadClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</div><div class="line">  <span class="comment">// 尝试根类加载器加载</span></div><div class="line">  <span class="keyword">try</span> &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.rootClassLoader != <span class="keyword">null</span>) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.rootClassLoader.loadClass(name);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">catch</span> (Exception ex) &#123;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="comment">// 尝试父类的findClass</span></div><div class="line">  <span class="keyword">try</span> &#123;</div><div class="line">    findPackage(name);</div><div class="line">    Class&lt;?&gt; cls = findClass(name);</div><div class="line">	<span class="keyword">return</span> cls;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">catch</span> (Exception ex) &#123;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 尝试父类的加载（双亲委派）</span></div><div class="line">  <span class="keyword">return</span> <span class="keyword">super</span>.loadClass(name, <span class="keyword">false</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 设置根加载器为Extension ClassLoader</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">LaunchedURLClassLoader</span><span class="params">(URL[] urls, ClassLoader parent)</span> </span>&#123;</div><div class="line">  <span class="keyword">super</span>(urls, parent);</div><div class="line">  <span class="keyword">this</span>.rootClassLoader = findRootClassLoader(parent);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> ClassLoader <span class="title">findRootClassLoader</span><span class="params">(ClassLoader classLoader)</span> </span>&#123;</div><div class="line">  <span class="keyword">while</span> (classLoader != <span class="keyword">null</span>) &#123;</div><div class="line">    <span class="keyword">if</span> (classLoader.getParent() == <span class="keyword">null</span>) &#123;</div><div class="line">      <span class="keyword">return</span> classLoader;</div><div class="line">    &#125;</div><div class="line">    classLoader = classLoader.getParent();</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>简而言之破坏了双亲委派，如果没有加载过使用<code>doLoadClass</code>方法加载，内部加载逻辑：</p>
<ol>
<li>尝试根类加载器加载(Extension ClassLoader)</li>
<li>尝试父类的findClass</li>
<li>尝试父类的加载（双亲委派）</li>
</ol>
<p>最后详细看一下<code>MainMethodRunner</code>的<code>run</code>方法，启动的其它逻辑都这这里了：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="keyword">try</span> &#123;</div><div class="line">    <span class="comment">// 获取应用入口</span></div><div class="line">    Class&lt;?&gt; mainClass = Thread.currentThread().getContextClassLoader()</div><div class="line">      .loadClass(<span class="keyword">this</span>.mainClassName);</div><div class="line">    Method mainMethod = mainClass.getDeclaredMethod(<span class="string">"main"</span>, String[].class);</div><div class="line">    <span class="keyword">if</span> (mainMethod == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="keyword">this</span>.mainClassName</div><div class="line">						+ <span class="string">" does not have a main method"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 调用main方法</span></div><div class="line">    mainMethod.invoke(<span class="keyword">null</span>, <span class="keyword">new</span> Object[] &#123; <span class="keyword">this</span>.args &#125;);</div><div class="line">  &#125; <span class="keyword">catch</span> (Exception ex) &#123;</div><div class="line">    ex.printStackTrace();</div><div class="line">	System.exit(<span class="number">1</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>总结一下：</p>
<ol>
<li>项目启动从<code>JarLauncher</code>开始</li>
<li>设置Url处理器，加载需要的各种资源</li>
<li>相关资源的加载使用了自定义的类加载器</li>
<li>开启新线程调用应用入口</li>
</ol>
<p>整个实现过程也没有用到什么特别的东西，主要还是反射，类加载器，线程的东西，额外还扩展了Jar协议。</p>
<p>但是并没有看到关于Servlet容器的内容，看来容器的启动和Jar的执行是分开的。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[从ReentrantLock看AQS]]></title>
      <url>https://zhanghtk.github.io/2017/06/07/%E4%BB%8EReentrantLock%E7%9C%8BAQS/</url>
      <content type="html"><![CDATA[<p>之前的文章有简单描述了JUC下的各种同步器。<code>ReentrantLock</code>的引入弥补了原生的<code>synchronized</code>关键字的不足。好些天不更新博客了，今天简单记录一下<code>ReentrantLock</code>的实现。</p>
<h2 id="同步器的基本实现"><a href="#同步器的基本实现" class="headerlink" title="同步器的基本实现"></a>同步器的基本实现</h2><p>JUC包下各种同步器主要依赖的都是<code>AbstractQueuedSynchronizer</code>（AQS）的实现，对于具体的实现大体可以分为两类：独占类型和共享类型。各种同步器并不直接继承成AQS，而是依赖于AQS的子类。</p>
<p>例如：<code>CountDownLatch</code>的内部类<code>java.util.concurrent.CountDownLatch.Sync</code>就是共享型的同步器，其继承了AQS。</p>
<p>本文记录同步器<code>ReentrantLock</code>的加锁、释放锁的具体实现。</p>
<h2 id="ReentrantLock"><a href="#ReentrantLock" class="headerlink" title="ReentrantLock"></a>ReentrantLock</h2><p>与<code>CountDownLatch</code>类似，<code>ReentrantLock</code>对同步器的实现也是依赖其继承了AQS的内部类<code>java.util.concurrent.locks.ReentrantLock.Sync</code>。根据公平性，又具体提供了<code>FairSync</code>和<code>NonfairSync</code>。</p>
<p>默认情况是<code>ReentrantLock</code>使用的是非公平的<code>NonfairSync</code>。</p>
<p>下面看看<code>ReentrantLock</code>的<code>NonfairSync</code>的加锁和释放锁，分析一下AQS对独占型同步器的支持。</p>
<h3 id="NonfairSync"><a href="#NonfairSync" class="headerlink" title="NonfairSync"></a>NonfairSync</h3><h4 id="lock"><a href="#lock" class="headerlink" title="lock"></a>lock</h4><p>非公平锁加锁方法的入口：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, <span class="number">1</span>))</div><div class="line">    setExclusiveOwnerThread(Thread.currentThread());</div><div class="line">  <span class="keyword">else</span></div><div class="line">    acquire(<span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>首先是一个CAS操作，比较设置state变量的值。</p>
<p>state变量来自AQS，表示资源（锁）的状态，0表示未获取，1表示已获取一个。大于1表示获取（重入）的次数。</p>
<p>若资源未获取，修改资源状态成功后，会保存独占资源的线程（使用<code>setExclusiveOwnerThread</code>方法，该方法位于<code>AbstractOwnableSynchronizer</code>，AQS继承于它）。</p>
<p>若资源已经被获取，则调用<code>acquire</code>方法获取锁。</p>
<p><code>acquire</code>是AQS在独占模式下获取资源的入口。可以看出在<code>ReentrantLock</code>加锁的主要逻辑都是依赖于AQS的，代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">acquire</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</div><div class="line">  <span class="keyword">if</span> (!tryAcquire(arg) &amp;&amp; acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</div><div class="line">    selfInterrupt();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>分别看一下<code>tryAcquire</code>,<code>acquireQueued</code>,<code>addWaiter</code>,<code>selfInterrupt</code>的具体实现：</p>
<ol>
<li>在ReentrantLock中<code>tryAcquire</code>具体的逻辑：</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</div><div class="line">  <span class="keyword">return</span> nonfairTryAcquire(acquires);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>AQS</code>的<code>tryAcquire</code>是一个空方法，直接抛异常。<code>ReentrantLock</code>中对非公平锁的的实现则调用<code>nonfairTryAcquire</code>方法，逻辑如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">nonfairTryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</div><div class="line">  <span class="comment">// 获取当前要获取锁的线程</span></div><div class="line">  <span class="keyword">final</span> Thread current = Thread.currentThread();</div><div class="line">  <span class="comment">// 当前锁的状态</span></div><div class="line">  <span class="keyword">int</span> c = getState();</div><div class="line">  <span class="comment">// CAS操作，如果锁未获取修改锁状态，获取锁</span></div><div class="line">  <span class="keyword">if</span> (c == <span class="number">0</span>) &#123;</div><div class="line">    <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, acquires)) &#123;</div><div class="line">      setExclusiveOwnerThread(current);</div><div class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// 如果锁已经被获取且当前线程是获取锁的线程，更新锁状态，重入锁</span></div><div class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (current == getExclusiveOwnerThread()) &#123;</div><div class="line">    <span class="keyword">int</span> nextc = c + acquires;</div><div class="line">    <span class="keyword">if</span> (nextc &lt; <span class="number">0</span>) <span class="comment">// overflow</span></div><div class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">"Maximum lock count exceeded"</span>);</div><div class="line">    setState(nextc);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// 其他情况都失败</span></div><div class="line">  <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li><code>addWaiter</code></li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">addWaiter</span><span class="params">(Node mode)</span> </span>&#123;</div><div class="line">  <span class="comment">// 根据线程实例和模式封装节点</span></div><div class="line">  Node node = <span class="keyword">new</span> Node(Thread.currentThread(), mode);</div><div class="line">  <span class="comment">// 尝试快速添加节点到队尾，成功则直接返回</span></div><div class="line">  Node pred = tail;</div><div class="line">  <span class="keyword">if</span> (pred != <span class="keyword">null</span>) &#123;</div><div class="line">    node.prev = pred;</div><div class="line">    <span class="keyword">if</span> (compareAndSetTail(pred, node)) &#123;</div><div class="line">      pred.next = node;</div><div class="line">      <span class="keyword">return</span> node;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// 调用enq方法添加至队尾</span></div><div class="line">  enq(node);</div><div class="line">  <span class="keyword">return</span> node;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">enq</span><span class="params">(<span class="keyword">final</span> Node node)</span> </span>&#123;</div><div class="line">  <span class="comment">// 自旋操作</span></div><div class="line">  <span class="keyword">for</span> (;;) &#123;</div><div class="line">    Node t = tail;</div><div class="line">    <span class="comment">// 如果尾节点空（链表为空），创建一个不包含线程的头结点</span></div><div class="line">    <span class="keyword">if</span> (t == <span class="keyword">null</span>) &#123; <span class="comment">// Must initialize</span></div><div class="line">      <span class="keyword">if</span> (compareAndSetHead(<span class="keyword">new</span> Node()))</div><div class="line">        tail = head;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="comment">// 添加至队尾</span></div><div class="line">      node.prev = t;</div><div class="line">      <span class="keyword">if</span> (compareAndSetTail(t, node)) &#123;</div><div class="line">        t.next = node;</div><div class="line">        <span class="keyword">return</span> t;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li><code>acquireQueued</code></li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">acquireQueued</span><span class="params">(<span class="keyword">final</span> Node node, <span class="keyword">int</span> arg)</span> </span>&#123;</div><div class="line">  <span class="keyword">boolean</span> failed = <span class="keyword">true</span>;  <span class="comment">// 是否获取锁失败</span></div><div class="line">  <span class="keyword">try</span> &#123;</div><div class="line">    <span class="keyword">boolean</span> interrupted = <span class="keyword">false</span>;</div><div class="line">    <span class="comment">// 自旋操作</span></div><div class="line">    <span class="keyword">for</span> (;;) &#123;</div><div class="line">      <span class="keyword">final</span> Node p = node.predecessor();  <span class="comment">// 前驱节点</span></div><div class="line">      <span class="comment">// 如果前驱是头结点，并且获取资源成功</span></div><div class="line">      <span class="comment">// 因为enq方法中判断若链表为空，则创建一个没有线程的头结点。</span></div><div class="line">      <span class="comment">// 所以当前驱是头结点时，说明该节点有可能获取资源</span></div><div class="line">      <span class="keyword">if</span> (p == head &amp;&amp; tryAcquire(arg)) &#123;</div><div class="line">        setHead(node);</div><div class="line">        p.next = <span class="keyword">null</span>; <span class="comment">// help GC</span></div><div class="line">        failed = <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">return</span> interrupted;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp; parkAndCheckInterrupt())</div><div class="line">        interrupted = <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">  &#125; <span class="keyword">finally</span> &#123;</div><div class="line">    <span class="keyword">if</span> (failed)</div><div class="line">      cancelAcquire(node);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">shouldParkAfterFailedAcquire</span><span class="params">(Node pred, Node node)</span> </span>&#123;</div><div class="line">  <span class="keyword">int</span> ws = pred.waitStatus;</div><div class="line">  <span class="keyword">if</span> (ws == Node.SIGNAL)</div><div class="line">    <span class="comment">// 如果前驱节点状态是SIGNAL，返回</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">  <span class="keyword">if</span> (ws &gt; <span class="number">0</span>) &#123;</div><div class="line">    <span class="comment">// 如果前驱节点状态是CANCEL，删除此节都，直到前驱节点不是CANCEL</span></div><div class="line">    do &#123;</div><div class="line">      node.prev = pred = pred.prev;</div><div class="line">    &#125; <span class="keyword">while</span> (pred.waitStatus &gt; <span class="number">0</span>);</div><div class="line">    pred.next = node;</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="comment">// 其他情况，使用CAS操作将前驱设置为SIGNAL</span></div><div class="line">    compareAndSetWaitStatus(pred, ws, Node.SIGNAL);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>关于节点状态的说明：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 代表线程已经被取消</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CANCELLED =  <span class="number">1</span>;</div><div class="line"><span class="comment">// 代表后续节点需要唤醒</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SIGNAL    = -<span class="number">1</span>;</div><div class="line"><span class="comment">// 代表线程在condition queue中，等待某一条件</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CONDITION = -<span class="number">2</span>;</div><div class="line"><span class="comment">// 代表后续结点会传播唤醒的操作，共享模式下起作用</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PROPAGATE = -<span class="number">3</span>;</div><div class="line"><span class="comment">// 新结点会处于这种状态</span></div><div class="line">						    <span class="number">0</span>;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">parkAndCheckInterrupt</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="comment">// 暂停</span></div><div class="line">  LockSupport.park(<span class="keyword">this</span>);</div><div class="line">  <span class="comment">// 返回中断状况</span></div><div class="line">  <span class="keyword">return</span> Thread.interrupted();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>至此完成锁获取的完整过程。</p>
<h4 id="unlock"><a href="#unlock" class="headerlink" title="unlock"></a>unlock</h4><p>非公平锁释放锁方法的入口更简单，完全依赖AQS：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span> </span>&#123;</div><div class="line">  sync.release(<span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>AQS中资源的释放实现：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">release</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</div><div class="line">  <span class="keyword">if</span> (tryRelease(arg)) &#123;</div><div class="line">    <span class="comment">// 释放资源成功</span></div><div class="line">    Node h = head;</div><div class="line">    <span class="comment">// 队列后不为空，且队列头状态不是新建</span></div><div class="line">    <span class="keyword">if</span> (h != <span class="keyword">null</span> &amp;&amp; h.waitStatus != <span class="number">0</span>)</div><div class="line">      <span class="comment">// 释放队列头的后继节点</span></div><div class="line">      unparkSuccessor(h);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如同<code>tryAcquire</code>方法，AQS中<code>tryRelease</code>方法也是个空方法。<code>ReentrantLock</code>中的实现：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryRelease</span><span class="params">(<span class="keyword">int</span> releases)</span> </span>&#123;</div><div class="line">  <span class="comment">// 获取当前的state减一</span></div><div class="line">  <span class="keyword">int</span> c = getState() - releases;</div><div class="line">  <span class="comment">// 如果当前线程不是独占线程，抛出异常</span></div><div class="line">  <span class="keyword">if</span> (Thread.currentThread() != getExclusiveOwnerThread())</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalMonitorStateException();</div><div class="line">  <span class="comment">// 申请的锁是否都被释放</span></div><div class="line">  <span class="keyword">boolean</span> free = <span class="keyword">false</span>;</div><div class="line">  <span class="comment">// 锁都被释放，重置独占线程</span></div><div class="line">  <span class="keyword">if</span> (c == <span class="number">0</span>) &#123;</div><div class="line">    free = <span class="keyword">true</span>;</div><div class="line">    setExclusiveOwnerThread(<span class="keyword">null</span>);</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// 更新state</span></div><div class="line">  setState(c);</div><div class="line">  <span class="keyword">return</span> free;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>释放头节点的后继节点：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">unparkSuccessor</span><span class="params">(Node node)</span> </span>&#123;</div><div class="line">  <span class="comment">// 获取头结点的状态</span></div><div class="line">  <span class="keyword">int</span> ws = node.waitStatus;</div><div class="line">  <span class="comment">// 如果头结点状态小于0，更新为0</span></div><div class="line">  <span class="keyword">if</span> (ws &lt; <span class="number">0</span>)</div><div class="line">    compareAndSetWaitStatus(node, ws, <span class="number">0</span>);</div><div class="line">  <span class="comment">// 获取后继节点</span></div><div class="line">  Node s = node.next;</div><div class="line">  <span class="comment">// 寻找头结点的下一个有效节点</span></div><div class="line">  <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.waitStatus &gt; <span class="number">0</span>) &#123;</div><div class="line">    s = <span class="keyword">null</span>;</div><div class="line">    <span class="comment">// 从尾部遍历，寻找第一个有效节点</span></div><div class="line">    <span class="keyword">for</span> (Node t = tail; t != <span class="keyword">null</span> &amp;&amp; t != node; t = t.prev)</div><div class="line">      <span class="keyword">if</span> (t.waitStatus &lt;= <span class="number">0</span>)</div><div class="line">        s = t;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// 释放锁</span></div><div class="line">  <span class="keyword">if</span> (s != <span class="keyword">null</span>)</div><div class="line">    LockSupport.unpark(s.thread);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以上就是释放资源的过程，相对于加锁还是比较简单的。</p>
<h3 id="FairSync"><a href="#FairSync" class="headerlink" title="FairSync"></a>FairSync</h3><p>与非公平的同步器不同，对于公平的同步器。在申请锁时条件更苛刻，要先判断当前节点前是否还有其他节点：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</div><div class="line">    acquire(<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</div><div class="line">  <span class="keyword">final</span> Thread current = Thread.currentThread();</div><div class="line">  <span class="keyword">int</span> c = getState();</div><div class="line">  <span class="keyword">if</span> (c == <span class="number">0</span>) &#123;</div><div class="line">    <span class="comment">// 判断当前线程前是否还有其他线程</span></div><div class="line">    <span class="keyword">if</span> (!hasQueuedPredecessors() &amp;&amp; compareAndSetState(<span class="number">0</span>, acquires)) &#123;</div><div class="line">      setExclusiveOwnerThread(current);</div><div class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (current == getExclusiveOwnerThread()) &#123;</div><div class="line">    <span class="keyword">int</span> nextc = c + acquires;</div><div class="line">    <span class="keyword">if</span> (nextc &lt; <span class="number">0</span>)</div><div class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">"Maximum lock count exceeded"</span>);</div><div class="line">    setState(nextc);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>锁的释放则与非公平的同步器完全一致。</p>
<hr>
<p>除了<code>lock</code>和<code>unlock</code>方法，<code>ReentrantLock</code>还提供了其他功能的锁申请/释放的方法，但都是依赖于AQS。</p>
<p>通过<code>ReentrantLock</code>大体可以对AQS后个印象：</p>
<ol>
<li>整个AQS使用双向链表作为底层数据结构；</li>
<li>每个节点保存线程，以及状态信息；</li>
<li>所有节点共同维护资源的使用情况；</li>
<li>通过模板模式完成基本的同步器，具体的实现由子类完成（例如是否允许重入）；</li>
<li>内部大量使用了CAS而非加锁确保线程安全；</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[聊聊JDK动态代理]]></title>
      <url>https://zhanghtk.github.io/2017/05/13/%E8%81%8A%E8%81%8AJDK%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/</url>
      <content type="html"><![CDATA[<p>提起代理多少有点老生常谈的意思了，无论是语言层面，模式层面，框架层面乃至系统架构，代理都算是比较高频的话题了。<br>之前的文章有提到 Spring AOP 的实现是基于 JDK 的动态代理和 CgLib 实现的。今天聊聊 JDK 中的动态代理实现。</p>
<h2 id="JDK-的描述"><a href="#JDK-的描述" class="headerlink" title="JDK 的描述"></a>JDK 的描述</h2><p>提起JDK动态代理，有两个类是怎么都绕不过去的：</p>
<p><code>InvocationHandler</code> 和 <code>Proxy</code> 分别是实现 JDK 动态代理的门面。<br><code>Proxy</code> 比较好理解，主要就是生成代理对象实例的，但 <code>InvocationHandler</code> 这个参数就有点意思了。<br><code>InvocationHandler</code> 这个接口在 JDK 中的描述就是 invocation handler。</p>
<p>JDK 中对 <code>InvocationHandler</code> 的详细描述：</p>
<blockquote>
<p>InvocationHandler is the interface implemented by the invocation handler of a proxy instance.<br>Each proxy instance has an associated invocation handler.<br>When a method is invoked on a proxy instance, the method invocation is encoded and dispatched to the invoke method of its invocation handler.</p>
</blockquote>
<p>每一个代理都有一个被关联的invocation handler。当一个方法在代理对象上被调用，方法的调用被编码，由代理的 invocation handler 的 <code>invoke</code> 方法调用。</p>
<h2 id="嵌套静态代理"><a href="#嵌套静态代理" class="headerlink" title="嵌套静态代理"></a>嵌套静态代理</h2><p>先放结论：<strong>实际上 JDK 的动态代理是由嵌套静态代理实现的。</strong></p>
<p>具体来说：我们根据业务抽象出 <code>Subject</code> 接口，并提供 <code>RealSubject</code> 作为实现，除此还需要提供一个 <code>InvocationHandler</code> 的实现 <code>SubjectInvocationHandler</code>。<br>把上面几个类组装一下，JDK 就可以根据以上信息默默的帮我们生成了代理类 <code>$Proxy</code>。</p>
<p>在代理生成前在程序中可以设置输出代理类的 class 文件：<br><code>System.getProperties().put(&quot;sun.misc.ProxyGenerator.saveGeneratedFiles&quot;, &quot;true&quot;);</code><br>先看看生成代理的源码，最终生成的代理类文件反编译后类似下面这样：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> $<span class="title">Proxy0</span> <span class="keyword">extends</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">Subject</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m1;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m3;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m2;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m4;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m0;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> $Proxy0(InvocationHandler var1) <span class="keyword">throws</span>  &#123;</div><div class="line">        <span class="keyword">super</span>(var1);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object var1)</span> <span class="keyword">throws</span>  </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">return</span> ((Boolean)<span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m1, <span class="keyword">new</span> Object[]&#123;var1&#125;)).booleanValue();</div><div class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var3) &#123;</div><div class="line">            <span class="keyword">throw</span> var3;</div><div class="line">        &#125; <span class="keyword">catch</span> (Throwable var4) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var4);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">(String var1)</span> <span class="keyword">throws</span>  </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m3, <span class="keyword">new</span> Object[]&#123;var1&#125;);</div><div class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var3) &#123;</div><div class="line">            <span class="keyword">throw</span> var3;</div><div class="line">        &#125; <span class="keyword">catch</span> (Throwable var4) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var4);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">toString</span><span class="params">()</span> <span class="keyword">throws</span>  </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">return</span> (String)<span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m2, (Object[])<span class="keyword">null</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var2) &#123;</div><div class="line">            <span class="keyword">throw</span> var2;</div><div class="line">        &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var3);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">sayBye</span><span class="params">(String var1)</span> <span class="keyword">throws</span>  </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m4, <span class="keyword">new</span> Object[]&#123;var1&#125;);</div><div class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var3) &#123;</div><div class="line">            <span class="keyword">throw</span> var3;</div><div class="line">        &#125; <span class="keyword">catch</span> (Throwable var4) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var4);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> <span class="keyword">throws</span>  </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">return</span> ((Integer)<span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m0, (Object[])<span class="keyword">null</span>)).intValue();</div><div class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var2) &#123;</div><div class="line">            <span class="keyword">throw</span> var2;</div><div class="line">        &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var3);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> &#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            m1 = Class.forName(<span class="string">"java.lang.Object"</span>).getMethod(<span class="string">"equals"</span>, <span class="keyword">new</span> Class[]&#123;Class.forName(<span class="string">"java.lang.Object"</span>)&#125;);</div><div class="line">            m3 = Class.forName(<span class="string">"tk.zhangh.pattern.structure.proxy.Subject"</span>).getMethod(<span class="string">"sayHello"</span>, <span class="keyword">new</span> Class[]&#123;Class.forName(<span class="string">"java.lang.String"</span>)&#125;);</div><div class="line">            m2 = Class.forName(<span class="string">"java.lang.Object"</span>).getMethod(<span class="string">"toString"</span>, <span class="keyword">new</span> Class[<span class="number">0</span>]);</div><div class="line">            m4 = Class.forName(<span class="string">"tk.zhangh.pattern.structure.proxy.Subject"</span>).getMethod(<span class="string">"sayBye"</span>, <span class="keyword">new</span> Class[]&#123;Class.forName(<span class="string">"java.lang.String"</span>)&#125;);</div><div class="line">            m0 = Class.forName(<span class="string">"java.lang.Object"</span>).getMethod(<span class="string">"hashCode"</span>, <span class="keyword">new</span> Class[<span class="number">0</span>]);</div><div class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException var2) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchMethodError(var2.getMessage());</div><div class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException var3) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoClassDefFoundError(var3.getMessage());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> <code>SubjectInvocationHandler</code> 是连接 <code>RealSubject</code> 和 <code>$Proxy</code> 的关键，扮演了既当爹又当妈的角色。</p>
<p>对于 <code>RealSubject</code>，<code>SubjectInvocationHandler</code> 是代理类；</p>
<p>对于 <code>$Proxy</code>, <code>SubjectInvocationHandler</code> 又是委托类。</p>
<p>当我们调用 <code>$Proxy</code> 的方法时，<code>$Proxy</code> 将调用转发给委托类 <code>SubjectInvocationHandler</code>, <code>SubjectInvocationHandler</code>作为代理类又将调用转发给 <code>RealSubject</code>。</p>
<p><code>SubjectInvocationHandler</code> 不光是角色重要，还承担承上启下的任务，对<code>$Proxy</code>的调用，都是委托给了继承自<code>Proxy</code> 的<code>SubjectInvocationHandler</code>  的 <code>invoke</code> 方法处理。</p>
<p>而<code>SubjectInvocationHandler</code>的 <code>invoke</code> 方法完全由开发者编写，方法怎么调用，是否选择代理，都是在 <code>invoke</code> 方法实现的。所以 JDK 在对 invocation handler 的描述中用到了 dispatched，但是把调度逻辑方法 <code>invoke</code> 方法我实在不觉得是个优雅的做法。</p>
<p>有关动态代理实现详细的源码介绍可以参看<a href="http://www.cnblogs.com/MOBIN/p/5597215.html" target="_blank" rel="external">这里</a>，作者给出了比较详细的注释说明。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JDK并发包——线程池]]></title>
      <url>https://zhanghtk.github.io/2017/04/16/JDK%E5%B9%B6%E5%8F%91%E5%8C%85%E2%80%94%E2%80%94%E7%BA%BF%E7%A8%8B%E6%B1%A0/</url>
      <content type="html"><![CDATA[<h2 id="JDK的支持"><a href="#JDK的支持" class="headerlink" title="JDK的支持"></a>JDK的支持</h2><p><img src="https://ooo.0o0.ooo/2017/04/10/58eb4e010f8ef.png" alt="Executor.png"></p>
<p>以上为JDK线程池的核心类,</p>
<p>日常线程池的使用可以以ExecutorService为通用的接口，由Executors生产特定的线程池实现</p>
<p>Executors提供各种工具方法的支持和基本线程池实现包括：</p>
<ul>
<li>newFixedThreadPool</li>
<li>newSingleThreadExecutor</li>
<li>newCachedThreadPool</li>
<li>newSingleThreadScheduledExecutor</li>
<li>newScheduledThreadPool</li>
</ul>
<p>ScheduledExecutorService与其他几个线程池不同，提供了三个特殊方法：</p>
<ul>
<li>schedule：在给定时间调度一次任务</li>
<li>scheduleAtFixedRate：以任务开始时间为起点，按给定频率调度任务</li>
<li>scheduleWithFixedDelay：以任务结束时间为起点，按给定频率调度任务</li>
</ul>
<p>注意：</p>
<ol>
<li>如果周期太短，那么任务会在上个任务结束后立即调用</li>
<li>如果任务抛出异常，那么后续所有执行都会被中断</li>
</ol>
<h2 id="线程池实现"><a href="#线程池实现" class="headerlink" title="线程池实现"></a>线程池实现</h2><p>ThreadPoolExecutor最重要的构造方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public ThreadPoolExecutor(int corePoolSize,</div><div class="line">                              int maximumPoolSize,</div><div class="line">                              long keepAliveTime,</div><div class="line">                              TimeUnit unit,</div><div class="line">                              BlockingQueue&lt;Runnable&gt; workQueue,</div><div class="line">                              ThreadFactory threadFactory</div><div class="line">                              RejectedExecutionHandler handler);</div></pre></td></tr></table></figure>
<p>Executors提供的不同线程实现就是根据不同参数定制的，有两个参数需要注意：</p>
<ol>
<li><p>workQueue：被提交但未执行的任务队列</p>
<p>可以直接使用的几种BlockingQueue：</p>
<ul>
<li>SynchronousQueue：直接提交队列</li>
<li>ArrayBlockingQueue：有界队列</li>
<li>LinkedBlockingQueue：无界队列</li>
<li>PriorityBlockingQueue：优先级队列</li>
</ul>
<p><img src="https://ooo.0o0.ooo/2017/04/10/58eb6684c2895.png" alt="ThreadPoolExecutor任务调度逻辑.png"></p>
</li>
<li><p>handler：拒绝策略，包括：</p>
<ul>
<li>AbortPolicy</li>
<li>CallerRunsPolicy</li>
<li>DiscardOledestPolicy</li>
<li>DiscardPolicy</li>
<li>实现RejectedExecutionHandler接口自定义</li>
</ul>
</li>
</ol>
<h2 id="线程池基本使用"><a href="#线程池基本使用" class="headerlink" title="线程池基本使用"></a>线程池基本使用</h2><h3 id="切面扩展"><a href="#切面扩展" class="headerlink" title="切面扩展"></a>切面扩展</h3><ul>
<li>beforeExecute()</li>
<li>afterExecute()</li>
<li>terminated()</li>
</ul>
<h3 id="线程池与异常"><a href="#线程池与异常" class="headerlink" title="线程池与异常"></a>线程池与异常</h3><p>在线程池中执行线程有两种方法：</p>
<ul>
<li>submit</li>
<li>execute</li>
</ul>
<p>两者除了是否有返回值之外，在异常的处理方式上也存在区别。</p>
<p>submit是ExecutorService中引入的方法，在AbstractorService中各个重载的submit方法最终都会以<code>return execute(new FutureTask)</code>的形式执行。</p>
<p>所以submit线程最终是由线程池调用FutureTask的run方法执行，execute的run方法是由线程调用FutureTask的run方法执行。</p>
<p>看一下FutureTask的源码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">  ...</div><div class="line">  <span class="keyword">try</span> &#123;</div><div class="line">    Callable&lt;V&gt; c = callable;</div><div class="line">    <span class="keyword">if</span> (c != <span class="keyword">null</span> &amp;&amp; state == NEW) &#123;</div><div class="line">      V result;</div><div class="line">      <span class="keyword">boolean</span> ran;</div><div class="line">      <span class="keyword">try</span> &#123;</div><div class="line">        result = c.call();</div><div class="line">        ran = <span class="keyword">true</span>;</div><div class="line">      &#125; <span class="keyword">catch</span> (Throwable ex) &#123;</div><div class="line">        result = <span class="keyword">null</span>;</div><div class="line">        ran = <span class="keyword">false</span>;</div><div class="line">        setException(ex);</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">if</span> (ran)</div><div class="line">        set(result);</div><div class="line">    &#125;</div><div class="line">  &#125; <span class="keyword">finally</span> &#123;</div><div class="line">  ...</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">setException</span><span class="params">(Throwable t)</span> </span>&#123;</div><div class="line">  <span class="keyword">if</span> (UNSAFE.compareAndSwapInt(<span class="keyword">this</span>, stateOffset, NEW, COMPLETING)) &#123;</div><div class="line">    outcome = t;</div><div class="line">    UNSAFE.putOrderedInt(<span class="keyword">this</span>, stateOffset, EXCEPTIONAL); <span class="comment">// final state</span></div><div class="line">    finishCompletion();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException, ExecutionException </span>&#123;</div><div class="line">  <span class="keyword">int</span> s = state;</div><div class="line">  <span class="keyword">if</span> (s &lt;= COMPLETING)</div><div class="line">    s = awaitDone(<span class="keyword">false</span>, <span class="number">0L</span>);</div><div class="line">  <span class="keyword">return</span> report(s);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> V <span class="title">report</span><span class="params">(<span class="keyword">int</span> s)</span> <span class="keyword">throws</span> ExecutionException </span>&#123;</div><div class="line">  Object x = outcome;</div><div class="line">  <span class="keyword">if</span> (s == NORMAL)</div><div class="line">    <span class="keyword">return</span> (V)x;</div><div class="line">  <span class="keyword">if</span> (s &gt;= CANCELLED)</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> CancellationException();</div><div class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> ExecutionException((Throwable)x);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>除非你手动get，否则你是得不到任何异常的。使用execute则没有这个问题。</p>
<p>可以重新实现线程池以获取更详细的异常堆栈信息。</p>
<h3 id="线程数量"><a href="#线程数量" class="headerlink" title="线程数量"></a>线程数量</h3><p>公式：Nthread = Ncpu <em> Ucpu </em> （1+ W/C），各字段含义：</p>
<p>Nthreads：线程数量</p>
<p>Ncpu：CPU的数量，Runtime.getRuntime().availableProcessors()</p>
<p>Ucpu：CPU使用率，范围在[0,1]</p>
<p>W/C：等待时间与计算时间的比率</p>
<h2 id="Fork-Join线程池"><a href="#Fork-Join线程池" class="headerlink" title="Fork/Join线程池"></a>Fork/Join线程池</h2><p>Fork/Join是分治思想的线程池框架。</p>
<p>核心接口和实现包括：</p>
<ol>
<li>ForkJoinPool：专门为ForkJoin框架提供的线程池</li>
<li>ForkJoinTask：抽象的计算任务<ol>
<li>RecursiveTask：有返回值得具体任务</li>
<li>RecursiveAction：无返回值的具体任务</li>
</ol>
</li>
</ol>
<p>使用ForkJoin线程池的优点：</p>
<ol>
<li>避免大量的开启，回收线程，线程的开启和回收都依赖线程池</li>
<li>某线程任务处理后可以从其他线程获取任务处理（双端队列，工作密取）</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spring之数据访问]]></title>
      <url>https://zhanghtk.github.io/2017/04/16/Spring%E4%B9%8B%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE/</url>
      <content type="html"><![CDATA[<p>提起JDBC的使用大家一般集中喷两个地方：</p>
<ol>
<li>JDBC的异常处理</li>
<li>JDBC数据处理的冗长代码</li>
</ol>
<p>看看Spring中对这两个问题是怎么举得的吧：</p>
<h2 id="统一的数据访问异常层次体系"><a href="#统一的数据访问异常层次体系" class="headerlink" title="统一的数据访问异常层次体系"></a>统一的数据访问异常层次体系</h2><p>针对数据访问异常JDBC定义了4个异常，可以说是高度的抽象了，但换句话说就是没什么卵用。</p>
<p>尤其是SQLException，这个异常是个checked exception。如果直接抛出会污染上层接口；如果在数据访问层内处理，这个异常却包含了多种问题，例如：</p>
<ul>
<li>无法连接数据库</li>
<li>SQL语法错误</li>
<li>SQL违反数据库约束</li>
</ul>
<p>即使拿到SQLException我们并不能马上准确的获取具体异常问题。</p>
<p>Spring解决的也是简单直接：</p>
<ul>
<li>所有的数据访问异常都定义为了unchecked exception。你嫌弃它要抛出，那就都不要抛出了</li>
<li>转译SQLException。你说它不知道怎么处理，那就提供更细粒度的异常</li>
</ul>
<h2 id="数据访问模板——JdbcTemplate"><a href="#数据访问模板——JdbcTemplate" class="headerlink" title="数据访问模板——JdbcTemplate"></a>数据访问模板——JdbcTemplate</h2><p>提到数据访问模板我想起了在学习JDBC操作时，当时写过一个标准的JDBC增删查该的模板，整个过程涉及到的内容还是不那么简单的。</p>
<p>Spring在这里直接提供了JdbcTemplate作为数据访问的基础，这个类主要解决了两件事：</p>
<ol>
<li>使用模板模式封装基于JDBC的数据访问</li>
<li>对数据访问异常转译，将JDBC异常转化为Spring自定义数据访问异常</li>
</ol>
<p>针对Jdbc的操作和Jdbc的访问Spring分类提供了两个抽象接口由JdbcTemplate继承：</p>
<p><img src="https://ooo.0o0.ooo/2017/04/16/58f3143a23751.png" alt="JdbcTemplate.png"></p>
<p>JdbcAccessor：JdbcTemplate的直接父类，主要两个属性：</p>
<ul>
<li>DataSource：作为Jdbc的连接工厂</li>
<li>SQLExceptionTranslator：处理SQLException的转译</li>
</ul>
<p>JdbcOperations：定义JDBC操作集合的抽象接口。</p>
<p>针对不同类型的操作，Spring提供不同的回调接口而不是简单的抽象模板</p>
<p>除此，JdbcTemplate内部实现细节还有值得注意的地方：</p>
<p><strong>connection</strong></p>
<p>connection有两点需要注意：</p>
<ol>
<li><p>connection获取是使用DataSourceUtils获取的。而不是简单的从dataSource中获取的。</p>
<p>DataSourceUtils会将connection绑定到当前线程，以便事务管理使用</p>
</li>
<li><p>具体的connection由NativeJdbcExtractor获取</p>
</li>
</ol>
<p><strong>查询控制</strong></p>
<p>具体的查询语句执行前会先调用applyStatementSettings方法以控制具体的查询行为。</p>
<p><strong>异常转译</strong></p>
<p>SQLExceptionTranslator作为异常转译的接口，其具体可以针对message，errorCode，自定义信息转译SQLException。</p>
<p><strong>JdbcTemplate的增强</strong></p>
<p>除了基本的JdbcTemplate之外，Spring还提供了NamedParameterJdbcTemplate等操作以增强JdbcTemplate的基本功能。</p>
<p><strong>DataSource</strong></p>
<p>Spring提供了多个DataSource实现，也可以使用第三方的，自定义DataSource既可以继承AbstractDataSource或者实现DelegatingDataSource。</p>
<p>这里额外提及TransactionAwareDateSourceProxy，从其获取的Connection可以自动加入Spring的统一事务管理。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JDK并发包——同步控制工具]]></title>
      <url>https://zhanghtk.github.io/2017/04/09/JDK%E5%B9%B6%E5%8F%91%E5%8C%85%E2%80%94%E2%80%94%E5%90%8C%E6%AD%A5%E6%8E%A7%E5%88%B6%E5%B7%A5%E5%85%B7/</url>
      <content type="html"><![CDATA[<p>为了弥补Java原生并发的各种不足，在并发包中提供了格式各样的工具，这篇先看看关于同步控制并法包的支持。</p>
<h2 id="可重入锁——ReentrantLock"><a href="#可重入锁——ReentrantLock" class="headerlink" title="可重入锁——ReentrantLock"></a>可重入锁——ReentrantLock</h2><p>Java原生提供的synchronized主要有以下几个缺点：</p>
<ul>
<li>JDK5之前的synchronized的性能较差</li>
<li>synchronized本身无法响应中断、无法限时等待、无法确保同步线程之间的公平性</li>
</ul>
<p>可重入锁既是为了解决以上问题提出的。</p>
<p>但是关于这个可重入的名字我觉得还是比较让人疑惑，synchronized本身也是支持一个线程的重入的。</p>
<p>对于原生synchronized的缺陷，ReentrantLock提供了如下几个重要的方法以改善：</p>
<ul>
<li>lockInterruptibly()：获得锁，但优先响应中断</li>
<li>tryLock()：尝试获得锁，成功返回true，失败立即返false，不等待</li>
<li>tryLock(long time, TimeUnit unit)：在给定时间内尝试获得锁</li>
<li>unlock()：释放锁</li>
<li>ReentrantLock(boolean fair)：确保同步线程之间的访问公平</li>
</ul>
<p>除此还提供了最基本的lock()方法：获得，如果锁被占用则等待。</p>
<p>ReentrantLock使用过程中需要注意的是无论何种方式获取锁，每次获取锁之后都要手动调用unlock方法释放锁。</p>
<h2 id="wait-notify的替身——Condition"><a href="#wait-notify的替身——Condition" class="headerlink" title="wait/notify的替身——Condition"></a>wait/notify的替身——Condition</h2><p>Condition与ReentrantLock的关系如同synchronized与wait/notify方法的关系。</p>
<p>为了配合ReentrantLock，Condition本身提供了与wait方法类似的await，与notif方法类似的singal，除此还补充了不响应中断的awaitUninterruptibly方法。</p>
<p>关于Condition的使用：</p>
<ul>
<li>通过ReentrantLock实例的工厂方法获取Condition。</li>
</ul>
<ul>
<li>调用await时必须持有线程的相关ReentrantLock，await调用后线程会释放锁，当再次被唤醒时重新持有锁</li>
<li>调用signal时也必须持有线程的相关ReentrantLock，但是调用结束后需要手动释放锁，否则被唤醒线程无法获取锁</li>
</ul>
<h2 id="宽容的临界区——Semaphore"><a href="#宽容的临界区——Semaphore" class="headerlink" title="宽容的临界区——Semaphore"></a>宽容的临界区——Semaphore</h2><p>可以简单的理解信号量（Semaphore）是可以多个线程同时访问的临界区资源。</p>
<p>在构造Semapho时必须制定多个线程的具体数量，还可以指定是否是否公平访问，对象的其它主要方法有：</p>
<ul>
<li>acquire()</li>
<li>acquireUninterruptibly()</li>
<li>tryAcquire()</li>
<li>tryAcquire(long timeout, TimeUnit unit)</li>
<li>release()</li>
</ul>
<p>方法的含义如同方法名，没有发现使用特别的地方。</p>
<p>需要注意的是申请的信号量使用完毕后，需要release以避免资源越来越少。</p>
<h2 id="读写锁——ReentrantReadWriteLock"><a href="#读写锁——ReentrantReadWriteLock" class="headerlink" title="读写锁——ReentrantReadWriteLock"></a>读写锁——ReentrantReadWriteLock</h2><p>说来惭愧，到目前为止在实际项目中并发包的各种工具我貌似只使用过读写锁。</p>
<p>通常锁都是严格串行的，读写锁提供读写分离锁，对多个读操作不进行阻塞，以此来改善性能。</p>
<p>具体使用中读锁和写锁需要从同一个ReentrantReadWriteLock对象获取：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ReentrantReadWriteLock readWriteLock = <span class="keyword">new</span> ReentrantReadWriteLock();</div><div class="line">Lock readLock = readWriteLock.readLock();</div><div class="line">Lock writeLock = readWriteLock.writeLock();</div></pre></td></tr></table></figure>
<p>针对读操作使用读锁，针对写操作使用写锁。</p>
<h2 id="倒计数器与循环栅栏"><a href="#倒计数器与循环栅栏" class="headerlink" title="倒计数器与循环栅栏"></a>倒计数器与循环栅栏</h2><p>倒计数器：CountDownLatch</p>
<p>循环栅栏：CyclicBarrier</p>
<p>这两个工具具体用法不好解释，我以一个场景考试举例，这个场景有如下特点：</p>
<ul>
<li>参加考试的人员是一定的</li>
<li>使用一个线程表示一个参考人员</li>
<li>不限时，考试结束的唯一标志是所有人员交卷</li>
</ul>
<p>使用倒计数器实现时：</p>
<ul>
<li>CountDownLatch定义多少人参加考试</li>
<li>每次有人交卷CountDownLatch就减少一，交卷后人员自由离开考场</li>
<li>当CountDownLatch减少到0时表示考试结束</li>
</ul>
<p>使用循环栅栏实现时：</p>
<ul>
<li>CyclicBarrier定义多少人参加考试，宣布考试结束</li>
<li>每次有人交卷CyclicBarrier就减少一，但是交卷后人员不能离开考场</li>
<li>当CyclicBarrier减少到0时表示考试结束，所有人统一离场，宣布考试结束</li>
<li>当一场考试结束，下一场考试立即准备完毕</li>
</ul>
<p>可以看出CyclicBarrier还是更强大一些的。</p>
<p>相较于CountDownLatch，CyclicBarrier可以定义完成事件，可以重复使用，控制线程的阻塞。</p>
<hr>
<p>以上并发工具的使用示例都可以在<a href="https://github.com/zhanghTK/Joolkit/tree/master/concurrent/src/test/java/tk/zhangh/java/concurrent/thread" target="_blank" rel="external">Joolkit</a>中找到。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JDK中的Future模式]]></title>
      <url>https://zhanghtk.github.io/2017/04/04/JDK%E4%B8%AD%E7%9A%84Future%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h2 id="Future模式"><a href="#Future模式" class="headerlink" title="Future模式"></a>Future模式</h2><p>Future模式：一个耗时的任务开始后立即返回客户端凭证，而不是要求客户端持续等待，客户端随时可以使用凭证获取任务结果</p>
<p>日常生活中类似的场景非常常见，比如你去维修电脑，把电脑交给售后拿好凭证你就可以走了，而不是守在售后等电脑。</p>
<p>Future模式的典型类图：</p>
<p><img src="https://ooo.0o0.ooo/2017/03/30/58dcc547c217d.png" alt="Future模式.png"></p>
<ul>
<li>Task：任务接口</li>
<li>FutureTask：客户端凭证，实际任务委托给ResultTask</li>
<li>ResultTask：实际的任务处理</li>
<li>Client：创建FutureTask包装ResultTask，开启新线程处理ResultData，返回FutureTask</li>
</ul>
<p>如果任务没有执行完毕将持续阻塞，直到任务结束。具体实现可以使用wait/notifyAll方法以自己作为monitor阻塞自己。</p>
<h2 id="JDK的支持"><a href="#JDK的支持" class="headerlink" title="JDK的支持"></a>JDK的支持</h2><p>JDK中提供了Future的支持，在Future模式之前先看看基本的支持。</p>
<p>先从线程池部分看起，线程池的继承结构如下：</p>
<ul>
<li><p>Executor接口中只定义了<code>void execute(Runnable command);</code></p>
</li>
<li><p>ExecutorService接口进一步扩展了Executor，添加了如<code>shutdown</code>，<code>isShutdown</code>等方法，需要注意的是ExecutorService添加了三个重载的<code>submit</code>方法：</p>
<ul>
<li><code>&lt;T&gt; Future&lt;T&gt; submit(Callable&lt;T&gt; task);</code></li>
<li><code>&lt;T&gt; Future&lt;T&gt; submit(Runnable task, T result);</code></li>
<li><code>Future&lt;?&gt; submit(Runnable task);</code></li>
</ul>
<p>自此，线程池与Future和Callable/Runnable产生了难分难解的缘分。</p>
<p>继续ExecutorService实现之前先看看submit方法的返回值Future：</p>
</li>
<li><p>Future接口内只定义了几个简单方法，获取任务状态及结果。</p>
</li>
<li><p>AbstractExecutorService实现了ExecutorService，对三个submit方法的实现核心调用都是一致的：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">RunnableFuture&lt;T&gt; ftask = newTaskFor(task, result);</div><div class="line">execute(ftask);</div><div class="line"><span class="keyword">return</span> ftask;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>关于线程池与Runnable与Callable的关系就到这里，下面是Runnable/Callable与RunnableFuture的关系了：</p>
<ul>
<li><p>RunnableFuture接口定义：</p>
<p><code>public interface RunnableFuture&lt;V&gt; extends Runnable, Future&lt;V&gt;</code></p>
<p>所以RunnableFuture有两个身份：</p>
<ol>
<li>Runnable，可以作为一个线程使用</li>
<li>Future，可以获取运行结果和线程状态</li>
</ol>
<p>但是作为Runnable有什么好返回的呢？看一下具体的实现：FutureTask</p>
</li>
<li><p>FutureTask有接收Runnable的构造：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">FutureTask</span><span class="params">(Runnable runnable, V result)</span> </span>&#123;</div><div class="line">  <span class="keyword">this</span>.callable = Executors.callable(runnable, result);</div><div class="line">  <span class="keyword">this</span>.state = NEW;       <span class="comment">// ensure visibility of callable</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>再看<code>Executors.callable</code>：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Callable&lt;T&gt; <span class="title">callable</span><span class="params">(Runnable task, T result)</span> </span>&#123;</div><div class="line">  <span class="keyword">if</span> (task == <span class="keyword">null</span>)</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> RunnableAdapter&lt;T&gt;(task, result);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>继续看RunnableAdapter</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">RunnableAdapter</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">  <span class="keyword">final</span> Runnable task;</div><div class="line">  <span class="keyword">final</span> T result;</div><div class="line">  RunnableAdapter(Runnable task, T result) &#123;</div><div class="line">    <span class="keyword">this</span>.task = task;</div><div class="line">    <span class="keyword">this</span>.result = result;</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">public</span> T <span class="title">call</span><span class="params">()</span> </span>&#123;</div><div class="line">    task.run();</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>我理解可以简单的概括为以下几点：</p>
<ul>
<li>Runnable只是单纯的启动线程</li>
<li>Future只是单纯的获取线程状态</li>
<li>RunnableFuture勾画了Runnable和Future统一的蓝图</li>
<li>FutureTask最终完成了大一统</li>
<li>线程池既可以接收Runnable又可以接收Callable，但最终处理的都是Callable</li>
</ul>
<h2 id="JDK的Future模式"><a href="#JDK的Future模式" class="headerlink" title="JDK的Future模式"></a>JDK的Future模式</h2><p><img src="https://ooo.0o0.ooo/2017/03/30/58dccdfa7fc8d.png" alt="JDK的Future.png"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java线程基本操作]]></title>
      <url>https://zhanghtk.github.io/2017/03/29/Java%E7%BA%BF%E7%A8%8B%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<h2 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h2><p>Java中线程的定义与操作系统线程状态并不是一一对应的关系。</p>
<p>Java在<code>java.lang.Thread.State</code>中给出了关于线程状态的描述：</p>
<p><img src="https://ooo.0o0.ooo/2017/03/24/58d507cd6f253.png" alt="线程状态.png"></p>
<h2 id="Thread定义的基本方法"><a href="#Thread定义的基本方法" class="headerlink" title="Thread定义的基本方法"></a>Thread定义的基本方法</h2><ul>
<li><p>新建</p>
<ul>
<li><p>start：用于启动线程</p>
</li>
<li><p>run：普通方法,直接调用run方法将不会开启新的线程，依旧是在原有线程上顺序执行</p>
</li>
</ul>
</li>
<li><p>终止</p>
<ul>
<li>stop：不推荐使用，释放所有的锁，如果锁内的代码没有执行完毕，会出现不一致</li>
<li>会抛出ThreadDeath Error</li>
</ul>
</li>
<li><p>中断</p>
<ul>
<li><p>给线程一个标记，让线程自己响应中断，具体怎么响应甚至于是否响应由被中断线程自己决定</p>
</li>
<li><p>与中断相关的方法包括：</p>
<p>| 方法                                     | 说明                        |<br>| :————————————- | ————————- |<br>| <code>public void interrupt()</code>              | 中断线程， 将中断状态设置为true        |<br>| <code>public boolean isInterrupted()</code>      | 测试线程是否已经中断。线程中断状态不受该方法的影响 |<br>| <code>public static boolean interrupted()</code> | 测试当前线程是否已经中断，并清除中断状态      |</p>
</li>
<li><p>中断的处理</p>
<ul>
<li><p>中断与异常</p>
<p>InterruptedException往往是阻塞的方法响应中断的方式，吞掉该异常将导致上层无法响应中断；</p>
<p>具体处理方式可以上抛，或者重设中断状态，但不建议吞掉；</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>sleep</p>
<ul>
<li>休眠线程，使线程进入TIMED_WAITING状态</li>
<li>线程休眠期间不会释放锁</li>
<li>休眠期间可以响应中断，会抛出InterruptedException</li>
</ul>
</li>
</ul>
<ul>
<li><p>挂起与恢复</p>
<ul>
<li><p>suspend/resume，不推荐使用</p>
</li>
<li><p>缺陷：</p>
<ul>
<li>挂起操作不会释放锁，如果加锁放生在suspend之前，没有其他线程可以访问锁，直到resume，容易造成死锁</li>
<li>如果resume先于suspend执行，线程无法结束会持续处于RUNNABLE状态，like this：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BadSuspend</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object lock = <span class="keyword">new</span> Object();</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ChangeObjectThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ChangeObjectThread</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>.setName(name);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">synchronized</span> (lock) &#123;</div><div class="line">                System.out.println(<span class="string">"in "</span> + getName());</div><div class="line">                Thread.currentThread().suspend();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">        ChangeObjectThread thread1 = <span class="keyword">new</span> ChangeObjectThread(<span class="string">"thread1"</span>);</div><div class="line">        thread1.start();</div><div class="line">        <span class="comment">// 确保thread1一定执行</span></div><div class="line">        TimeUnit.MILLISECONDS.sleep(<span class="number">100</span>);</div><div class="line">        ChangeObjectThread thread2 = <span class="keyword">new</span> ChangeObjectThread(<span class="string">"thread2"</span>);</div><div class="line">        thread2.start();</div><div class="line">        thread1.resume();</div><div class="line">        thread2.resume();</div><div class="line">        thread1.join();</div><div class="line">        thread2.join();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行代码后，程序始终没有结束，查看线程详细信息，发现thread1线程已不存在，thread2卡在suspend方法并且状态仍然是RUNNABLE的，like this：</p>
<p><img src="https://ooo.0o0.ooo/2017/03/24/58d511f21c11c.jpg" alt="BadSuspend.jpg"></p>
</li>
</ul>
</li>
<li><p>Join/Yeild</p>
<ul>
<li>yeild表示：别说我欺负你，我把机会让出来，我们一起抢</li>
<li>join表示：我就是欺负你，你等着，我先来</li>
<li>join的具体的实现参照后面的Object.wait方法介绍</li>
</ul>
<p>守护线程</p>
<ul>
<li>当只有守护线程时，JVM会自动退出</li>
<li><code>thread.setDaemon(true);</code></li>
</ul>
</li>
<li><p>线程优先级：thread.setPriority(Thread.MAX_PRIORITY);</p>
</li>
<li><p>同步：synchronized</p>
<ul>
<li>加锁对象：对象锁</li>
<li>加锁实例方法：加锁在方法所在对象实例，如果多个线程加在多个实例上并没有什么卵用</li>
<li>加锁静态方法：加锁在方法所在Class对象上</li>
</ul>
</li>
</ul>
<h2 id="Object中的线程相关方法"><a href="#Object中的线程相关方法" class="headerlink" title="Object中的线程相关方法"></a>Object中的线程相关方法</h2><p>Object.wait()/Object.notify()</p>
<ul>
<li><p>先看JDK中对两个方法的描述：</p>
<ul>
<li><p>wait()：</p>
<p>Causes the current thread to wait until another thread invokes the java.lang.Object.notify() method or the java.lang.Object.notifyAll() method for this object.</p>
</li>
<li><p>notify()：</p>
<p>Wakes up a single thread that is waiting on this object’s monitor.</p>
</li>
</ul>
</li>
<li><p>简言之，就是通过一个（monitor）对象，让线程停下来或是动起来</p>
</li>
<li><p>这两个方法在操作之前都一定要取得monitor对象的锁</p>
</li>
<li><p>wait方法执行后线程会释放持有的锁，直到被他线程notify monitor时重新持有锁</p>
</li>
<li><p>wait的典型使用场景：Thread.join</p>
<p>join方法内部的关键实现：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">join</span><span class="params">(<span class="keyword">long</span> millis)</span> </span>&#123;</div><div class="line">  <span class="keyword">if</span> (millis == <span class="number">0</span>) &#123;</div><div class="line">    <span class="keyword">while</span> (isAlive()) &#123;</div><div class="line">      wait(<span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">while</span> (isAlive()) &#123;</div><div class="line">      <span class="keyword">long</span> delay = millis - now;</div><div class="line">      <span class="keyword">if</span> (delay &lt;= <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      &#125;</div><div class="line">      wait(delay);</div><div class="line">      now = System.currentTimeMillis() - base;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>两点需要注意的：</p>
<ul>
<li>join最终的实现依赖：wait(delay);</li>
<li>加锁位置：public final synchronized void join(long millis)，相当于synchronized(this)</li>
</ul>
<p>以一个例子说明：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JoinDemo</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> <span class="keyword">long</span> count = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">        Thread thread = <span class="keyword">new</span> Thread(() -&gt; &#123;</div><div class="line">            <span class="keyword">while</span> (++count &lt; <span class="number">1_000_000_000</span>) &#123;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        thread.start();</div><div class="line">        thread.join();</div><div class="line">        System.out.println(count);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Main线程中执行thread.join，在join(int)方法中锁加在了thread对象上，内部的wait()是在thread对象上执行的。也就是说对于Main线程而言，thread线程是它的monitor。</p>
<p>在join方法执行后Main线程处于WAITING状态，直到有人对它的monitor（thread 线程）执行notify操作，这一步是在thread线程执行完毕由JVM操作的。</p>
<p>可以说thread既当爹又当妈，既要让当前线程停下来，又要自己跑起来。在thread执行完毕后重新对自己notify，让Main线程跑起来。</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spring之AOP【二】]]></title>
      <url>https://zhanghtk.github.io/2017/03/25/Spring%E4%B9%8BAOP%E3%80%90%E4%BA%8C%E3%80%91/</url>
      <content type="html"><![CDATA[<h2 id="AspectJ形式的Pointcut"><a href="#AspectJ形式的Pointcut" class="headerlink" title="@AspectJ形式的Pointcut"></a>@AspectJ形式的Pointcut</h2><h3 id="Pointcut的组成："><a href="#Pointcut的组成：" class="headerlink" title="Pointcut的组成："></a>Pointcut的组成：</h3><ul>
<li>Pointcut Expression<ul>
<li>以@Pointcut为载体</li>
<li>由两部分组成：Pointcut标识符，表达式匹配模式</li>
</ul>
</li>
<li>Pointcut Signature<ul>
<li>Pointcut Expression的载体</li>
</ul>
</li>
</ul>
<h4 id="Pointcut标识符"><a href="#Pointcut标识符" class="headerlink" title="Pointcut标识符"></a>Pointcut标识符</h4><p><strong>execution</strong></p>
<p>日常使用最多的标识符，使用execution标识符的Pointcut表达式格式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">execution (modifiers-pattern? ret-type-pattern declaring-type-pattern? </div><div class="line">			name-pattern(param-pattern) throws-pattern?)</div></pre></td></tr></table></figure>
<ul>
<li>方法返回类型、方法名以及参数必须制定，其他可以省略</li>
<li>可选通配符：<code>*</code> 和<code>..</code><ul>
<li><code>*</code>：匹配一个单词</li>
<li><code>..</code>：只能在declaring-type-pattern和param-pattern位置使用<ul>
<li>用于declaring-type-pattern可以指定多个层次</li>
<li>用于param-pattern表示可以有0到多个参数，可以与<code>*</code>和具体类型组合</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><strong>within</strong></p>
<p>指定类型，类型下所有方法。可以使用<code>*</code>和<code>..</code>扩展，like：<code>within(tk.zhangh.spring..*)</code></p>
<p><strong>this和target</strong></p>
<ul>
<li>this：目标对象的代理对象</li>
<li>target：目标对象</li>
</ul>
<p>Spring中使用this和target实际作用类似</p>
<p><strong>args</strong></p>
<p>指定参数类型，指定参数数量</p>
<p>与execution标识符不同，args标识符会在运行期间动态检查参数类型</p>
<p><strong>@within</strong></p>
<p>指定类型，类型下的所有方法，要求类型标记了指定注解，like：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@Target</span>(&#123;ElementType.METHOD, ElementType.TYPE&#125;)</div><div class="line"><span class="keyword">public</span> <span class="meta">@Log</span> AnyJoinpontAnnotation&#123;&#125;</div><div class="line"></div><div class="line"><span class="meta">@Log</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bean</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@with</span>(Log)</div></pre></td></tr></table></figure>
<p><strong>@target</strong></p>
<p>指定标记了给定注解类型的目标对象的所有方法</p>
<p><strong>@args</strong></p>
<p>指定参数类型，要求参数参数类型标记了指定注解</p>
<p><strong>@annotation</strong></p>
<p>指定标记了指定注解的方法，@Transctional的实现方式</p>
<h3 id="Pointcut表达式的解析"><a href="#Pointcut表达式的解析" class="headerlink" title="Pointcut表达式的解析"></a>Pointcut表达式的解析</h3><p>所有@AspectJ形式声明的这些Pointcut表达式最终都会转化成Pointcut的具体实现。</p>
<p>AspectJExpressionPointcut如同他的名字面向AspectJ的pointcut实现，整个继承体系：</p>
<p><img src="https://ooo.0o0.ooo/2017/03/23/58d3d30a2cc93.png" alt="Pointcut.png"></p>
<h2 id="AspectJ形式的Advice"><a href="#AspectJ形式的Advice" class="headerlink" title="@AspectJ形式的Advice"></a>@AspectJ形式的Advice</h2><p>使用@Aspect注解标记的类中，具体的Advice形式由具体的Advice注解标示。</p>
<p>注解的方法中需要访问上下文信息最主要的方式：将方法的第一个参数声明为JoinPoint类型</p>
<ul>
<li><p>@Before</p>
</li>
<li><p>@AfterReturning</p>
</li>
<li><p>@AfterThrowing</p>
<ul>
<li>获取异常：在JoinPoint类型参数后面加上RuntimeException类型参数</li>
</ul>
</li>
<li><p>@After</p>
</li>
<li><p>@Around</p>
<ul>
<li>获取上下文信息不同以上，需要方法第一个参数声明为ProcessingJoinPoint类型</li>
</ul>
</li>
<li><p>@DeclareParents</p>
<ul>
<li>最特殊，使用如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Aspect</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntroductionAspect</span> </span>&#123;</div><div class="line">  <span class="meta">@DeclareParents</span>(value=<span class="string">"....NewImpl"</span>, defaultImpl=Target.class)</div><div class="line">  <span class="keyword">public</span> INew <span class="keyword">new</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="Advice执行顺序"><a href="#Advice执行顺序" class="headerlink" title="Advice执行顺序"></a>Advice执行顺序</h3><ul>
<li>同一个Aspect中最先声明的Advice拥有最高优先级，优先入栈</li>
<li>不同Aspect的Advice需要实现Order接口声明优先级</li>
</ul>
<h3 id="同一对象内的嵌套方法调用拦截失效"><a href="#同一对象内的嵌套方法调用拦截失效" class="headerlink" title="同一对象内的嵌套方法调用拦截失效"></a>同一对象内的嵌套方法调用拦截失效</h3><p>以事务为例，事务管理也是使用AOP，具体是@annotation形式的Pointcut声明（这样我就不用声明Advice了）</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceImpl</span> <span class="title">implents</span> <span class="title">Service</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodA</span><span class="params">()</span> </span>&#123;</div><div class="line">    doSomething();</div><div class="line">    methodB();</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="meta">@Transactional</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodB</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当在aFun内调用bFun时事务没有开启，也就是AOP没有生效，原因：</p>
<p><img src="https://ooo.0o0.ooo/2017/03/24/58d5043b70bbc.png" alt="AOP嵌套调用.png"></p>
<p>我们期望虚线的调用方式，实际上调用时红色的路线，添加在代理对象上的AOP逻辑在嵌套调用时根本没有机会触发。在事务处理时尤其要注意避免这样的嵌套调用问题。</p>
<p>解决：</p>
<ul>
<li>使用AopContext.currentProxy()获取代理对象</li>
<li>从ApplicationContext中获取代理对象</li>
</ul>
<p>不管是那种方式都要注入相关Bean，具体那种更优雅由你来决定了。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[对象回收与引用类型]]></title>
      <url>https://zhanghtk.github.io/2017/03/22/%E5%AF%B9%E8%B1%A1%E5%9B%9E%E6%94%B6%E4%B8%8E%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B/</url>
      <content type="html"><![CDATA[<h2 id="引用分类"><a href="#引用分类" class="headerlink" title="引用分类"></a>引用分类</h2><ul>
<li>强引用：日常使用的引用</li>
<li>软引用：当内存空间不足时，不论是否引用都进行回收的引用</li>
<li>弱引用：只要发生GC，就被回收的引用</li>
<li>虚引用：“引用不到”的引用类型</li>
</ul>
<p>四个引用强度自上而下逐级递减，一个对象存在多个引用时以最强的引用类型为准；</p>
<p>除了以上四个引用类型其实还有两个：FinalReference，Finalizer</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="SoftReference"><a href="#SoftReference" class="headerlink" title="SoftReference"></a>SoftReference</h3><p>非常适合拿来做缓存，实现类似下面：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">ReferenceQueue&lt;Map&lt;String, Object&gt;&gt; queue = <span class="keyword">new</span> ReferenceQueue&lt;&gt;();</div><div class="line">Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">SoftReference&lt;Map&lt;String, Object&gt;&gt; softReference = <span class="keyword">new</span> SoftReference&lt;&gt;(map, queue);</div><div class="line">Map&lt;String, Object&gt; cache = softReference.get();</div><div class="line"></div><div class="line"><span class="comment">// 使用cache</span></div><div class="line"><span class="keyword">if</span> (cache == <span class="keyword">null</span>) &#123;</div><div class="line">  cache = <span class="keyword">new</span> HashMap();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 清理</span></div><div class="line">Reference reference;</div><div class="line"><span class="keyword">while</span> ((reference = queue.poll()) != <span class="keyword">null</span>) &#123;</div><div class="line">  clearn();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="WeakReference"><a href="#WeakReference" class="headerlink" title="WeakReference"></a>WeakReference</h3><p>通常只要发生GC，就会回收WeakReference引用的对象。</p>
<p>当引用时常量是无法回收，还是可以通过弱引用获取，例如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">weakReference</span><span class="params">()</span> </span>&#123;</div><div class="line">  String string = <span class="keyword">new</span> String(<span class="string">"zhangh.tk"</span>);</div><div class="line">  WeakReference&lt;String&gt; reference = <span class="keyword">new</span> WeakReference&lt;&gt;(string);</div><div class="line">  <span class="keyword">assert</span> reference.get() != <span class="keyword">null</span>;</div><div class="line">  string = <span class="keyword">null</span>;</div><div class="line">  runFinalization();</div><div class="line">  <span class="keyword">assert</span> reference.get() == <span class="keyword">null</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">weakReferenceWithFinal</span><span class="params">()</span> </span>&#123;</div><div class="line">  String finalStr = <span class="string">"zhangh.tk"</span>;</div><div class="line">  WeakReference&lt;String&gt; reference = <span class="keyword">new</span> WeakReference&lt;&gt;(finalStr);</div><div class="line">  <span class="keyword">assert</span> reference.get() != <span class="keyword">null</span>;</div><div class="line">  finalStr = <span class="keyword">null</span>;</div><div class="line">  runFinalization();</div><div class="line">  <span class="keyword">assert</span> reference.get() != <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>典型的使用场景：</p>
<p>Thread实例中维护的ThreadLocalMap中key使用的是<code>WeakReference&lt;ThreadLocal&lt;?&gt;&gt;</code>。</p>
<p>当不存在对ThreadLocal的强引用时，只有ThreadLocalMap对它存在弱引用，GC就可以回收ThreadLocal对象。否则只要Thread对象存在，那么始终保持对ThreadLocal的引用，就不能回收ThreadLocal，造成内存泄露。</p>
<p><img src="https://ooo.0o0.ooo/2017/03/21/58d0b23d82ce2.png" alt="ThreadLocal.png"></p>
<p>与上面ThreadLocalMap用法类似，JDK提供了WeakHashMap。</p>
<p>无论WeakHashMap还是ThreadLocalMap都存在当key被回收，value仍然存在的问题。</p>
<p>两者解决此问题的思路也很类似，都是在类似size，add等方法时清理key为null的value避免内存泄露。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">weakHashMapOOM</span><span class="params">()</span> </span>&#123;</div><div class="line">  List&lt;WeakHashMap&lt;<span class="keyword">byte</span>[][], <span class="keyword">byte</span>[][]&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Integer.MAX_VALUE; i++) &#123;</div><div class="line">    WeakHashMap&lt;<span class="keyword">byte</span>[][], <span class="keyword">byte</span>[][]&gt; map = <span class="keyword">new</span> WeakHashMap&lt;&gt;();</div><div class="line">    map.put(<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">10000</span>][<span class="number">1000</span>], <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">10000</span>][<span class="number">1000</span>]);</div><div class="line">    list.add(map);</div><div class="line">    runFinalization();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">weakHashMapNotOOM</span><span class="params">()</span> </span>&#123;</div><div class="line">  List&lt;WeakHashMap&lt;<span class="keyword">byte</span>[][], <span class="keyword">byte</span>[][]&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Integer.MAX_VALUE; i++) &#123;</div><div class="line">    WeakHashMap&lt;<span class="keyword">byte</span>[][], <span class="keyword">byte</span>[][]&gt; map = <span class="keyword">new</span> WeakHashMap&lt;&gt;();</div><div class="line">    map.put(<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">10000</span>][<span class="number">1000</span>], <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">10000</span>][<span class="number">1000</span>]);</div><div class="line">    list.add(map);</div><div class="line">    runFinalization();</div><div class="line">    map.size();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="PhantomReference"><a href="#PhantomReference" class="headerlink" title="PhantomReference"></a>PhantomReference</h3><p>说它是引用不到的引用类型是因为使用PhantomReference无法获取到指向的对象，如果引用有强度那他的引用强度实在是太弱了。</p>
<p>使用PhantomReference必须配合ReferenceQueue，关于ReferenceQueue后面再说。</p>
<h3 id="FinalReference-amp-Finalizer"><a href="#FinalReference-amp-Finalizer" class="headerlink" title="FinalReference&amp;Finalizer"></a>FinalReference&amp;Finalizer</h3><p>这两个类是父子关系，并且都是不公开的。若一个对象没有实现finalize方法，可以直接被回收，若实现了finalize方法由Finalizer处理。</p>
<p>对象回收执行大致过程：</p>
<ol>
<li>当对象不可达时，若未覆盖finalize方法直接回收，否则加入F-Queue队列</li>
<li>FinalizerThread线程从F-Queue里面,不停的获取数据,然后调用相应的finalize方法</li>
<li>finalize方法完毕后，GC会再次判断该对象是否可达，若不可达，则进行回收，否则，对象“复活”</li>
</ol>
<p>关于对象复活：finalize方法只能被JVM调用一次，也就是最多两条命，不存在不停复活的情况。</p>
<p>对象从创建到被回收状态转换：</p>
<p><img src="https://ooo.0o0.ooo/2017/03/21/58d0d5c346f6f.png" alt="Finalizer.png"></p>
<p>对象复活示例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Reclaimable</span> </span>&#123;</div><div class="line">  <span class="keyword">static</span> Reclaimable staticVar;</div><div class="line">  </div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">finalize</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">    staticVar = <span class="keyword">this</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reclaimed</span><span class="params">()</span> </span>&#123;</div><div class="line">  Reclaimable reclaimable = <span class="keyword">new</span> Reclaimable();</div><div class="line">  reclaimable = <span class="keyword">null</span>;</div><div class="line">  runFinalization();</div><div class="line">  <span class="keyword">assert</span> Reclaimable.staticVar != <span class="keyword">null</span>;</div><div class="line">  Reclaimable.staticVar = <span class="keyword">null</span>;</div><div class="line">  runFinalization();</div><div class="line">  <span class="keyword">assert</span> Reclaimable.staticVar == <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="引用队列"><a href="#引用队列" class="headerlink" title="引用队列"></a>引用队列</h3><p>引用队列是垃圾收集器向应用程序返回关于对象生命周期的信息的一种方式。当一个引用对象被回收后可以选择加入引用队列，做最后的清理工作。</p>
<p>例如上文提到的WeakHashMap就是用引用队列收集失效引用，根据引用队列数据清除Entry和值对象。</p>
<p>再例如，因为不能从PhantomReference获得引用的对象，但是可以从引用队列中获得对象被回收的通知。</p>
<p>可以使用引用队列和PhantomReference观察对象的复活：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">phantomQueueWithUnReclaimed</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;&#125;</div><div class="line">  ReferenceQueue&lt;A&gt; queue = <span class="keyword">new</span> ReferenceQueue&lt;&gt;();</div><div class="line">  PhantomReference&lt;A&gt; reference = <span class="keyword">new</span> PhantomReference&lt;&gt;(<span class="keyword">new</span> A(), queue);</div><div class="line">  <span class="keyword">assert</span> reference.get() == <span class="keyword">null</span>;</div><div class="line">  <span class="keyword">assert</span> queue.poll() == <span class="keyword">null</span>;</div><div class="line">  runFinalization();</div><div class="line">  <span class="keyword">assert</span> reference.get() == <span class="keyword">null</span>;</div><div class="line">  <span class="keyword">assert</span> queue.poll() != <span class="keyword">null</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">phantomQueueWithReclaimed</span><span class="params">()</span> </span>&#123;</div><div class="line">  ReferenceQueue&lt;Reclaimable&gt; queue = <span class="keyword">new</span> ReferenceQueue&lt;&gt;();</div><div class="line">  PhantomReference&lt;Reclaimable&gt; reference = <span class="keyword">new</span> PhantomReference&lt;&gt;(<span class="keyword">new</span> Reclaimable(), queue);</div><div class="line">  <span class="keyword">assert</span> reference.get() == <span class="keyword">null</span>;</div><div class="line">  <span class="keyword">assert</span> queue.poll() == <span class="keyword">null</span>;</div><div class="line">  runFinalization();</div><div class="line">  <span class="keyword">assert</span> reference.get() == <span class="keyword">null</span>;</div><div class="line">  <span class="keyword">assert</span> queue.poll() == <span class="keyword">null</span>;</div><div class="line">  Reclaimable.staticVar = <span class="keyword">null</span>;</div><div class="line">  runFinalization();</div><div class="line">  <span class="keyword">assert</span> queue.poll() != <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spring之AOP【一】]]></title>
      <url>https://zhanghtk.github.io/2017/03/20/Spring%E4%B9%8BAOP%E3%80%90%E4%B8%80%E3%80%91/</url>
      <content type="html"><![CDATA[<h2 id="关于AOP"><a href="#关于AOP" class="headerlink" title="关于AOP"></a>关于AOP</h2><p>实现方式：</p>
<ul>
<li>动态代理【Spring AOP默认】</li>
<li>动态字节码增强【Spring AOP备选】</li>
<li>Java代码生成</li>
<li>自定义类加载器</li>
<li>AOP扩展</li>
</ul>
<p>AOP组成：</p>
<ul>
<li>Joinpoint：添加（织入）横切逻辑的位置</li>
<li>Pointcut：Jointpoint的表述方式</li>
<li>Advice：横切逻辑</li>
<li>Weaver：织入器</li>
<li>目标对象</li>
</ul>
<h2 id="Spring-AOP"><a href="#Spring-AOP" class="headerlink" title="Spring AOP"></a>Spring AOP</h2><p>Spring AOP实现机制：动态代理机制和字节码生成技术实现，在运行期为目标对象生成一个代理对象。</p>
<p>Spring对AOP的实现实质上是使用代理机制对上述基本AOP组成概念实现，组合。</p>
<h3 id="Pointcut"><a href="#Pointcut" class="headerlink" title="Pointcut"></a>Pointcut</h3><p>Spring AOP只支持方法级别的Joinpoint，在Pointcut上也可以体现出来：Pointcut接口只定义两个方法分别用于匹配类和方法。</p>
<p>Pointcut根据方法匹配可以分为两类：</p>
<ul>
<li>StaticMethodMatcherPontcut，不会检查Joinpoint的方法参数</li>
<li>DynamicMethodMatcherPointcut，每次都要对方法参数进行检查</li>
</ul>
<p>具体的实现可以不做任何限制，可以根据方法名，注解等各种形式，正则，逻辑运算，调用顺序等多种方式进行过滤。</p>
<h3 id="Advice"><a href="#Advice" class="headerlink" title="Advice"></a>Advice</h3><p>跟与Advice是否在目标对象之间共享可以分为：per-class和per-instance</p>
<h4 id="per-class"><a href="#per-class" class="headerlink" title="per-class"></a>per-class</h4><p>Advice实例可以在目标对象的所有实例之间共享，又可以分为：</p>
<ul>
<li>Before Advice</li>
<li>ThrowsAdvice</li>
<li>AfterReturningAdvice</li>
<li>AroundAdvice</li>
</ul>
<p>每种情况都有对应有接口，要实现对应的Advice之需要实现对应接口。</p>
<p>AroundAdvice比较特殊，Spring没有定义对应接口，而是使用了AOP Alliance的标准接口，接口定义如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MethodInterceptor</span> <span class="keyword">extends</span> <span class="title">Interceptor</span> </span>&#123;</div><div class="line">  <span class="function">Object <span class="title">invoke</span><span class="params">(MethodInvocation invocation)</span> <span class="keyword">throws</span> Throwable</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>MethodInterceptor：Advice，唯一方法invoke封装横切逻辑</p>
<p>MethodInvocation：控制拦截行为，可以获取Joinpoint的信息，重要方法：process</p>
<h4 id="per-instance"><a href="#per-instance" class="headerlink" title="per-instance"></a>per-instance</h4><p>Advice会为不同实例对象保存各自的状态及逻辑，Spring围绕Introduction实现per-instance型Advice。</p>
<p><img src="https://ooo.0o0.ooo/2017/03/19/58ce9fe4f321a.png" alt="Introduction.png"></p>
<p>拦截器——IntroductionInterceptor</p>
<p>继承自：</p>
<ul>
<li>DynamicIntroductionAdvice：判断给定接口是否是扩展逻辑</li>
<li>MethodInterceptor：<ul>
<li>当接口是扩展逻辑：通过Method.invoke()执行扩展逻辑</li>
<li>当接口不是扩展逻辑：通过MethodInvocation.proceed()调用代理对象</li>
</ul>
</li>
</ul>
<p>Introduction可以分为两类：</p>
<ul>
<li>以IntroductionInfo为首的静态分支<ul>
<li>预先定义扩展逻辑接口</li>
<li>DelegatingIntroductionInterceptor：内部持有一个扩展逻辑实现类，供统一目标类的所有实例共享使用</li>
</ul>
</li>
<li>DynamicIntroductionAdvice为首的动态分支<ul>
<li>运行时获取扩展逻辑接口</li>
<li>DelegatePerTargetObjectIntroductionInterceptor：内部持有一个映射关系，映射目标对象与扩展逻辑实现类</li>
</ul>
</li>
</ul>
<h3 id="Aspect"><a href="#Aspect" class="headerlink" title="Aspect"></a>Aspect</h3><p>在Spring第一代的实现中是没有Aspect的概念的，与之对应的是Advisor。</p>
<p>根据Advice的不同，又可以分为：PointcutAdvisor和IntroductionAdvisor，其中IntroductionAdvisor是专门为Introduction使用的。</p>
<p>当在一个Joinpoint处理多个Advice时，可以指定优先级。</p>
<h4 id="PointcutAdvisor"><a href="#PointcutAdvisor" class="headerlink" title="PointcutAdvisor"></a>PointcutAdvisor</h4><p>根据Pointcut，Advisor的不同实现，PointcutAdvisor提供了多种具体实现组合</p>
<h4 id="IntroductionAdvisor"><a href="#IntroductionAdvisor" class="headerlink" title="IntroductionAdvisor"></a>IntroductionAdvisor</h4><p>只有一个默认实现：DefaultIntroductionAdvisor</p>
<h3 id="Weaver"><a href="#Weaver" class="headerlink" title="Weaver"></a>Weaver</h3><p>通过Aspect封装了Pointcut和Advice之后，Weaver只需要关注目标对象和Aspect就可以了。</p>
<p>根据目标对象和Advice，织入器就可以完成织入，典型的织入器有：ProxyFactory，ProxyFactoryBean</p>
<h4 id="ProxyFactory"><a href="#ProxyFactory" class="headerlink" title="ProxyFactory"></a>ProxyFactory</h4><p>Spring最基本的织入器——ProxyFactory：</p>
<p><img src="https://ooo.0o0.ooo/2017/03/20/58cec4ff8c8fd.png" alt="ProxyFactory.png"></p>
<p>AdvicedSupport包含生成代理对象所需的信息</p>
<p>AopProxy抽象不同AOP实现（动态代理，CGLIB）</p>
<p>最终对ProxyFactory进行配置后就可以生成代理对象了，配置功能是从ProxyCreatorSupport继承而来，生成代理对象委托给具体的AopProxy实现类。</p>
<h4 id="ProxyFactoryBean"><a href="#ProxyFactoryBean" class="headerlink" title="ProxyFactoryBean"></a>ProxyFactoryBean</h4><p>与ProxyFactory功能类似，本质是一个产生代理对象的FactoryBean</p>
<h4 id="自动织入"><a href="#自动织入" class="headerlink" title="自动织入"></a>自动织入</h4><p>无论ProxyFactory还是ProxyFactoryBean都需要配置目标对象和Advice才能完成一个织入过程，自动织入可以借助IoC容器，在BeanPostProcessor阶段自动扫描完成所有织入动作。</p>
<p>整个自动织入过程可以描述为：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">for</span> bean in IoC container</span></div><div class="line">  <span class="keyword">if</span> bean isAutoProxyBean</div><div class="line">    return <span class="title">createProxy</span><span class="params">(bean)</span></div><div class="line">  <span class="keyword">else</span></div><div class="line">    return <span class="title">createInstance</span><span class="params">(bean)</span></div></pre></td></tr></table></figure>
<p>Spring默认提供了多个可用的AutoProxyCreator，可以根据bean name指定目标对象，扫描Advice生成代理对象，甚至可以全自动生成代理对象。</p>
<h3 id="TargetSource"><a href="#TargetSource" class="headerlink" title="TargetSource"></a>TargetSource</h3><p>作为目标对象的容器，TargetSource最重要的作用就是获取目标对象。</p>
<p>TargetSource不同的实现提供了目标对象singleton，prototype，热替换，对象池等多种管理形式。</p>
<p>在多数据源替换的场景还是很有用的。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spring之ApplicationContext]]></title>
      <url>https://zhanghtk.github.io/2017/03/19/Spring%E4%B9%8BApplicationContext/</url>
      <content type="html"><![CDATA[<p>相较于BeanFactory，ApplicationContext进一步扩展了基本功能。主要有：统一资源加载，国际化信息支持，容器内部事件发布，多配置模块加载的简化。</p>
<h2 id="统一资源加载"><a href="#统一资源加载" class="headerlink" title="统一资源加载"></a>统一资源加载</h2><p>在Spring中资源的表示和加载时分开的：使用Resource表示资源，使用Resource Loader加载资源。</p>
<p>二者与Application Context的关系：</p>
<p><img src="https://ooo.0o0.ooo/2017/03/19/58ce56622ec9d.png" alt="ResourceLoader.png"></p>
<p>从很多地方都能看出Spring优秀的设计，资源加载策略就是其中。</p>
<p>为什么说统一的资源加载？因为什么资源都能加载。</p>
<p>首先，Spring抽象了资源的表示以Resource表示各种资源的形式，根据具体形式又提供了例如ClassPathResource的具体形式。</p>
<p>其次，ResourceLoader抽象了资源查找定位策略的抽象，其分为大体可以分为两类：</p>
<ul>
<li>以DefaultResourceLoader为基础的，一般的ResourceLoader</li>
<li>以ResourcePatternResolver为基础的，批量查找的ResourceLoader</li>
</ul>
<p>容器启动是加载的配置文件所使用的资源路径协议也是在此定义的。</p>
<p>最后看看Application Context与Resource Loader的关系：Application Context是一个Resource Loader，更一般的情况Application Context还是ResourcePatternResolver</p>
<h2 id="国际化信息支持"><a href="#国际化信息支持" class="headerlink" title="国际化信息支持"></a>国际化信息支持</h2><p>Spring对国际化得支持不仅是针对还是对整个应用的支持，以MessageSource作为国际化信息的访问接口，封装了相应的信息查询，针对不同的需求做出了不同实现（例如热替换）。</p>
<p>Application Context同时继承了MessageSource，因此容器获得国际化的支持，对普通Bean可以通过注入MessageSource获得国际化的能力。</p>
<h2 id="容器内部事件发布"><a href="#容器内部事件发布" class="headerlink" title="容器内部事件发布"></a>容器内部事件发布</h2><p>标准的事件发布功能包含三个角色：自定义事件类型，事件监听接口，事件发布者。Spring对相关角色的定义：</p>
<p><img src="https://ooo.0o0.ooo/2017/03/19/58ce7c99afcc3.png" alt="事件发布.png"></p>
<p>Application Context继承ApplicationEventPublisher，将具体的实现委托给ApplicationEventMulticaster接口的实现类来实现。</p>
<p>具体的ApplicationEvent实现Spring提供了容器生命周期相关的和Web请求相关的事件类型，容器还支持自定义事件类型的发布。</p>
<h2 id="多配置模块加载的简化"><a href="#多配置模块加载的简化" class="headerlink" title="多配置模块加载的简化"></a>多配置模块加载的简化</h2><p>相较于BeanFactory，Application Context还提供多个配置文件加载的简化</p>
<h2 id="Application-Context"><a href="#Application-Context" class="headerlink" title="Application Context"></a>Application Context</h2><p>一言以蔽之，Application Context是这样的Bena容器：</p>
<p><img src="https://ooo.0o0.ooo/2017/03/19/58ce7f9a578b6.png" alt="Application Context.png"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[类加载器在Tomcat中的应用]]></title>
      <url>https://zhanghtk.github.io/2017/03/13/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%E5%9C%A8Tomcat%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/</url>
      <content type="html"><![CDATA[<h2 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h2><p>关于类加载器的文章有很多了，概括起来有如下几点：</p>
<ul>
<li>双亲委派模型<ul>
<li>自底向下检查类是否已加载</li>
<li>自顶向下尝试加载类</li>
</ul>
</li>
<li>上下文类加载器：解决顶层类加载器无法加载底层类加载器加载的类（这句话好绕口）</li>
<li>其他容易忽视的细节问题：<ul>
<li>一个类的加载器可能不止一个<ul>
<li>不同类加载器加载同一个类</li>
<li>同一个类加载器不同实例加载同一个类</li>
</ul>
</li>
<li>完成一次加载过程的类加载器也可能不止一个<ul>
<li>初始加载器：启动类的加载过程</li>
<li>定义加载器：真正完成类的加载工作</li>
</ul>
</li>
<li>系统或扩展路径下的class文件会优先被系统类加载器或扩展类加载器加载</li>
<li>loadClass方法抛出的是ClassNotFoundException</li>
<li>defineClass方法抛出的是NoClassDefFoundError</li>
<li>在不指定父类加载器的情况下，默认采用系统类加载器</li>
</ul>
</li>
</ul>
<h2 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h2><p>在Tomcat中对类加载器的要求稍微复杂一些：</p>
<ul>
<li>不同web app下不同的类要做到隔离，不能互相干扰</li>
<li>不同web app下相同的类要可以共享，避免重复加载</li>
</ul>
<p>以上两个功能根据两个类加载就可以实现：</p>
<ul>
<li>WebappClassLoader</li>
<li>CommonClassLoader</li>
</ul>
<p>Tomcat类加载器与Java自带类加载器组成的关系结构：</p>
<p><img src="https://ooo.0o0.ooo/2017/03/13/58c6ae1596e2d.png" alt="Tomcat类加载器架构.png"></p>
<h3 id="WebappLoader"><a href="#WebappLoader" class="headerlink" title="WebappLoader"></a>WebappLoader</h3><p>默认的WebappClassLoader主要由以下特点：</p>
<ul>
<li><p>加载/WebApp/WEB-INF/*下的内容</p>
</li>
<li><p>每个web app对应一个WebappLoader</p>
<p>确保不同web app的类由不同的WebappLoader实例加载</p>
</li>
<li><p>不遵循双亲委派</p>
<p>优先使用WebappClassLoader自己加载，而不是委托给父类加载确保隔离</p>
</li>
<li><p>避免Servlet API，java.， javax.相关类加载</p>
</li>
</ul>
<h3 id="CommonClassLoader"><a href="#CommonClassLoader" class="headerlink" title="CommonClassLoader"></a>CommonClassLoader</h3><ul>
<li><p>加载/common/*下的内容</p>
</li>
<li><p>统一加载容器和各个web app都需要的类</p>
</li>
<li><p>在容器启动阶段就将CommonClassLoader设置为上下文类加载器</p>
</li>
<li><p>所有WebappLoader的parent都是CommonClassLoader</p>
</li>
</ul>
<h3 id="联系"><a href="#联系" class="headerlink" title="联系"></a>联系</h3><ul>
<li><p>CommonClassLoader能加载的类都能够被CatalinaClassLoader和WebappClassLoader使用；</p>
</li>
<li><p>各个WebappClassLoader实例之间互相隔离</p>
</li>
<li><p>JasperLoader加载范围仅限JSP文件编译出的那个Class，方便丢弃实现热替换</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spring之BeanFactory]]></title>
      <url>https://zhanghtk.github.io/2017/03/13/Spring%E4%B9%8BBeanFactory/</url>
      <content type="html"><![CDATA[<p>Spring核心的功能是IoC和AOP，IoC又是AOP的基础。对于IoC，Spring提供了两种容器类型：</p>
<ul>
<li>BeanFactory</li>
<li>ApplicationContext</li>
</ul>
<p>ApplicationContext可以简单理解为是BeanFactory的升级版。</p>
<p>本文试图讨论与BeanFactory相关的大致过程。</p>
<h3 id="调用实现"><a href="#调用实现" class="headerlink" title="调用实现"></a>调用实现</h3><h4 id="直接编码"><a href="#直接编码" class="headerlink" title="直接编码"></a>直接编码</h4><p>BeanFactory是基础的IoC容器，提供了完成的IoC服务。先看看BeanFactory和Bean之间的关系：</p>
<p><img src="https://ooo.0o0.ooo/2017/03/12/58c4fc455dda9.png" alt="BeanFactory.png"></p>
<p>BeanFactory，BeanDefinitionRegistry，BeanDefinition都是基本接口。其中：</p>
<ul>
<li>BeanFactory定义了基本的查询相关方法；</li>
<li>BeanDefinitionRegistry定义了Bean注册管理的相关方法；</li>
<li>BeanDefinition定义容器中的一个Bean实例；</li>
</ul>
<p>DefaultListableBeanFactory实现了Bean注册，查询相关方法，Bean之间的关系则通过Bean实例维护，以上构成了一个最基本的IoC结构。</p>
<p>使用Spring IoC最直接的方式就是依赖上述几个类来加载、维护、查询Bean实例，只是当更先进的方式到来后，直接编码的方式已经离我们很远了。</p>
<h4 id="外部配置"><a href="#外部配置" class="headerlink" title="外部配置"></a>外部配置</h4><p>程序员总是希望以更便捷的方式维护配置信息，配置文件是其中一个手段，也是Spring配置最常使用的一种方式。</p>
<p>Spring配置文件最常见的方式是XML形式，其实还有Properties，得益于良好可扩展性，我们甚至可以自定义配置文件及加载方式。</p>
<p>BeanDefinitionReader通过处理外部配置文件，根据不同的配置文件格式，BeanDefinitionReader不同子类将相应的配置文件内容加载并解析映射到BeanDefinition，然后将映射后的BeanDefinition测试到BeanDefinitionRegistry。</p>
<p>加入BeanDefinitionRegistry后的类图：</p>
<p><img src="https://ooo.0o0.ooo/2017/03/12/58c5115a0c0fa.png" alt="BeanFactory.png"></p>
<h3 id="背后的细节"><a href="#背后的细节" class="headerlink" title="背后的细节"></a>背后的细节</h3><p>IoC容器功能实现简单可以分类两个阶段：</p>
<ul>
<li>容器启动</li>
<li>Bean实例化</li>
</ul>
<h4 id="容器启动"><a href="#容器启动" class="headerlink" title="容器启动"></a>容器启动</h4><p>容器启动主要的过程包括了：</p>
<ol>
<li>加载配置</li>
<li>分析配置信息</li>
<li>装配到BeanDefinition</li>
<li>其他后续</li>
</ol>
<p>在整个启动阶段可以通过BeanFactoryPostProcessor，在实例化阶段开始之前，对注册到容器的BeanDefinition保存的原始数据做出修改。</p>
<p>Spring自带了几个BeanFactoryPostProcessor的实现：</p>
<ul>
<li>PropertyPlaceholderConfigurer：占位符替换</li>
<li>PropertyOverrideConfigurer：替换bean字段</li>
<li>CustomEidtorConfigurer：配置解析</li>
</ul>
<h4 id="Bean实例化"><a href="#Bean实例化" class="headerlink" title="Bean实例化"></a>Bean实例化</h4><p>对于BeanFactory，当容器启动后只有当客户端调用<code>getBean()</code>方法时才会触发实例化阶段活动。</p>
<p>完整的Bean实例化过程如下：</p>
<p><img src="https://ooo.0o0.ooo/2017/03/12/58c51014ca1e0.png" alt="Bean实例化.png"></p>
<p>几个说明的点：</p>
<ol>
<li><p>Bean的实例化</p>
<p>实例化有两种方式实现：</p>
<ul>
<li>反射</li>
<li>CGLIB（默认）</li>
</ul>
<p>实例化完成后，不直接返回生成的实例化对象，使用BeanWrapper对对象进行包裹</p>
</li>
<li><p>设置对象属性</p>
<p>BeanWrapper使用PropertyEditor对获取的属性值做出相应转换，设置对象属性值</p>
</li>
<li><p>设置Aware依赖</p>
<p>容器根据Aware接口，对Bean实例设置相应属性</p>
</li>
<li><p>BeanPostProcessor</p>
<p>一般用于筛选bean，对bean实例化过程扩展，AOP更多在此生成代理对象</p>
<p>ApplicationContext在此阶段设置Aware依赖</p>
</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[浅谈测试驱动开发]]></title>
      <url>https://zhanghtk.github.io/2017/02/05/%E6%B5%85%E8%B0%88%E6%B5%8B%E8%AF%95%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91/</url>
      <content type="html"><![CDATA[<p>近两日参加了名为“软件测试质量体系最佳实践”的分享，其中着重介绍了质量体系的建设，测试的经验以及方法，就我个人最大的收获更多的是关于TDD的思考，在此简单记录。</p>
<h1 id="Bug的影响"><a href="#Bug的影响" class="headerlink" title="Bug的影响"></a>Bug的影响</h1><p>不成熟的团队中一个常见情况：</p>
<p>频繁被突发问题打断，响应式的处理，目标达成率低，可以称这样的团队为响应式的团队。</p>
<p>为什么频繁的响应Bug会严重消耗团队资源？</p>
<ol>
<li>完整的Bug处理的过程时间长</li>
<li>一个Bug导致多个Bug的产生</li>
<li>人员缺乏动力</li>
</ol>
<h1 id="预防Bug"><a href="#预防Bug" class="headerlink" title="预防Bug"></a>预防Bug</h1><p>然而解决Bug并不能算作突出的贡献，针对Bug的预防工作要优于Bug解决。从被动的救火到主动的预防问题发生，减少突发问题。</p>
<p>一个团队的重要指标，是有效代码的产出，而不是代码的产出。</p>
<p>有效代码，如同字面意思，有效的，可复用的，没有大量Bug，可以赚钱的代码。</p>
<p>如何保证代码有效？测试！</p>
<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>手工测试无法做到连续提供测试服务，存在间断，代码修改后测试报告随即失效。为了解决测试的间断问题，必须引入自动化测试。</p>
<p>开发工作中耗时最多的是在调试，如果能减少问题的出现，避免反复调试，可以节省大量的时间、精力。</p>
<p>因此，测试并不会让团队的工作量出现明显增加，最终开发与测试的人数趋于接近。</p>
<p>测试短期可以帮助我们找Bug，长期可以帮助我们建设质量体系。</p>
<h1 id="质量体系"><a href="#质量体系" class="headerlink" title="质量体系"></a>质量体系</h1><p>系统的健康状况，项目的完成情况应当从质量体系中直观，实时的获取，而不是通过大量的会议，讨论得出。</p>
<p>数据的三个来源</p>
<ul>
<li><p>用例库</p>
<p>积累的测试用例</p>
<p>要求能复用（良好的测试框架）</p>
<p>能够与其它平台，系统方便集成（一个test case对应多个test Run）</p>
</li>
<li><p>缺陷库</p>
<p>Bug的完整生命周期记录</p>
</li>
<li><p>结果库</p>
<p>每次自动化测试的结果</p>
<p>最小的单位不是test case，而是test run</p>
</li>
</ul>
<p>质量体系，不仅用于预防问题，长远看还需要提供数据支持，需要辅助决策，辅助管理。</p>
<h1 id="团队"><a href="#团队" class="headerlink" title="团队"></a>团队</h1><p>当一个团队可以很好的预防问题的发生时，可以称这样的团队为建设型的团队。</p>
<p>传统的瀑布模型中开发完成开始测试是导致项目进度缓慢的一个重要原因。</p>
<p>如何让开发与测试并行？测试始终伴随开发，甚至优先于开发。</p>
<p>开发，测试并行的三个重要保障：需求文档，开发文档，测试文档</p>
<h1 id="TDD"><a href="#TDD" class="headerlink" title="TDD"></a>TDD</h1><p><strong>文档评审</strong></p>
<p>从执行过程上来看，当需求文档出来后，开发和测试需要同时整理对应文档，然后进入评审环节。</p>
<p>需求作为开发，测试的输入项，要求需求文档不能出现偏差。</p>
<p>从制度上可以做出一些规范化，例如：</p>
<ul>
<li>需求文档、开发文档、测试文档作为三个关键文档，任何一个都一定不能或缺</li>
<li>三个关键文档都要有评审，三次的评审都要求产品、开发、测试负责的人员到场确认</li>
<li>文档可以驳回，但确认后的文档不可更改</li>
<li>任何一个文档出现滞后，都要记录，分析问题</li>
</ul>
<p>文档内容要细致，需求文档作为开发文档和测试文档输入，尤其重要。</p>
<p>各个文档的基本标准：</p>
<ul>
<li>需求文档：明确各步骤输入输出</li>
<li>测试文档：明确各个测试点，需要进行什么测试，是否要求自动化等信息，设计（复用）测试框架</li>
<li>开发文档：提供设计架构，需要细致到开发阶段填充代码就可以了</li>
</ul>
<p>一个优秀文档的重要标准：评审打回次数。</p>
<p><strong>开发，测试并行</strong></p>
<p>三个文档评审结束后，开发和测试同时开始工作。</p>
<h1 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h1><p><strong>关于需求分析</strong></p>
<p>需求分析需要专业的人专门处理，需求分析的过程如同医生看病：</p>
<p>医生不能问病人想吃什么药，想怎么治疗，而是需要找到病人病因</p>
<p>产品不能表面的询问用户想要什么，而是要发现用户的真实需求</p>
<p>需求分析过程展开：</p>
<ol>
<li><p>获取</p>
<p>得到最原始的需求，这些需求可能是凌乱的，甚至是矛盾的，不能直接用来开发</p>
</li>
<li><p>分析</p>
<p>剔除原始需求中的噪音，获取真实的需求，这个阶段产品应该基本确认需求</p>
</li>
<li><p>细化</p>
<p>产出原型，与美术，设计确认沟通，明确每步的输入输出</p>
</li>
<li><p>固化</p>
<p>与用户确认，得到最终版本的需求文档</p>
</li>
</ol>
<p><strong>关于团队成员能力</strong></p>
<ol>
<li>不能迁就最低能力人员，要推动团队成长，进步</li>
<li>开发与测试要互相促进，测试需要考虑开发设计的文档是否可以进行测试，有哪些改进，开发需要考虑代码的覆盖</li>
<li>通过模板让人员能力可流动，可转化。总结高质量方法，模板，流程给团队复用，提高整体质量</li>
</ol>
<p><strong>关于测试</strong></p>
<ul>
<li>Bug分级</li>
<li>不要首先搞UI测试</li>
<li>尽量使用真实数据，边界数据</li>
<li>避免对其它模块，代码的依赖</li>
<li>发布时不一定就能做到所有测试都通过</li>
<li>测试要可复用，粒度，范围要注意</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[【翻译】《OSGI官方指南》首页]]></title>
      <url>https://zhanghtk.github.io/2017/01/25/%E3%80%90%E7%BF%BB%E8%AF%91%E3%80%91%E3%80%8AOSGI%E5%AE%98%E6%96%B9%E6%8C%87%E5%8D%97%E3%80%8B%E9%A6%96%E9%A1%B5/</url>
      <content type="html"><![CDATA[<p>说明：本翻译原计划发布于并发编程网，但因个人原因拖延，导致其他网友先于发布，在此仅作记录。督促自己改善拖延问题。</p>
<hr>
<h1 id="开发者"><a href="#开发者" class="headerlink" title="开发者"></a>开发者</h1><p>开始OSGI之旅，你将得到：复用组件构建管理高度复杂的系统，让编写代码更容易，管理动态部署，更早的发现错误，远程部署，发现并解决你现在可以不知道的问题。</p>
<p>如果你正在使用Java开发软件，OSGi应该在你的工具箱。</p>
<h2 id="为什么选择OSGi"><a href="#为什么选择OSGi" class="headerlink" title="为什么选择OSGi"></a>为什么选择OSGi</h2><p>OSGI提供一个模块化构建用方式用于现代大规模分布式系统以及小型系统，嵌入式应用和设备网络。从内部和现成模块构建的系统明显增加了软件产品和解决方案的复用，并延长了其生命周期，减小了开发和维护的费用。OSGi编程模型确保实现基于组件的系统。</p>
<p>OSGi技术是成功的，因为它提供了一个非常成熟的组件系统，并在大量的环境中使用。OSGi组件系统被用于构建高度复杂的应用程序，例如IDE，应用服务器，应用程序框架，电信和服务解决方案，工业自动化，住宅网关，车载远程信息处理系统等。</p>
<h2 id="为OSGi工作"><a href="#为OSGi工作" class="headerlink" title="为OSGi工作"></a>为OSGi工作</h2><p>垂直和跨行业需要“专家组”提供定制，以不影响OSGi服务平台架构的完整性。当前专家组包括企业专家组，住宅专家组和核心平台专家组。成员在OSGi董事会批准的情况下提议并建立新EG的章程。</p>
<p>你希望OSGi使用你的协议吗？作为会员的好处，OSGi成员有资格为新协议创建<a href="https://www.osgi.org/developer/specifications/" target="_blank" rel="external">规范</a>。专家组正在开发OSGi设备抽象层，以扩展OSGi的覆盖范围，与其他行业联盟合作。成员正在致力于物联网和云计算。 那么你对OSGi的议程是什么？</p>
<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>联盟提供了许多资源来探索OSGi，并开始在您的开发项目中使用OSGi。<a href="https://www.osgi.org/enroute/" target="_blank" rel="external">enRoute</a>是一个实用和高效的资源用于构建和实现模块化应用程序。</p>
<h2 id="认证"><a href="#认证" class="headerlink" title="认证"></a>认证</h2><p>证明您的OSGi专业知识。获得认证。 OSGi成员提供培训课程，联盟提供<a href="https://www.osgi.org/osgi-certification/developer-certification/" target="_blank" rel="external">OSGi认证</a>测试。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Lambda表达式]]></title>
      <url>https://zhanghtk.github.io/2017/01/16/Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h1 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h1><p><strong>Lambda表达式</strong>:一段可以传递的代码</p>
<p>Java8之前不能单纯的传递代码,必须先创建对象,以对象为载体,通过传递对象达到传递代码的目的.</p>
<p>为了简化传递代码，在Java8中引入了对lambda表达式的支持。</p>
<p>Lambda表达式中代码的传递是以函数为载体的，一个函数最基本的构成为：</p>
<ul>
<li>函数声明：<ul>
<li>返回值</li>
<li>函数名</li>
<li>参数列表</li>
</ul>
</li>
<li>函数体</li>
</ul>
<p>返回值可以根据函数体的执行结果确定，如果函数只调用一次，那么函数名也可以省略（匿名）。</p>
<p>一个函数就可以概括成参数和函数体（即就是表达式）。</p>
<p>所以Lambda表达式的语法为：<code>(参数列表声明)-&gt;{表达式}</code></p>
<h1 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h1><p><strong>函数式接口</strong>：只包含一个抽象方法的接口</p>
<p>Java8中lambda表达式能做的唯一一件事：转换函数式接口</p>
<p>如果一个方法的参数为函数式接口的对象，可以使用Lamdba表达式来替代创建函数式接口的对象。</p>
<p>例如：</p>
<p><code>Comparator</code>接口只有<code>int compare(T o1, T o2);</code>这一个抽象方法，所以是一个函数式接口。</p>
<p><code>Arrays.sort(T[] a, Comparator&lt;? super T&gt; c)</code>接收<code>Comparator</code>的对象，而<code>c.compare()</code>函数体内包含实际执行的代码.</p>
<p>Java8之前：</p>
<p>调用<code>Arrays.sort(T[] a, Comparator&lt;? super T&gt; c)</code>之前必须先创建<code>Comparator</code>接口实例对象。</p>
<p>Java8中lambda表达式对开发人员可以简单理解为：</p>
<p>传入一个lambda表达式，系统会自动创建<code>Comparator</code>对象，调用该对象的<code>compare()</code>方法时会执行lambda表达式中的代码。</p>
<p>实际的编译，运行过程并不是上面描述的这样，但我们可以简单的这么理解。</p>
<p>实际上lambda表达式依赖了JDK7引入的<code>invokedynamic</code>指令，在多数情况下，lambda都拥有比内部类更好的性能。</p>
<h1 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h1><p>Lambda表达式的本质是传递函数，如果现有的函数完全能达到我们的需求，我们就可以直接传递函数，这就是方法引用。</p>
<p>方法引用的基本语法：<code>类/对象::方法</code>，可能存在的对应关系有：</p>
<ul>
<li>对象：：实例方法</li>
<li>类：：静态方法</li>
<li>类：：实例方法</li>
</ul>
<p>第三种情况最为特殊，表达的意思是第一个参数作为方法调用的对象。</p>
<p>关于重载方法的问题，根据参数类型自动匹配。</p>
<p>可以作为对象的不仅有普通对象，还有<code>this</code>和<code>super</code>两个隐含对象。</p>
<p>对构造器则使用<code>类::new</code>的形式调用，根据上下文类型信息会比配构造器。</p>
<h1 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h1><p>lambda表达式不同于函数的地方：</p>
<p>函数是独立的，而lambda包含上下文，lambda可以引用定义它的上下文变量（闭包）。</p>
<p>Java8之前为了实现对上下文的引用，使用的是内部类访问外部的final局部变量，Java8中放宽了这条规则，不要求变量必须使用final声明了，但是仍然要求不改变变量，编译器会对做部分此检查。</p>
<p>如果变量是一个实例变量，编译器无法检查不变性，但是不建议这么使用。</p>
<p>lambda表达式的作用域与嵌套它的上下文环境一样。</p>
<p>在lambda表达式中使用<code>this</code>指向的是创建该lambda表达式的方法的对象，这也间接可以说明lambda表达式不是由内部类实现的。</p>
<h1 id="默认方法"><a href="#默认方法" class="headerlink" title="默认方法"></a>默认方法</h1><p>Java8中允许接口中定义并实现方法，这样的方法称为默认方法。</p>
<ul>
<li><p>优点：方便的扩展接口方法</p>
<p>例如为<code>Collectoin</code>接口添加一个<code>forEach</code>方法，如果没有默认方法的支持，我们需要为每个子类增加对应的实现，这是灾难式的，但默认方法只需要在一个接口中添加就可以了。</p>
</li>
<li><p>缺点：方法冲突</p>
<p>在继承体系中，继承的接口与接口，或接口与类可能实现了相同的方法，造成冲突。</p>
<p>Java8的规则：</p>
<ul>
<li>接口与接口的方法冲突：不管有没有接口实现了方法，子类中一律必须重新实现</li>
<li>接口与类的方法冲突：子类默认继承类的实现方法（类优先）</li>
</ul>
</li>
</ul>
<p>Java8允许在接口中定义方法可以将原本工具类中的静态方法定义到接口中，避免了接口和工具类的分离。</p>
<p>同时将原本高层的工具类中的方法分散到各个子接口中，可以更清楚的使用类型。</p>
<p>例如：原本定在<code>Collections</code>中的<code>nCopies</code>方法现在定义在<code>List</code>中，写法更加清晰：</p>
<p>之前：<code>Collections.nCopies(10, &quot;Hello&quot;);</code></p>
<p>现在：<code>List.nCopies(10, &quot;Hello&quot;);</code></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[责任链模式]]></title>
      <url>https://zhanghtk.github.io/2017/01/16/%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<blockquote>
<p>当你想要让一个以上的对象有机会能够处理某个请求的时候,就是用责任链模式(Chain of Responsibility Pattern).</p>
<p>——《Head First 设计模式》</p>
</blockquote>
<p>所属类别:行为型模式。</p>
<p>典型使用场景：一个事件或请求需要多步判断/处理</p>
<p>针对这样的场景直接编码会造成哪些问题？</p>
<ol>
<li>多步的判断、处理集中在一起，违反单一职责</li>
<li>事件的处理依赖具体的过程，而不是行为或接口，违反依赖倒置</li>
<li>维护期需要新的处理过程时，必须修改原有代码，违反开闭原则</li>
</ol>
<p>首先，可以对具体在一起的业务代码代码进行了拆分，使业务逻辑的处理分散到多个模块；</p>
<p>其次，为了统一整个请求处理逻辑，抽象接口，整个请求的处理过程对外只需要暴露入口。</p>
<p>实现以上过程的UML类图如下：</p>
<p><img src="https://ooo.0o0.ooo/2017/01/04/586ceaf92cc2c.png" alt="责任链模式.png"></p>
<p>责任链模式处理请求的一般过程：</p>
<p><img src="https://ooo.0o0.ooo/2017/01/04/586cef1ec3144.png" alt="责任链模式处理流程 (1).png"></p>
<p>责任链模式的优点：</p>
<ol>
<li>对客户端来说并不能感知到责任链的存在（迪米特法则）；</li>
<li>整个责任链的配置过程可以使用配置方式组装，后续处理节点的调整可以修改配置（开闭原则）；</li>
<li>请求发送者与处理者的解耦</li>
<li>简化了请求处理过程（单一职责）</li>
</ol>
<p>典型的责任链模式使用场景：JavaEE Servlet Filter</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[命令模式]]></title>
      <url>https://zhanghtk.github.io/2017/01/16/%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p>提到命令模式先别管他干什么，名字里有命令那肯定离不开命令，好的，开始编码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">commandSender.order();</div></pre></td></tr></table></figure>
<p>写完收工！当然是不行的，要面向对象，要遵循设计模式的几大原则的。</p>
<p>（到底是几？我也不知道，有人说是五大原则，也有人说六大原则，还有说七大原则）</p>
<p>简单划分一下职责，很自然的就能想到三个角色：</p>
<ol>
<li>命令的发出者</li>
<li>命令</li>
<li>命令的接收者</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Command command = commandSender.createCommend();</div><div class="line">commandReceiver.execute(command);</div></pre></td></tr></table></figure>
<p>《Head First 设计模式》中是以一个为多个电器设计通用遥控器的例子开始介绍命令模式的。</p>
<p>假如我们认为遥控器是命令的发出者，那么谁是命令的接收者呢？</p>
<p>我们无法根据命令就知道接受者到底是电视机，电灯还是其他。</p>
<p>那么就有两种选择了，</p>
<p>第一种：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Command command = commandSender.createCommand();</div><div class="line">CommandReceiver commandReceiver = commandSender.getCommandReceiver();</div><div class="line">commandReceiver.execute(command);</div></pre></td></tr></table></figure>
<p>第二种：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Command command = commandSender.createCommandWithReceiver();</div><div class="line">CommandReceiver commandReceiver = command.getReceiver();</div><div class="line">commandReceiver.execute(command);</div></pre></td></tr></table></figure>
<p>如果遥控器是命令的发出者，第一种方式将造成遥控器与电器紧密的耦合在一起。</p>
<p>当电器发生变化，遥控器也必须跟随发生变化，这就违反开闭原则。</p>
<p>第二种方式其实就是命令模式，只不过习惯上命令模式把命令发出者成为调用者。UML类图如下：<br><img src="https://ooo.0o0.ooo/2017/01/09/5873103fcee67.png" alt="19. 命令模式.png"></p>
<p>调用者封装命令，命令的具体执行由调用者委托给具体的命令。</p>
<p>命令又封装了具体的命令接受者，命令的执行委托给命令的接受者。</p>
<p>整个命令的执行起来时序图如下：</p>
<p><img src="https://ooo.0o0.ooo/2017/01/09/5873353bc9c8e.png" alt="命令模式时序图.png"></p>
<p>除了遥控器的例子《Head First 设计模式》中还举了个餐厅订餐的例子，其中角色对应关系如下：</p>
<table>
<thead>
<tr>
<th>命令模式</th>
<th>遥控器</th>
<th>餐厅</th>
</tr>
</thead>
<tbody>
<tr>
<td>客户端</td>
<td>用户</td>
<td>顾客</td>
</tr>
<tr>
<td>调用者</td>
<td>遥控器</td>
<td>女招待</td>
</tr>
<tr>
<td>命令</td>
<td>按钮</td>
<td>订单</td>
</tr>
<tr>
<td>命令接受者</td>
<td>电器</td>
<td>厨师</td>
</tr>
</tbody>
</table>
<p>关于点餐的例子我觉得不是很恰当，当然也可能是我理解的不对，书上描述顾客创建订单，订单作为命令包含具体的命令接受者厨师，这点怎么都不能接受，谁家点餐的时候会关注厨师呢？</p>
<p>我的理解应该是顾客到店前，女招待，订单，厨师已经做好了准备。</p>
<p>顾客要下单时直接找女招待就可以了，由女招待根据订单找厨师做菜。</p>
<p>在通俗的说就是客户端只需要与调用者交互，不需要关心其他。其他部分的装配应给交给系统（例如，Spring）</p>
<p>理清了这层关系，我们把目光停留在调用者身上。</p>
<p>对于客户端来说，调用实际是从调用者这里发出的，换句话说，调用者实际上决定了命令实际的执行时机。</p>
<p>假设一个场景，调用者和命令的关系不是一对一，而是一对多。</p>
<p>当多个命令排队，依次等待调用者执行命令，这不就是队列请求模型？</p>
<hr>
<p>命令模式的总结：</p>
<p>所属类别：行为模式</p>
<p>最大的优点：调用者与接受者的充分解耦</p>
<p>基于命令模式可以方便的做出如下扩展：</p>
<ol>
<li>调用者可以不知道接受者，甚至是不知道具体的命令，只需要预留接口；</li>
<li>一个命令中可以由多个命令组成，当此命令被调用时可以，触发多个命令的调用：宏命令；</li>
<li>方便命令执行前后增加切面，方便记录，回滚操作；</li>
<li>延迟命令执行的时机：队列请求模式；</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用CI发布Hexo]]></title>
      <url>https://zhanghtk.github.io/2017/01/07/%E4%BD%BF%E7%94%A8CI%E5%8F%91%E5%B8%83Hexo/</url>
      <content type="html"><![CDATA[<p><strong>测试使用CI发布Hexo</strong></p>
<p>从此刻开始本站开始使用<a href="https://travis-ci.org" target="_blank" rel="external">Travis-CI</a>发布。<br>博客已有两个月没有更新内容了，年底各项事宜又赶上上冲刺，这一个月忙的焦头烂额。<br>整理了一点东西准备发布也就放弃了，整个发布都得手工执行，今年起始的目标就有使用CI让开发更高效。<br>今天在博客上实践了一下持续集成，一口气把之前整理的几篇文章都发布了，整个流程还是简单了不少。</p>
<p>网上关于Travis-CI的说明还是比较多的，我主要参考了<a href="http://blog.csdn.net/woblog/article/details/51319364" target="_blank" rel="external">这里</a>。</p>
<p>但是我掉了一个坑，我使用的主题是<a href="http://theme-next.iissnan.com/" target="_blank" rel="external">nexT</a>，直接从Github上clone得到并做了自定义，同时没有删除next主题文件夹内的<code>.git</code>文件夹。所以博客的版本控制没有直接管理next主题文件夹，在提交的时候整个next主题文件夹就没有提交上去，所以不能正确生成页面文件，导致最终网站的所有页面都成了空白页面。</p>
<p>解决办法很简单，删除themes/next的.git和.gitignore，加入版本控制提交就可以了。</p>
<p>同时我还根据报错调整了<code>.travis.yml</code>, like this:</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="attr">anguage:</span> node_js</div><div class="line"><span class="attr">node_js:</span> stable</div><div class="line"></div><div class="line"><span class="attr">install:</span></div><div class="line"><span class="bullet">  -</span> npm install -g hexo</div><div class="line"><span class="bullet">  -</span> npm install -g hexo-cli</div><div class="line"><span class="bullet">  -</span> npm install</div><div class="line"></div><div class="line"><span class="attr">script:</span></div><div class="line"><span class="bullet">  -</span> hexo clean</div><div class="line"><span class="bullet">  -</span> hexo g</div><div class="line"></div><div class="line"><span class="attr">after_script:</span></div><div class="line"><span class="bullet">  -</span> cd ./public</div><div class="line"><span class="bullet">  -</span> git init</div><div class="line"><span class="bullet">  -</span> git config user.name <span class="string">"zahnghTK"</span></div><div class="line"><span class="bullet">  -</span> git config user.email <span class="string">"510223064@qq.com"</span></div><div class="line"><span class="bullet">  -</span> git add .</div><div class="line"><span class="bullet">  -</span> git commit -m <span class="string">"Update docs"</span></div><div class="line"><span class="bullet">  -</span> git push --force --quiet <span class="string">"https://$&#123;GH_TOKEN&#125;@$&#123;GH_REF&#125;"</span> master:master</div><div class="line"></div><div class="line"><span class="attr">branches:</span></div><div class="line"><span class="attr">  only:</span></div><div class="line"><span class="bullet">    -</span> hexo</div><div class="line"><span class="attr">env:</span></div><div class="line"><span class="attr"> global:</span></div><div class="line"><span class="attr">   - GH_REF:</span> github.com/zhanghTK/zhanghTK.github.io.git</div></pre></td></tr></table></figure>
<p>好啦，本篇文章就到这里，2017起始，容我水一文。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[2016's Summary]]></title>
      <url>https://zhanghtk.github.io/2016/12/30/%E4%BA%8C%E9%9B%B6%E4%B8%80%E5%85%AD%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<h2 id="2016’s-Summary"><a href="#2016’s-Summary" class="headerlink" title="2016’s Summary"></a>2016’s Summary</h2><table>
<thead>
<tr>
<th>时间</th>
<th>任务</th>
</tr>
</thead>
<tbody>
<tr>
<td>2016.01</td>
<td>开始阅读《Java核心技术》，《Head First Java》</td>
</tr>
<tr>
<td>2016.02</td>
<td><a href="https://github.com/zhanghTK/HelloJava" target="_blank" rel="external">阅读《Java核心技术》完成，《Head First Java》</a></td>
</tr>
<tr>
<td>2016.03</td>
<td><a href="https://github.com/zhanghTK/HelloDesignPattern" target="_blank" rel="external">阅读《Head First 设计模式》完成一半</a></td>
</tr>
<tr>
<td>2016.04</td>
<td>阅读《架构探险》完成一半，《看透Spring MVC》完成一半</td>
</tr>
<tr>
<td>2016.05</td>
<td>Hibernate4学习，协助强锦昕同学完成了毕业设计的编码工作（<a href="https://github.com/zhanghTK/PrimalityTesting" target="_blank" rel="external">素性检测</a> ）</td>
</tr>
<tr>
<td>2016.06</td>
<td>阅读《Spring实战》完成一半，《Spring Boot实战》完成</td>
</tr>
<tr>
<td>2016.07</td>
<td>搭建<a href="http://zhangh.tk/" target="_blank" rel="external">博客</a>，<a href="http://zhangh.tk/2016/07/31/HTML%E4%B8%8ECSS%E5%B0%8F%E8%AE%B0/" target="_blank" rel="external">阅读《Head First HTML CSS》完成</a>，了解Docker，Dubbo</td>
</tr>
<tr>
<td>2016.08</td>
<td><a href="http://zhangh.tk/2016/08/27/%E3%80%8A%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E6%80%9D%E7%BB%B4%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/" target="_blank" rel="external">阅读《函数式编程思维》完成</a>，《MySQL必知必会》完成</td>
</tr>
<tr>
<td>2016.09</td>
<td><a href="http://zhangh.tk/2016/09/29/%E3%80%8AJava%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/" target="_blank" rel="external">阅读《Java并发编程实战》完成</a>， 阅读《Head First Servlet&amp;JSP》完成不包含JSP部分</td>
</tr>
<tr>
<td>2016.10</td>
<td><a href="https://github.com/zhanghTK/HelloMyBatis" target="_blank" rel="external">阅读《Java Persistence with MyBatis 3》完成</a>，参加了“编码武者”线下培训<a href="http://zhangh.tk/2016/10/22/%E8%87%AA%E4%B8%8B%E8%80%8C%E4%B8%8A%E7%9A%84%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5/" target="_blank" rel="external">1</a>,<a href="http://zhangh.tk/2016/10/22/%E4%BB%8E%E4%BE%9D%E8%B5%96%E5%AE%9E%E7%8E%B0%E5%88%B0%E4%BE%9D%E8%B5%96%E8%A1%8C%E4%B8%BA/" target="_blank" rel="external">2</a>,<a href="http://zhangh.tk/2016/10/22/%E8%BF%AA%E7%B1%B3%E7%89%B9%E6%B3%95%E5%88%99%E2%80%94%E2%80%94%E5%90%88%E7%90%86%E7%9A%84%E5%B0%81%E8%A3%85/" target="_blank" rel="external">3</a></td>
</tr>
<tr>
<td>2016.11</td>
<td>翻译《Spring Data官方文档》第四章,<a href="https://github.com/zhanghTK/HelloIoC" target="_blank" rel="external">临摹了一个IoC容器Demo</a>，阅读《Effective Java》完成</td>
</tr>
<tr>
<td>2016.12</td>
<td><a href="https://github.com/zhanghTK/HelloStruts1" target="_blank" rel="external">模仿Struts1实现一个MVC框架</a>，阅读《深入理解Java虚拟机》完成</td>
</tr>
</tbody>
</table>
<hr>
<p>2016年的改善：</p>
<ol>
<li>熟悉了Java以及相关的工具</li>
<li>对日常开源框架大体有了了解</li>
<li>代码质量整体提升</li>
</ol>
<p>2016年的不足：</p>
<ol>
<li>乱，学习没有计划，尤其上半年，基础的积累不够，追逐时髦技术；</li>
<li>懒，产出不多，很多内容停留在读的层面，缺乏实现，理解不够不深入；</li>
<li>急，书读的囫囵吞枣，实践不够，实践的代码可维护性差；</li>
</ol>
<hr>
<h2 id="2017‘s-Flag"><a href="#2017‘s-Flag" class="headerlink" title="2017‘s Flag"></a>2017‘s Flag</h2><p><img src="https://ooo.0o0.ooo/2016/12/30/586615ad1ca69.jpg" alt="2017任务"></p>
<p><img src="https://ooo.0o0.ooo/2016/12/30/586615ff1a321.jpg" alt="阅读计划"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[【翻译】SpringData官方文档第四章]]></title>
      <url>https://zhanghtk.github.io/2016/11/27/%E3%80%90%E7%BF%BB%E8%AF%91%E3%80%91SpringData%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3%E7%AC%AC%E5%9B%9B%E7%AB%A0/</url>
      <content type="html"><![CDATA[<p>说明：本翻译<a href="http://ifeve.com/repositories-custom-implementations/" target="_blank" rel="external">4.6</a>和<a href="http://ifeve.com/spring-data-4-7/" target="_blank" rel="external">4.7</a>段发布在<a href="http://ifeve.com/" target="_blank" rel="external">并发编程网</a>,其他段落为了熟悉上下文而翻译，没有精校。首次参与翻译任务，翻译的不好请指正。</p>
<hr>
<h1 id="第四章-使用Spring-Data-Repositories"><a href="#第四章-使用Spring-Data-Repositories" class="headerlink" title="第四章 使用Spring Data Repositories"></a>第四章 使用Spring Data Repositories</h1><p>Spring Data repository abstraction目的是为了显著的简化必要的样板式代码来为多种持久化数据存储实现数据层。</p>
<blockquote>
<p>重要</p>
<p>本章解释Spring Data repositories核心的概念和接口。Spring Data repository documentation 与 你的模块。本章这些信息是从Spring Data Commons模块获取的。它使用了JPA模块的配置和代码示范,命名引用覆盖XML配置，它支持所有的Spring Data模块支持的repository API，Repository查询关键字覆盖被repository 接口一般的关键字查询方法。你的模块特性的细节信息，查询文档对应模块。</p>
</blockquote>
<h2 id="4-1-核心概念"><a href="#4-1-核心概念" class="headerlink" title="4.1 核心概念"></a>4.1 核心概念</h2><p>Spring Data repository抽象接口的核心是<code>Repository</code>（可能没有那么惊喜）。它需要管理实体类以及实体类的id作为参数。此接口主要用作是获取要使用的类型接口并帮助扩展这个接口。</p>
<p><code>CrudRepository</code>为被管理的实体类提供复杂CRUD功能。</p>
<h2 id="4-2-查询方法"><a href="#4-2-查询方法" class="headerlink" title="4.2 查询方法"></a>4.2 查询方法</h2><p>标准的CRUD功能repositories通常有查询底层数据库。</p>
<p>在Spring Data中，分词声明这些查询变成了四个步骤的过程：</p>
<ol>
<li><p>声明一个接口继承<code>Repository</code>或者它的一个子类，并且指定要被处理的实体类和Id类型。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">PersonRepository</span> <span class="keyword">extends</span> <span class="title">Repository</span>&lt;<span class="title">Person</span>, <span class="title">Long</span>&gt; </span>&#123; … &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>在接口中声明查询方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">PersonRepository</span> <span class="keyword">extends</span> <span class="title">Repository</span>&lt;<span class="title">Person</span>, <span class="title">Long</span>&gt; </span>&#123;</div><div class="line">  <span class="function">List&lt;Person&gt; <span class="title">findByLastname</span><span class="params">(String lastname)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>创建Spring生成代理实现上面接口，通过JavaConfig：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.config.EnableJpaRepositories;</div><div class="line"><span class="meta">@EnableJpaRepositories</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Config</span> </span>&#123;&#125;</div></pre></td></tr></table></figure>
<p>或者通过XML配置：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line"><span class="attr">xmlns:jpa</span>=<span class="string">"http://www.springframework.org/schema/data/jpa"</span></div><div class="line"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></div><div class="line">http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class="line">http://www.springframework.org/schema/data/jpa</div><div class="line">http://www.springframework.org/schema/data/jpa/spring-jpa.xsd"&gt;</div><div class="line"><span class="tag">&lt;<span class="name">jpa:repositories</span> <span class="attr">base-package</span>=<span class="string">"com.acme.repositories"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这个实例中使用了JPA命名空间。</p>
<p>如果你为其他存储使用repository接口，你需要修改来适应你的存储模块命名空间的声明，大概就是替换jpa为期望的，例如mongodb。</p>
<p>当然，注意JavaConfig并没有明确配置一个包默认使用注解的包。</p>
<p>为了定制包被扫描可以使用数据存储注解<code>@Enable</code>的一个属性<code>basePackage</code>。</p>
</li>
</ol>
<ol>
<li><p>获得repository实例注入并使用。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SomeClient</span> </span>&#123;</div><div class="line">  <span class="meta">@Autowired</span></div><div class="line">  <span class="keyword">private</span> PersonRepository repository;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</div><div class="line">    List&lt;Person&gt; persons = repository.findByLastname(<span class="string">"Matthews"</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>以下部分详细说明每个步骤。</p>
<h2 id="4-3-定义repository接口"><a href="#4-3-定义repository接口" class="headerlink" title="4.3 定义repository接口"></a>4.3 定义repository接口</h2><p>第一步定义一个实体类依赖repository接口。</p>
<p>这个接口必须继承<code>Repository</code>接口并且指定实体类型和Id类型。</p>
<p>如果你希望实体类型拥有CRUD方法，将<code>Repository</code>接口替换成继承<code>CrudRepository</code>。</p>
<h3 id="4-3-1-小巧repository定义"><a href="#4-3-1-小巧repository定义" class="headerlink" title="4.3.1 小巧repository定义"></a>4.3.1 小巧repository定义</h3><p>一般情况下，你的repository接口应该继承<code>Repository</code>，<code>CrudRepository</code>或者<code>PagingAndSortingRepository</code></p>
<p>除此之外,如果你不想继承Spring Data接口,你也可以使用<code>@Repository</code>注解定义你的接口</p>
<p>继承<code>CrudRepository</code>提供了一系列完整的方法来操纵你的实体.</p>
<p>如果你希望选择方法,简单的从<code>CurdRepository</code>复制你希望获得的方法到你的<code>Repository</code></p>
<blockquote>
<p>注意</p>
<p>注意这允许你定义你自己的抽闲建立在Spring Data Repositories功能.</p>
</blockquote>
<p>例5.有选择的展现<code>CRUD</code>方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@NoRepositoryBean</span></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">MyBaseRepository</span>&lt;<span class="title">T</span>, <span class="title">ID</span> <span class="keyword">extends</span> <span class="title">Serializable</span>&gt; <span class="keyword">extends</span> <span class="title">Repository</span>&lt;<span class="title">T</span>, <span class="title">ID</span>&gt; </span>&#123;</div><div class="line">  <span class="function">T <span class="title">findOne</span><span class="params">(ID id)</span></span>;</div><div class="line">  <span class="function">T <span class="title">save</span><span class="params">(T entity)</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> <span class="keyword">extends</span> <span class="title">MyBaseRepository</span>&lt;<span class="title">User</span>, <span class="title">Long</span>&gt; </span>&#123;</div><div class="line">  <span class="function">User <span class="title">findByEmailAddress</span><span class="params">(EmailAddress emailAddress)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这是第一步你定义一个通用的基本接口,接口供你所有的实体repositories使用并提供<code>findOne()</code>和<code>save()</code>方法</p>
<p>这些方法会被转发到你选择的Spring Data提供的基本repository实现,例如JPA<code>SimpleJpaRepository</code>,因为他们匹配<code>CrudRepository</code>的方法签名.</p>
<p>因此<code>UserPepository</code>现在可以保存用户,查找唯一用户根据id,并且触发一个查询去查找<code>Users</code>根据他们的邮箱地址</p>
<blockquote>
<p>注意</p>
<p>注意,中间的repository接口使用了注解<code>NoRepositoryBean</code>.</p>
<p>对所有Spring Data在运行时不需要生成实例的repository接口,确保你为他们添加了注解.</p>
</blockquote>
<h3 id="4-3-2-在多个Spring-Data模块使用Repositories"><a href="#4-3-2-在多个Spring-Data模块使用Repositories" class="headerlink" title="4.3.2 在多个Spring Data模块使用Repositories"></a>4.3.2 在多个Spring Data模块使用Repositories</h3><p>在你的应用中使用唯一的Spring Data模块,所有repository接口定义范围限制在Spring Data模块.</p>
<p>有时候应用需要使用不止一个Spring Data模块.</p>
<p>这种情况下,需要repository定义在持久化技术之间有所区别.</p>
<p>在class path发现多个repository工厂时,Spring Data严格检测repository配置模块.</p>
<p>在repository或者实体类严格配置需要得细节以决定Spring Data模块绑定一个repository的定义:</p>
<ol>
<li>如果repository定义继承模块特殊的repository,那么对Spring Data模块这是一个有效的备选.</li>
</ol>
<ol>
<li><p>如果实体类被模块特有的注解类型注解,那么对Spring Data模块这是一个有效的备选.</p>
<p>Spring Data模块接收第三方注解(例如 JPA的<code>@Entity</code>)或者提供自己的注解例如<code>@Document</code>为Spring Data MongoDB/Spring Data Elasticsearch.</p>
</li>
</ol>
<p>例6.使用模块特有的接口定义Repository</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">MyRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">User</span>, <span class="title">Long</span>&gt; </span>&#123; &#125;</div><div class="line"><span class="meta">@NoRepositoryBean</span></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">MyBaseRepository</span>&lt;<span class="title">T</span>, <span class="title">ID</span> <span class="keyword">extends</span> <span class="title">Serializable</span>&gt; <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">T</span>,<span class="title">ID</span></span>&#123;</div><div class="line">  …</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> <span class="keyword">extends</span> <span class="title">MyBaseRepository</span>&lt;<span class="title">User</span>, <span class="title">Long</span>&gt; </span>&#123;</div><div class="line">  …</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>MyRepository</code>和<code>UserRepository</code>继承<code>JpaRepository</code>在他们类型层级.他们有效的表示了Spring Data JPA模块.</p>
<p>例7.使用通用的接口定义<code>Repository</code>.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">AmbiguousRepository</span> <span class="keyword">extends</span> <span class="title">Repository</span>&lt;<span class="title">User</span>, <span class="title">Long</span>&gt; </span>&#123;</div><div class="line">  …</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@NoRepositoryBean</span></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">MyBaseRepository</span>&lt;<span class="title">T</span>, <span class="title">ID</span> <span class="keyword">extends</span> <span class="title">Serializable</span>&gt; <span class="keyword">extends</span></span></div><div class="line">  <span class="title">CrudRepository</span>&lt;<span class="title">T</span>,<span class="title">ID</span>&gt; &#123;</div><div class="line">  …</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">AmbiguousUserRepository</span> <span class="keyword">extends</span> <span class="title">MyBaseRepository</span>&lt;<span class="title">User</span>, <span class="title">Long</span>&gt; </span>&#123;</div><div class="line">  …</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>AmbiguousRepository</code>和<code>AmbiguousUserRepository</code>在它们继承体系里只继承了<code>Repository</code>和<code>CrudRepository</code>.使用唯一的Spring Data模块是这是完成正确的,多个模块不能识别<code>Repository</code>到底绑定哪个Spring Data.</p>
<p>例8.使用注解配合实体类定义<code>Repositor</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">PersonRepository</span> <span class="keyword">extends</span> <span class="title">Repository</span>&lt;<span class="title">Person</span>, <span class="title">Long</span>&gt; </span>&#123;</div><div class="line">  …</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line">  …</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> <span class="keyword">extends</span> <span class="title">Repository</span>&lt;<span class="title">User</span>, <span class="title">Long</span>&gt; </span>&#123;</div><div class="line">  …</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Document</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line">  …</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>PersonRepository</code>引用使用了JPA的注解<code>@Entity</code>进行注解的<code>Person</code>,所以这个repository明确的属于Spring Data JPA.<code>UserRepository</code>使用了Spring Data MongoDB的注解<code>@Document</code>进行注解.</p>
<p>例9.使用混合注解配合实体类定义<code>Repositor</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">JpaPersonRepository</span> <span class="keyword">extends</span> <span class="title">Repository</span>&lt;<span class="title">Person</span>, <span class="title">Long</span>&gt; </span>&#123;</div><div class="line">  …</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">MongoDBPersonRepository</span> <span class="keyword">extends</span> <span class="title">Repository</span>&lt;<span class="title">Person</span>, <span class="title">Long</span>&gt; </span>&#123;</div><div class="line">  …</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="meta">@Document</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line">  …</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个示例展示实体类同时使用JPA和Spring Data MongoDB注解.</p>
<p>这里定义了两个repository,<code>JpaPersonRepository</code>和<code>MongoDBPersonRepository</code>.</p>
<p>一个被JPA使用,另一个被MongoDB使用.</p>
<p>Spring Data不再能告诉repository区分,这将导致不清晰的行为</p>
<p>“使用模块特有的接口定义Repository”和”使用注解配合实体类定义<code>Repositor</code>“都使用了严格的repository配置为一个特定的Spring Data模块识别可选的repository</p>
<p>使用多种持久化技术特定的注解在同一个实体类上可能在锅中持久化技术上重用了实体类,但是这样做Spring Data将不能确定为repository绑定唯一的模块</p>
<p>最后一种方式区分repository是划分repository的基本包.</p>
<p>基本包定义起始点是扫描repository接口定义,这意味着在合适的包定义repository.</p>
<p>默认的,注解配置使用类配置的包</p>
<p>基于XML基本配置在这里.</p>
<p>例10.注解配置基本包</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@EnableJpaRepositories</span>(basePackages = <span class="string">"com.acme.repositories.jpa"</span>)</div><div class="line"><span class="meta">@EnableMongoRepositories</span>(basePackages = <span class="string">"com.acme.repositories.mongo"</span>)</div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Configuration</span> </span>&#123; &#125;</div></pre></td></tr></table></figure>
<h2 id="4-4-Defining-query-methods"><a href="#4-4-Defining-query-methods" class="headerlink" title="4.4 Defining query methods"></a>4.4 Defining query methods</h2><h2 id="4-4-定义查询方法"><a href="#4-4-定义查询方法" class="headerlink" title="4.4 定义查询方法"></a>4.4 定义查询方法</h2><p>repository代理有两种方式获得通过方法名获得指定查询.可以通过方法名直接获得查询,或者手动定义查询.有可用的选项定义在实际的存储.这有一些策略决定实际查询如何被创建.让我们一些看看可用的选项.</p>
<h3 id="4-4-1-Query-lookup-strategies"><a href="#4-4-1-Query-lookup-strategies" class="headerlink" title="4.4.1 Query lookup strategies"></a>4.4.1 Query lookup strategies</h3><p>下面这些repository基本组件的决定查询可用的策略.你可以配置策略,在XML配置中通过命名空间<code>query-look-strategy</code>属性或者在Java配置中通过启用${store} Repository的属性注解<code>queryLookupStrategy</code>.一些策略可能不能支持特定的数据库.</p>
<ul>
<li>CREATE 试图通过方法名构建一个指定查询.一般处理是从方法名移除一系列给定的前缀并解析方法其他部分.更多查询构建信息阅读Query creation.</li>
<li>USE_DECLARED_QUERY试图查找一个准确的查询,并在找不到时抛出一个异常.查询可以被通过注解定义或者其它方式定义.查询特殊存储的文档了解存储的可用选择.如果repository基本组件在启动时不能为方法找到一个准确的查询,将会失败</li>
<li>CREATE_IF_NOT_FOUND(默认)联合了CREATE和USE_DECLARED_QUERY.首先查找一个准确查询,如果没有找到,创建一个定制方法基于名字的查询.这是默认的查询策略,因此如果你没有做任何明确配置.它允许根据方法名快速查询定义,而且定制查询根据需要引入声明的查询.</li>
</ul>
<h3 id="4-4-2-查询创建"><a href="#4-4-2-查询创建" class="headerlink" title="4.4.2 查询创建"></a>4.4.2 查询创建</h3><p>建成Spring Data repository基本组件的查询构建机制有用的构建了repository所有实体类的约束查询.</p>
<p>这个机制分隔方法前缀<code>find...By</code>,<code>read...By</code>,<code>query...By</code>,<code>count...By</code>以及<code>get...By</code>,并解析其他部分.这个引入条款可以表达包含的特性例如<code>Distinct</code>,来设置明确的标志在要生成的查询上.然而,第一个by扮演了分解符来指明真实条件的起始.分词在一个非常基本的水平,你可以在实体属性上定义条件并且连接使用and或or连接他们.</p>
<p>例11.来自方法名的查询创建</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PersonRepository</span> <span class="keyword">extends</span> <span class="title">Repository</span>&lt;<span class="title">User</span>, <span class="title">Long</span>&gt; </span>&#123;</div><div class="line">  <span class="function">List&lt;Person&gt; <span class="title">findByEmailAddressAndLastname</span><span class="params">(EmailAddress emailAddress, String</span></span></div><div class="line">                                             lastname);</div><div class="line">  <span class="comment">// Enables the distinct flag for the query</span></div><div class="line">  <span class="function">List&lt;Person&gt; <span class="title">findDistinctPeopleByLastnameOrFirstname</span><span class="params">(String lastname, String</span></span></div><div class="line">                                                       firstname);</div><div class="line">  <span class="function">List&lt;Person&gt; <span class="title">findPeopleDistinctByLastnameOrFirstname</span><span class="params">(String lastname, String</span></span></div><div class="line">                                                       firstname);</div><div class="line"></div><div class="line">  <span class="comment">// Enabling ignoring case for an individual property</span></div><div class="line">  <span class="function">List&lt;Person&gt; <span class="title">findByLastnameIgnoreCase</span><span class="params">(String lastname)</span></span>;</div><div class="line">  <span class="comment">// Enabling ignoring case for all suitable properties</span></div><div class="line">  <span class="function">List&lt;Person&gt; <span class="title">findByLastnameAndFirstnameAllIgnoreCase</span><span class="params">(String lastname, String</span></span></div><div class="line">                                                       firstname);</div><div class="line">  <span class="comment">// Enabling static ORDER BY for a query</span></div><div class="line">  <span class="function">List&lt;Person&gt; <span class="title">findByLastnameOrderByFirstnameAsc</span><span class="params">(String lastname)</span></span>;</div><div class="line"> </div><div class="line">  <span class="function">List&lt;Person&gt; <span class="title">findByLastnameOrderByFirstnameDesc</span><span class="params">(String lastname)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>解析方法的实际结果取决于你创建查询的持久化存储.然而,这有些问题需要注意:</p>
<ul>
<li>表达式通常串行的连接属性的遍历与操作符.你可以使用and和or连接属性表达式.你也可以给属性表达式使用操作符,例如between,lessThan,granterThan,like.你可以使用的表达式操作符有between,LessThan,GreaterThan,Loke.被支持的操作符根据多样的数据库决定,因此查询你引用文档的恰当部分.</li>
<li>方法解析支持为单独属性设置一个IgnoreCase标志(例如,findByLastnameIgnoreCase(…))或者为所有属性都支持忽略情况(通常是String情形,例如,findByLastnameAndFirstnameAllIgnoreCase(…)).忽略情况是否被支持由多样的数据库决定，所以具体存储查询方法在引用文档查询相关章节.</li>
<li>你可以为查询方法引用的属性提供静态排序连接OrderBy子句并且提供排序方向(Asc或Desc).为创建一个查询方法支持动态排序,查看特殊参数处理.</li>
</ul>
<h3 id="4-4-3-属性表达式"><a href="#4-4-3-属性表达式" class="headerlink" title="4.4.3 属性表达式"></a>4.4.3 属性表达式</h3><p>属性表达式可以只为管理的实体类的直接属性使用，就像前面所展示的那样。查询常见时你已经确认解析的字段是管理的实体类的一个字段.然而,你也可以通过最近的字段定义一个约束.假设<code>Person</code>的<code>Address</code>有一个<code>ZipCode</code>字段.这种情况一个方法如果这样命名:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function">List&lt;Person&gt; <span class="title">findByAddressZipCode</span><span class="params">(ZipCode zipCode)</span></span>;</div></pre></td></tr></table></figure>
<p>创建属性遍历<code>x.address.zipCode</code>.决策算法从把全部(<code>AddressZipCode</code>)作为属性开始并且检查实体类依此命名的属性(小写开头).如果算法成功了,就是用这个属性.否则,算法将源码部分驼峰式大小写从右侧头部到尾巴分隔,并试图找到相应的属性,在我们的例子中,<code>AddressZip</code>和<code>Code</code>.如果从头部找到一个属性,算法将在这里生成树处理后面的部分,使用描述的方式分隔.如果第一个分隔没有匹配到,算法移动分割点到左侧继续(<code>Address</code>,<code>ZipCode</code>).</p>
<p>这在大多数情况都可以使用,但也可能选择错误的属性.假设<code>Person</code>类也有一个<code>addressZip</code>属性.算法将匹配第一个匹配的,本质上选择了错误属性,最终失败(伴随的<code>addressZip</code>类型没有属性<code>code</code>).</p>
<p>没了解决这种起义,你可以在方法名称内使用<code>_</code>手动的定义遍历点.所以我们的方法名称最终像这样:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function">List&lt;Person&gt; <span class="title">findByAddress_ZipCode</span><span class="params">(ZipCode zipCode)</span></span>;</div></pre></td></tr></table></figure>
<p>As we treat underscore as a reserved character we strongly advise to follow standard Java naming<br>conventions (i.e. not using underscores in property names but camel case instead) </p>
<p>我们对待下划线当做一个保留关键字,我们强力建议遵循标准Java命名规范(例如,使用驼峰命名而不是下划线命名属性名称)</p>
<h3 id="4-4-4-特殊参数处理"><a href="#4-4-4-特殊参数处理" class="headerlink" title="4.4.4 特殊参数处理"></a>4.4.4 特殊参数处理</h3><p>处理你查询中的参数,你可以定义简单的方法参数像上面的示例中.处理之外基本组件可以识别出某些特殊类型例如<code>Pageable</code>和<code>Sort</code>用来动态的编码和排序你的查询.</p>
<p>例12.在查询方法使用<code>Pageable</code>,<code>Slice</code>和<code>Sort</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function">Page&lt;User&gt; <span class="title">findByLastname</span><span class="params">(String lastname, Pageable pageable)</span></span>;</div><div class="line"><span class="function">Slice&lt;User&gt; <span class="title">findByLastname</span><span class="params">(String lastname, Pageable pageable)</span></span>;</div><div class="line"><span class="function">List&lt;User&gt; <span class="title">findByLastname</span><span class="params">(String lastname, Sort sort)</span></span>;</div><div class="line"><span class="function">List&lt;User&gt; <span class="title">findByLastname</span><span class="params">(String lastname, Pageable pageable)</span></span>;</div></pre></td></tr></table></figure>
<p>第一个方法允许你在通过一个<code>org.springframework.data.domain.Pageable</code>实例在查询方法中动态添加分页信息在你的静态定义查询中.一个<code>Page</code>清楚数据的全部数量和页面总数.它是通过触发计数的基础设施查询计算总数。这个代价可能是昂贵的具体取决于所使用的存储,可以用<code>Slice</code>代替.一个<code>Slict</code>只知道下一个<code>Slice</code>可到到哪里,当运行在一个大的结果集上时这可能已经足够了.排序选项也通过<code>Pageable</code>实例处理.如果你只需要排序,简单起见添加<code>org.springframework.data.domain.Sort</code>参数在你的方法.如你所见,简单返回一个列表.在这种情况下,额外元数据构建实际的<code>Page</code>实例将不会被创建(反过来这意味着,没有发出额外的统计查询所必须的)简单约束只在给定的范围内查询.</p>
<blockquote>
<p>注意</p>
<p>为了尽早得到你查询了多少页,你必须出发一个格外统计查询.默认的,这个查询你实际触发的查询调用.</p>
</blockquote>
<h3 id="4-4-5-限制查询结果"><a href="#4-4-5-限制查询结果" class="headerlink" title="4.4.5 限制查询结果"></a>4.4.5 限制查询结果</h3><p>查询方法的结果可以通过关键<code>first</code>或者<code>top</code>限制,可以交换使用.一个可选的数值可以追加在top/first来指定返回的最大结果集.如果数字缺失,假定结果集大小是1.</p>
<p>例13.查询中使用Top和First限制结果大小</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function">User <span class="title">findFirstByOrderByLastnameAsc</span><span class="params">()</span></span>;</div><div class="line"><span class="function">User <span class="title">findTopByOrderByAgeDesc</span><span class="params">()</span></span>;</div><div class="line"><span class="function">Page&lt;User&gt; <span class="title">queryFirst10ByLastname</span><span class="params">(String lastname, Pageable pageable)</span></span>;</div><div class="line"><span class="function">Slice&lt;User&gt; <span class="title">findTop3ByLastname</span><span class="params">(String lastname, Pageable pageable)</span></span>;</div><div class="line"><span class="function">List&lt;User&gt; <span class="title">findFirst10ByLastname</span><span class="params">(String lastname, Sort sort)</span></span>;</div><div class="line"><span class="function">List&lt;User&gt; <span class="title">findTop10ByLastname</span><span class="params">(String lastname, Pageable pageable)</span></span>;</div></pre></td></tr></table></figure>
<p>限制表达式也支持Distinct关键字.此外，对于将结果集设置为一个实例的查询，支持将结果包装到一个<code>Optional</code>.如果应用分页或分片限制查询分页(并且计算可用的页数)那么这可以应用limited结果.</p>
<blockquote>
<p>注意</p>
<p>请注意，限制结果结合使用<code>Sort</code>的动态排序的结果允许参数可以表示“k”最小的查询方法以及“K”的查询方法最大的元素。</p>
</blockquote>
<h3 id="4-4-6-流式处理结果"><a href="#4-4-6-流式处理结果" class="headerlink" title="4.4.6 流式处理结果"></a>4.4.6 流式处理结果</h3><p>方法查询结果可以通过使用java 8<code>Stream&lt;T&gt;</code>逐步处理。</p>
<p>特定的方法用来表示流而不是简单的包装查询结果在一个<code>Stream</code>数据存储</p>
<p>例14 一个用java流8<code>Stream&lt;T&gt;</code>查询结果</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Query</span>(<span class="string">"select u from User u"</span>)</div><div class="line"><span class="function">Stream&lt;User&gt; <span class="title">findAllByCustomQueryAndStream</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line"><span class="function">Stream&lt;User&gt; <span class="title">readAllByFirstnameNotNull</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line"><span class="meta">@Query</span>(<span class="string">"select u from User u"</span>)</div><div class="line"><span class="function">Stream&lt;User&gt; <span class="title">streamAllPaged</span><span class="params">(Pageable pageable)</span></span>;</div></pre></td></tr></table></figure>
<blockquote>
<p>注意</p>
<p>一个<code>Stream</code>潜在的包装底层数据存储在页数的资源中,因此使用完毕必须关闭.你可以使用<code>close()</code>方法手动关闭<code>Stream</code>或者使用一个Java7的try_with-resources块.</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span>(Stream&lt;User&gt; stream = repository.findAllByCustomQueryAndStream()) &#123;</div><div class="line">  stream.forEach(...);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="4-4-7-异步查询结果"><a href="#4-4-7-异步查询结果" class="headerlink" title="4.4.7 异步查询结果"></a>4.4.7 异步查询结果</h3><p>Repository查询可以使用<code>Spring&#39;s asynchronous method execution capacity</code>执行异步.这意味着方法可以一执行立即返回,真实的查询执行发生在任务提交到一个Spring TaskExecutor.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Async</span></div><div class="line"><span class="function">Future&lt;User&gt; <span class="title">findByFirstname</span><span class="params">(String firstname)</span></span>;</div><div class="line"></div><div class="line"><span class="meta">@Async</span></div><div class="line"><span class="function">CompletableFuture&lt;User&gt; <span class="title">findOneByFirstname</span><span class="params">(String firstname)</span></span>;</div><div class="line"></div><div class="line"><span class="meta">@Async</span></div><div class="line"><span class="function">ListenableFuture&lt;User&gt; <span class="title">findOneByLastname</span><span class="params">(String lastname)</span></span>;</div></pre></td></tr></table></figure>
<ol>
<li>使用<code>java.util.concurrent.Future</code>作为返回类型</li>
<li>使用一个Java8<code>java.util.current.CompletableFuture</code>作为返回类型</li>
<li>使用一个<code>org.springframework.util.concurrent.ListenableFuture</code>作为返回类型</li>
</ol>
<h2 id="创建repository实例"><a href="#创建repository实例" class="headerlink" title="创建repository实例"></a>创建repository实例</h2><p>这个章节你创建实例和bean定义为repository接口定义.方法之一是手动的支持repository使用包含各个Spring Data模块的Spring命名空间装载,然而我们一般推荐使用Java配置的方法配置.</p>
<h3 id="4-5-1-XML配置"><a href="#4-5-1-XML配置" class="headerlink" title="4.5.1 XML配置"></a>4.5.1 XML配置</h3><p>每个Spring Data module包含一个repository 元素,这可以让你简单的定义一个基本包,Spring为你扫描它.</p>
<p>例16 通过XML启用Spring Data repositories</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">beans:beans</span> <span class="attr">xmlns:beans</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">      <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">      <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/data/jpa"</span></div><div class="line">      <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></div><div class="line">        http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class="line">        http://www.springframework.org/schema/data/jpa</div><div class="line">        http://www.springframework.org/schema/data/jpa/spring-jpa.xsd"&gt;</div><div class="line">      <span class="tag">&lt;<span class="name">repositories</span> <span class="attr">base-package</span>=<span class="string">"com.acme.repositories"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">beans:beans</span>&gt;</span></div></pre></td></tr></table></figure>
<p>在前面的实例中,让Spring扫描<code>com.acme.repositories</code>包和它的子包里继承<code>Repository</code>的接口或者它的子接口.找到的每个接口,继承组件注册持久化技术的<code>FactoryBean</code>来创建合适的代理处理执行查询方法.每个bean被注册在一个接口名称确定的bean name下,所以一个叫<code>UserRepository</code>将注册<code>userRepository</code>.基本包属性允许通配符,所以你可以定义一个规则扫描包.</p>
<p><strong>使用过滤</strong></p>
<p>默认的基本组件选取所有在配置的基本包下继承了持久化技术<code>Repositpry</code>接口以及子接口</p>
<p>并且为他们创建一个bean实例.然而,你可能希望更细粒度的控制哪个接口bean实例被创建.为了实现这个你可以在<code>&lt;repository/&gt;</code>中使用<code>&lt;include-filter/&gt;</code>和<code>&lt;exclude-filter/&gt;</code>元素.语义完全等同于Spring的上下文命名空间中的元素.更多细节,查看他们的元素<code>Spring reference documentation</code></p>
<p>例如，要将某些确定的接口排除实例化为repository，可以使用以下配置:</p>
<p>例17. 使用exclude-filter元素</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;repository base-package="com.acme.repositories"&gt;</div><div class="line">  &lt;context:exclude-filter type="regex" expression=".*SomeRepository" /&gt;</div><div class="line">&lt;/repositories&gt;</div></pre></td></tr></table></figure>
<p>这个示例从待实例化对象中排除所有以SomeRepository结尾的接口.</p>
<h3 id="4-5-2-JavaConfig"><a href="#4-5-2-JavaConfig" class="headerlink" title="4.5.2 JavaConfig"></a>4.5.2 JavaConfig</h3><p>repository基础组件也可以使用一个存储的特殊的<code>@Enable${store}Repositories</code>注解在一个JavaConfig类上.入门介绍Spring容器Java基本Spring容器查看文档:<code>JavaConfig in the Spring reference documentaional</code></p>
<p>一个简单配置启用Spring Data repositories像这样:</p>
<p>例18. repository配置基于简单注解</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@EnableJpaRepositories</span>(<span class="string">"com.acme.repositories"</span>)</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ApplicationConfiguration</span> </span>&#123;</div><div class="line">  <span class="meta">@Bean</span></div><div class="line">  <span class="function"><span class="keyword">public</span> EntityManagerFactory <span class="title">entityManagerFactory</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// …</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>注意</p>
<p>示例使用了JPA特有的注解,根据你使用的存储模块决定实际如何替换.示例定义<code>EntityManagerFactory</code>bean.查阅具体存储的配置</p>
</blockquote>
<h3 id="4-5-3-单独使用"><a href="#4-5-3-单独使用" class="headerlink" title="4.5.3 单独使用"></a>4.5.3 单独使用</h3><p>你也可以在Spring容器之外使用repository基础组件,例如在CDI环境.你仍然需要一些Spring库在你的classpath中,但是你可以以编程的方式启动.repository包装持久化技术支持的Spring Data模块提供RepositoryFactory,你可以向下面这样使用:</p>
<p>例19. repository工厂单独使用</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">RepositoryFactorySupport factory = … <span class="comment">// Instantiate factory here</span></div><div class="line">UserRepository repository = factory.getRepository(UserRepository.class);</div></pre></td></tr></table></figure>
<h2 id="4-6-定制Spring-Data仓库实现"><a href="#4-6-定制Spring-Data仓库实现" class="headerlink" title="4.6 定制Spring Data仓库实现"></a>4.6 定制Spring Data仓库实现</h2><p>时常有必要为一少部分仓库方法提供一个定制的实现.Spring数据存储库很容易允许您提供自定义存储库代码并将其与通用CRUD集成抽象和查询方法功能整合.</p>
<h3 id="4-6-1-为单独仓库添加定制行为"><a href="#4-6-1-为单独仓库添加定制行为" class="headerlink" title="4.6.1 为单独仓库添加定制行为"></a>4.6.1 为单独仓库添加定制行为</h3><p>为了定制功能丰富一个仓库,你首先为定制功能定义一个接口和实现.使用你提供的仓库接口来继承自定义接口.</p>
<p>例20. 定制仓库功能的接口</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">UserRepositoryCustom</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">someCustomMethod</span><span class="params">(User user)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>例21.定制功能的实现</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserRepositoryImpl</span> <span class="keyword">implements</span> <span class="title">UserRepositoryCustom</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">someCustomMethod</span><span class="params">(User user)</span> </span>&#123;</div><div class="line">    <span class="comment">// Your custom implementation</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>注意</p>
<p>类可以被找到最重要的点是名字以Impl为后缀区别于仓库的核心接口(见下文)</p>
</blockquote>
<p>实现的本身没有依赖Spring Data,可以是一个标准的Spring bean.所以你可以使用标准的依赖注入行为给其他bean注入引用,像<code>JdbcTemplate</code>,切面的一部分等等.</p>
<p>例22 修改你基本的仓库接口</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> <span class="keyword">extends</span> <span class="title">CrudRepository</span>&lt;<span class="title">User</span>, <span class="title">Long</span>&gt;, <span class="title">UserRepositoryCustom</span> </span>&#123;</div><div class="line">  <span class="comment">// Declare query methods here</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>让你的标准仓库接口继承定制的.这样做结合了CRUD和定制功能并使其可用于客户端.</p>
<p><strong>配置</strong></p>
<p>如果你使用命名空间配置,仓库基本组件扫描类所在包,根据扫描结果尝试自动定制实现.</p>
<p>这些类需要遵循命名规范:给仓库接口名添加命名空间元素属性<code>repositoryimpl-postfix</code>.默认的后缀是<code>Impl</code></p>
<p>例23. 配置示例</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">repositories</span> <span class="attr">base-package</span>=<span class="string">"com.acme.repository"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">repositories</span> <span class="attr">base-package</span>=<span class="string">"com.acme.repository"</span> <span class="attr">repository-impl-postfix</span>=<span class="string">"FooBar"</span>/&gt;</span></div></pre></td></tr></table></figure>
<p>第一个配置示例将查实查找一个类<code>com.acme.repository.UserRepositoryImpl</code>来作为定制藏局实现.然而第二个示例将尝试查找<code>com.acme.repository.UserRepositoryFooBar</code>.</p>
<p><strong>手动指定</strong></p>
<p>上面的方法可以正常工作,只有当你定制实现使用注解配置和自动注入,这将与其他Spring bean一样被对待.如果你定制的实现需要特殊处理,你可以像描述的简单定义一个bean并且命名它.基本组件将通过名称引用手动定义的bean定义而不是它自己创建一个.</p>
<p>例24.手动指定定制实现</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">repositories</span> <span class="attr">base-package</span>=<span class="string">"com.acme.repository"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">beans:bean</span> <span class="attr">id</span>=<span class="string">"userRepositoryImpl"</span> <span class="attr">class</span>=<span class="string">"…"</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- further configuration --&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans:bean</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="4-6-2为所有仓库添加定制行为"><a href="#4-6-2为所有仓库添加定制行为" class="headerlink" title="4.6.2为所有仓库添加定制行为"></a>4.6.2为所有仓库添加定制行为</h3><p>当你希望把一个单独的方法添加到你所有的仓库接口中时,上面的方法就不可行了.为了添加定制到所有的仓库,你首先添加一个中间接口来定义共享的行为.</p>
<p>例25 定义共享定制行为接口</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@NoRepositoryBean</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyRepository</span>&lt;<span class="title">T</span>, <span class="title">ID</span> <span class="keyword">extends</span> <span class="title">Serializable</span>&gt;</span></div><div class="line">  <span class="keyword">extends</span> <span class="title">PagingAndSortingRepository</span>&lt;<span class="title">T</span>, <span class="title">ID</span>&gt; &#123;</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">sharedCustomMethod</span><span class="params">(ID id)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在你独立的仓库接口将继承这个中间接口而不是<code>Repository</code>接口来包含功能的定义.接下来创建一个中间接口的实现继承持久化具体仓库的基本类.这个类后面将作为仓库代理的基本类.</p>
<p>例26 定制仓库基本类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRepositoryImpl</span>&lt;<span class="title">T</span>, <span class="title">ID</span> <span class="keyword">extends</span> <span class="title">Serializable</span>&gt;</span></div><div class="line">  <span class="keyword">extends</span> <span class="title">SimpleJpaRepository</span>&lt;<span class="title">T</span>, <span class="title">ID</span>&gt; <span class="keyword">implements</span> <span class="title">MyRepository</span>&lt;<span class="title">T</span>, <span class="title">ID</span>&gt; &#123;</div><div class="line">  </div><div class="line">  <span class="keyword">private</span> <span class="keyword">final</span> EntityManager entityManager;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">MyRepositoryImpl</span><span class="params">(JpaEntityInformation entityInformation,</span></span></div><div class="line">                          EntityManager entityManager) &#123;</div><div class="line">    <span class="keyword">super</span>(entityInformation, entityManager);</div><div class="line">    <span class="comment">// Keep the EntityManager around to used from the newly introduced methods.</span></div><div class="line">    <span class="keyword">this</span>.entityManager = entityManager;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sharedCustomMethod</span><span class="params">(ID id)</span> </span>&#123;</div><div class="line">    <span class="comment">// implementation goes here</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>警告</p>
<p>这个类需要有一个构造方法调用父类具体存储仓库工厂实现.万一仓库基础类有多个构造,覆盖包括一个<code>EntityInformation</code>加上存储具体基本组件对象(例如一个<code>EntityManager</code>或者模板类)</p>
</blockquote>
<p>Spring<code>&lt;repository/&gt;</code>命名空间下的默认行为为所有接口提供一个实现.这意味着如果处于其当前状态，<code>MyRepository</code>的实现实例将由Spring创建.这当然不是被期望的,它只是作为一个用来定义实体的 <code>Repository</code>和真实仓库接口的中间接口.为了排除一个继承<code>Repository</code>的接口被当做一个仓库接口实例化,你可以给它使用<code>@NoRepositoryBean</code>(像上面)或者把它从配置中<code>base-package</code>移除.</p>
<p>最后一步是让Spring Data基本组件识别到定制的仓库基本类.在JavaConf使用注解<code>@Enable...Repository</code>的属性<code>repositoryBaseClass</code>完成:</p>
<p>例27 使用JavaConfig配置一个定制仓库基本类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@EnableJpaRepositories</span>(repositoryBaseClass = MyRepositoryImpl.class)</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ApplicationConfiguration</span> </span>&#123; … &#125;</div></pre></td></tr></table></figure>
<p>类似的属性在XML命名空间中也可以找到.</p>
<p>例28 使用XML配置一个定制仓库基本类</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">repositories</span> <span class="attr">base-package</span>=<span class="string">"com.acme.repository"</span></span></div><div class="line">              <span class="attr">base-class</span>=<span class="string">"….MyRepositoryImpl"</span> /&gt;</div></pre></td></tr></table></figure>
<h2 id="4-7-Spring-Data扩展"><a href="#4-7-Spring-Data扩展" class="headerlink" title="4.7 Spring Data扩展"></a>4.7 Spring Data扩展</h2><p>这部分说明Spring Data一系列的扩展功能,可以使Spring Dta使用多样的上下文.目前大部分集成是针对Spring MVC.</p>
<h3 id="4-7-1-Querydsl扩展"><a href="#4-7-1-Querydsl扩展" class="headerlink" title="4.7.1 Querydsl扩展"></a>4.7.1 Querydsl扩展</h3><p>Querydsl是一个框架,通过它的流式API构建静态类型的SQL类查询.</p>
<p>多个Spring Data模块通过<code>QueryDslPredicateExecutor</code>与Querydsl集成.</p>
<p>例29 QueryDslPredicateExecutor接口</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">QueryDslPredicateExecutor</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">  <span class="function">T <span class="title">findOne</span><span class="params">(Predicate predicate)</span></span>; ①</div><div class="line">    <span class="function">Iterable&lt;T&gt; <span class="title">findAll</span><span class="params">(Predicate predicate)</span></span>; ②</div><div class="line">    <span class="function"><span class="keyword">long</span> <span class="title">count</span><span class="params">(Predicate predicate)</span></span>; ③</div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">exists</span><span class="params">(Predicate predicate)</span></span>; ④</div><div class="line">    <span class="comment">// … more functionality omitted.</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>① 查询并返回一个匹配<code>Predicate</code>的单例实体</p>
<p>②查询并返回所有匹配<code>Predicate</code>的实体</p>
<p>③ 返回匹配<code>Predicate</code>的实体数量</p>
<p>④  返回是否存在一个匹配<code>Predicate</code>的实体</p>
<p>为了简单的使用Querydsl功能,在你的仓库接口继承<code>QueryDslPredicateExecutor</code>.</p>
<p>例30 在仓库集成QueryDsl</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> <span class="keyword">extends</span> <span class="title">CrudRepository</span>&lt;<span class="title">User</span>, <span class="title">Long</span>&gt;,</span></div><div class="line">  <span class="title">QueryDslPredicateExecutor</span>&lt;<span class="title">User</span>&gt; &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>像上面这样就可以使用Querydsl的<code>Predicate</code>书写类型安全的查询</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Predicate predicate = user.firstname.equalsIgnoreCase(<span class="string">"dave"</span>)</div><div class="line">  .and(user.lastname.startsWithIgnoreCase(<span class="string">"mathews"</span>));</div><div class="line">userRepository.findAll(predicate);</div></pre></td></tr></table></figure>
<h3 id="4-7-2-Web支持"><a href="#4-7-2-Web支持" class="headerlink" title="4.7.2 Web支持"></a>4.7.2 Web支持</h3><blockquote>
<p>注意</p>
<p>本节包含Spring Data Web支持的文档是在1.6范围内的Spring Data Commons实现的.因为支持新引入的内容改变了很多东西，我们保留了旧行为的文档在”遗留Web支持”部分.</p>
</blockquote>
<p>如果模块支持仓库编程模型，那么Spring Data模块附带了各种Web模块支持.Web关联的东西需要Spring MVC的JAR包位于classpath路径下,它们中有些甚至提供了Spring HATEOAS集成.一般情况,集成方式支持使用<code>@EnableSpringDataWebSupport</code>注解在你的JavaConfig配置类.</p>
<p>例31 启用Spring Data web支持</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@EnableWebMvc</span></div><div class="line"><span class="meta">@EnableSpringDataWebSupport</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">WebConfiguration</span> </span>&#123;&#125;</div></pre></td></tr></table></figure>
<p><code>@EnableSpringDataWebSupport</code>注解注册了一些组件，我们将在稍后讨论.注解还将在类路径上检测Spring HATEOAS，如果才在将为其注册集成组件.</p>
<p>作为可选项,如果你使用XML配置,注册<code>SpringDataWebSupport</code>或者<code>HateoasWareSpringDataWebSupport</code>作为Spring bean:</p>
<p>例32 用XML启用Spring Data web支持</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.web.config.SpringDataWebConfiguration"</span> /&gt;</span></div><div class="line"><span class="comment">&lt;!-- If you're using Spring HATEOAS as well register this one *instead* of the</span></div><div class="line">former --&gt;</div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>= <span class="string">"org.springframework.data.web.config.HateoasAwareSpringDataWebConfiguration"</span> /&gt;</span></div></pre></td></tr></table></figure>
<p><strong>基本Web支持</strong></p>
<p>上面展示的的配置设置将注册几个基本组件：</p>
<ul>
<li>一个<code>DomainClassConverter</code>启用Spring MVC来根据请求参数或路径变量管理仓例实体类的实例</li>
<li><code>HandlerMethodArgumentResolver</code>实现让Spring MVC从请求参数解析Pageable和Sort实例.</li>
</ul>
<p><strong>实体类转换</strong></p>
<p><code>DomainClassConverter</code>允许你在Spring MVC控制器方法签名中直接使用实体类型,因此你不必手动的通过仓库查询实例:</p>
<p>例33 一个Spring MVC控制器在方法签名中使用实体类型</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/users"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</div><div class="line">  <span class="meta">@RequestMapping</span>(<span class="string">"/&#123;id&#125;"</span>)</div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">showUserForm</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> User user, Model model) </span>&#123;</div><div class="line">    model.addAttribute(<span class="string">"user"</span>, user);</div><div class="line">    <span class="keyword">return</span> <span class="string">"userForm"</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如你所见,方法直接接收一个User实例并没有更进一步的查询是否必要.实例可以通过Spring MVC将路径变量转换为实体类的id类型并最终通过在实体类型注册的仓库实例上调用<code>findOne(...)</code>访问实例转换得到.</p>
<blockquote>
<p>注意</p>
<p>当前的仓库必须实现<code>CrudRepository</code>做好准备被发现来进行转换.</p>
</blockquote>
<p><strong>为了分页和排序分解方法参数</strong></p>
<p>上面的配置片段还注册了一个<code>PageableHandlerMethodArgumentResolver</code>和一个<code>SortHandlerMethodArgumentResolver</code>实例.注册使得Pageable和Sort成为有效的控制器方法参数.</p>
<p>例34 使用Pageable作为控制器方法参数</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/users"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</div><div class="line">  <span class="meta">@Autowired</span> UserRepository repository;</div><div class="line">  <span class="meta">@RequestMapping</span></div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">showUsers</span><span class="params">(Model model, Pageable pageable)</span> </span>&#123;</div><div class="line">    model.addAttribute(<span class="string">"users"</span>, repository.findAll(pageable));</div><div class="line">    <span class="keyword">return</span> <span class="string">"users"</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个方法签名将使Spring MVC尝试使用下面的默认配置从请求参数中转换一个Pageable实例:</p>
<p>表1 请求参数转换Pageable实例</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>page</td>
<td>要检索的页面,索引为0,默认为0</td>
</tr>
<tr>
<td>size</td>
<td>要检索的页面大小,默认20</td>
</tr>
<tr>
<td>sort</td>
<td>被排序的属性应以格式`property,property(, ASC\</td>
<td>DESC)`表示.默认生序排序,如果你希望改变排序顺序,则使用多个排序参数,例如?sort=firstname&amp;sort=lastname,asc</td>
</tr>
</tbody>
</table>
<p>为了定制行为,可以继承<code>SpringDataWebConfiguration</code>或者启用等效的HATEOAS并覆盖<code>pageableResolver()</code>或<code>sortResolver()</code>方法并导入你的自定义配置文件替代@Enable-注解.</p>
<p>有一种情况你需要多个<code>Pageable</code>或<code>Sort</code>实例从请求转换(例如处理多个表单),你可以使用Spring的<code>@Qualifier</code>注解来互相区别.请求参数必须以<code>${qualifier}为</code>前缀.这样一个方法的签名像这样:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">showUsers</span><span class="params">(Model model, </span></span></div><div class="line">                        @Qualifier(<span class="string">"foo"</span>)Pagebale first, </div><div class="line">                        @<span class="title">Qualifier</span><span class="params">(<span class="string">"bar"</span>)</span> Pageable second) &#123;</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>你必须填充foo_page和bar_page等.</p>
<p>默认的<code>Pageable</code>在方法中处理等价于一个<code>new PageRequest(0, 20)</code>,但是可以使用<code>@PageableDefaults</code>注解在<code>Pageable</code>参数上定制.</p>
<p><strong>Hypermedia支持分页</strong></p>
<p>Spring HATEOAS包装了一个代表模型的类<code>PageResources</code> ,</p>
<p>它可以使用Page实例包装必要的Page元数据内容作为连接让客户端导航页面.一个页面到一个<code>PageResources</code>的转换被Spring HATEOAS的<code>ResourceAssembler</code>接口实现<code>PagedResourcesAssembler</code>来完成.</p>
<p>例35 使用一个PagedResourcesAssembler作为控制器方法参数</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PersonController</span> </span>&#123;</div><div class="line">  <span class="meta">@Autowired</span> PersonRepository repository;</div><div class="line">  <span class="meta">@RequestMapping</span>(value = <span class="string">"/persons"</span>, method = RequestMethod.GET)</div><div class="line">  HttpEntity&lt;PagedResources&lt;Person&gt;&gt; persons(Pageable pageable,</div><div class="line">                                             PagedResourcesAssembler assembler) &#123;</div><div class="line">    Page&lt;Person&gt; persons = repository.findAll(pageable);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(assembler.toResources(persons), HttpStatus.OK);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>像上面这样配置将允许<code>PageResourcesAssembler</code>作为控制器方法的一个参数.在这调用toResources(…)方法有以下作用:</p>
<ul>
<li><code>Page</code>的内容将<code>PageResources</code>实例的内容</li>
<li><code>PageResources</code>将获得<code>PageMetadata</code>实例,该实例由Page和基础的PageRequest中的信息填充</li>
<li><code>PageResources</code>获得<code>prev</code>和<code>next</code>连接,添加这些依赖在页面.这些链接将指向uri方法的调用映射.页码参数根据<code>PageableHandlerMethodArgumentResolver</code>添加到参数以在后面被转换.</li>
</ul>
<p>假设我们有30个Person实例在数据库.你现在可以触发一个GET请求 <a href="http://localhost:8080/persons" target="_blank" rel="external">http://localhost:8080/persons</a>, 你将可以看到类似下面的内容:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&#123; "links" : [ &#123; "rel" : "next",</div><div class="line">"href" : "http://localhost:8080/persons?page=1&amp;size=20 &#125;</div><div class="line">],</div><div class="line">"content" : [</div><div class="line">… // 20 Person instances rendered here</div><div class="line">],</div><div class="line">"pageMetadata" : &#123;</div><div class="line">"size" : 20,</div><div class="line">"totalElements" : 30,</div><div class="line">"totalPages" : 2,</div><div class="line">"number" : 0</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>你可以看到编译生成了正确的URI，并且还会提取默认配置转换参数到即将到来的请求中的<code>Pageable</code>.这意味着,如果你改变配置,链接也将自动跟随改变.默认情况下，编译指向控制器执行的方法，但是这可以被一个自定义链接作为基本构建来构成分页的<code>Link</code>重载<code>PagedResourcesAssembler.toResource（...）</code>方法定制.</p>
<p><strong>Querydsl web 支持</strong></p>
<p>那些整合了<code>QueryDSL</code>的存储可能从<code>Request</code>查询字符串中的属性驱动查询.</p>
<p>这意味着前面例子的查询字符串可以给出<code>User</code>的对象</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">?firstname=Dave&amp;lastname=Matthews</div></pre></td></tr></table></figure>
<p>可以被转换为</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">QUser.user.firstname.eq(<span class="string">"Dave"</span>).and(QUser.user.lastname.eq(<span class="string">"Matthews"</span>))</div></pre></td></tr></table></figure>
<p>使用了<code>QuerydslPredicateArgumentResolver</code>.</p>
<blockquote>
<p>注意</p>
<p>当在类路径上找到Querydsl时，该功能将在@EnableSpringDataWebSupport注解中自动启用</p>
</blockquote>
<p>添加一个<code>@QuerydslPredicate</code>到一个方法签名将提供一个就绪的<code>Predicate</code>,可以通过<code>QueryDslPredicateExecutor</code>执行.</p>
<blockquote>
<p>提示</p>
<p>类型信息通常从返回方法上解析.由于这些信息不一定匹配实体类型,使用<code>QuerydslPredicate</code>的<code>root</code>属性可能是个好主意.</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</div><div class="line">  <span class="meta">@Autowired</span> UserRepository repository;</div><div class="line">  <span class="meta">@RequestMapping</span>(value = <span class="string">"/"</span>, method = RequestMethod.GET)</div><div class="line">  <span class="function">String <span class="title">index</span><span class="params">(Model model, @QuerydslPredicate(root = User.class)</span> Predicate predicate,</span></div><div class="line">              Pageable pageable, @RequestParam MultiValueMap&lt;String, String&gt;</div><div class="line">    parameters) &#123;</div><div class="line">        model.addAttribute(<span class="string">"users"</span>, repository.findAll(predicate, pageable));</div><div class="line">        <span class="keyword">return</span> <span class="string">"index"</span>;</div><div class="line">  &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>为User转换匹配查询字符串参数的<code>Predicate</code></p>
<p>默认的绑定规则如下:</p>
<ol>
<li><p><code>Object</code>在简单属性上如同<code>eq</code></p>
</li>
<li><p><code>Object</code>在集合作为属性如同<code>contains</code></p>
</li>
<li><p><code>Collection</code>在简单属性上如同<code>in</code></p>
</li>
</ol>
<p>这些绑定可以通过<code>@QuerydslPredicate</code>的<code>bindings</code>属性定制或者使用Java8<code>default methods</code>给仓库接口添加<code>QuerydslBinderCustomizer</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">UserReposotory</span> <span class="keyword">extends</span> <span class="title">CurdRepository</span>&lt;<span class="title">User</span>, <span class="title">String</span>&gt;, </span></div><div class="line">  <span class="title">QueryDslPredicateExecutor</span>&lt;<span class="title">User</span>&gt;,</div><div class="line">  <span class="title">QuerydslBinderCustomizer</span>&lt;<span class="title">QUser</span>&gt; &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">  	<span class="function"><span class="keyword">default</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">customize</span><span class="params">(QuerydslBindings bindings, QUser user)</span> </span>&#123;</div><div class="line">      bindings.bind(user.username).first((path, value) -&gt; path.contains(value));</div><div class="line">      bindings.bind(String.class).first((StringPath path, String value) -&gt;</div><div class="line">                                        path.containsIgnoreCase(value));</div><div class="line">      bindings.excluding(user.password);</div><div class="line">  	&#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<ol>
<li><code>QueryDslPredicateExecutor</code>为<code>Predicate</code>提供特殊的查询方法提供入口</li>
<li>在仓库接口定义<code>QuerydslBinderCustomizer</code>将自动注解<code>@QuerydslPredicate(bindings=...)</code></li>
<li>为<code>username</code>属性定义绑定,绑定到一个简单集合</li>
<li>为<code>String</code>属性定义默认绑定到一个不区分大小写的集合</li>
<li>从<code>Predicate</code>移除密码属性</li>
</ol>
<h3 id="4-7-3-仓库填充"><a href="#4-7-3-仓库填充" class="headerlink" title="4.7.3 仓库填充"></a>4.7.3 仓库填充</h3><p>如果你使用Spring JDBC模块,你可能熟悉在<code>DataSource</code>使用SQL脚本来填充.一个类似的抽象在仓库级别可以使用,尽管它不是使用SQL作为数据定义语言,因为它必须由存储决定.填充根据仓库支持XML(通过Spring的OXM抽象)和JSON(通过Jackson)定义数据.</p>
<p>假设你有一个文件<code>data.json</code>内容如下:</p>
<p>例36 JSON定义的数据</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[ &#123; <span class="attr">"_class"</span> : <span class="string">"com.acme.Person"</span>,</div><div class="line">     <span class="attr">"firstname"</span> : <span class="string">"Dave"</span>,</div><div class="line">      <span class="attr">"lastname"</span> : <span class="string">"Matthews"</span> &#125;,</div><div class="line">      &#123; <span class="attr">"_class"</span> : <span class="string">"com.acme.Person"</span>,</div><div class="line">     <span class="attr">"firstname"</span> : <span class="string">"Carter"</span>,</div><div class="line">      <span class="attr">"lastname"</span> : <span class="string">"Beauford"</span> &#125; ]</div></pre></td></tr></table></figure>
<p>你可以容易的根据Spring Data Commons提供仓库的命名空间填充元素填充你的仓库.为了填充前面的数据到你的PersonRepository,像下面这样配置:</p>
<p>例37 声明一个Jackson仓库填充</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">    <span class="attr">xmlns:repository</span>=<span class="string">"http://www.springframework.org/schema/data/repository"</span></div><div class="line">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></div><div class="line">      http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class="line">      http://www.springframework.org/schema/data/repository</div><div class="line">      http://www.springframework.org/schema/data/repository/spring-repository.xsd"&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">repository:jackson2-populator</span> <span class="attr">locations</span>=<span class="string">"classpath:data.json"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这样的声明可以让<code>data.json</code>文件可以被一个Jackson的<code>ObjectMpper</code>读取和反序列化.</p>
<p>JSON将要解析的对象类型由检查JSON文档的<code>_class</code>属性决定.基本组件将最终选择合适的仓库去处理反序列化的对象.</p>
<p>要使用XML定义数据填充仓库,你可以使用<code>unmarshaller-populator</code>元素.你配置它使用Spring OXM提供给你的XML装配选项.在Spring reference documentation查看更多细节.</p>
<p>例38 声明一个装配仓库填充器(使用JAXB)</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">      <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">      <span class="attr">xmlns:repository</span>=<span class="string">"http://www.springframework.org/schema/data/repository"</span></div><div class="line">      <span class="attr">xmlns:oxm</span>=<span class="string">"http://www.springframework.org/schema/oxm"</span></div><div class="line">      <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></div><div class="line">        http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class="line">        http://www.springframework.org/schema/data/repository</div><div class="line">        http://www.springframework.org/schema/data/repository/spring-repository.xsd</div><div class="line">        http://www.springframework.org/schema/oxm</div><div class="line">        http://www.springframework.org/schema/oxm/spring-oxm.xsd"&gt;</div><div class="line">      <span class="tag">&lt;<span class="name">repository:unmarshaller-populator</span> <span class="attr">locations</span>=<span class="string">"classpath:data.json"</span></span></div><div class="line">        <span class="attr">unmarshaller-ref</span>=<span class="string">"unmarshaller"</span> /&gt;</div><div class="line">      <span class="tag">&lt;<span class="name">oxm:jaxb2-marshaller</span> <span class="attr">contextPath</span>=<span class="string">"com.acme"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="4-7-4-遗留web支持"><a href="#4-7-4-遗留web支持" class="headerlink" title="4.7.4 遗留web支持"></a>4.7.4 遗留web支持</h3><p><strong>Spring MVC的实体类绑定</strong></p>
<p>如果正在开发Spring MVC web应用,你通常必须从URL中解析实体类的id.默认的,你的任务是转化请求参数或URL参数到实体类并将它移交给下面或直接在实体上操作业务逻辑.这看起来像下面这样:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/users"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">final</span> UserRepository userRepository;</div><div class="line">  </div><div class="line">  <span class="meta">@Autowired</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">UserController</span><span class="params">(UserRepository userRepository)</span> </span>&#123;</div><div class="line">    Assert.notNull(repository, <span class="string">"Repository must not be null!"</span>);</div><div class="line">    <span class="keyword">this</span>.userRepository = userRepository;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@RequestMapping</span>(<span class="string">"/&#123;id&#125;"</span>)</div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">showUserForm</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id, Model model) </span>&#123;</div><div class="line">    <span class="comment">// Do null check for id</span></div><div class="line">    User user = userRepository.findOne(id);</div><div class="line">    <span class="comment">// Do null check for user</span></div><div class="line">    model.addAttribute(<span class="string">"user"</span>, user);</div><div class="line">    <span class="keyword">return</span> <span class="string">"user"</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>首先你为每个控制器定义一个依赖的仓库来查找它们分别管理的实体.查询实体也是样板,因为它总是一个<code>findOne(...)</code>调用.幸运的Spring提供了方法来注册自定义组件,允许一个String值转换到一个属性类型.</p>
<p><strong>属性编辑</strong></p>
<p>Spring3.0之前Java<code>PropertyEditors</code>被使用.为了集成这些,Spring Data提出一个<code>DomainClassPropertyEditorRegistrar</code>来查询所有注册到<code>ApplicatonContext</code>的Spring Data仓库和一个定制的<code>PropertyEditor</code>来管理实体类.</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"….web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"webBindingInitializer"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"….web.bind.support.ConfigurableWebBindingInitializer"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"propertyEditorRegistrars"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=</span></div><div class="line">          <span class="string">"org.springframework.data.repository.support.DomainClassPropertyEditorRegistrar"</span> /&gt;</div><div class="line">      <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<p>如果你已经像上面这样配置Spring MVC,你可以向下面这样配置你的控制器,从而减少不清晰和样板式的代码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/users"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</div><div class="line">  <span class="meta">@RequestMapping</span>(<span class="string">"/&#123;id&#125;"</span>)</div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">showUserForm</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> User user, Model model) </span>&#123;</div><div class="line">    model.addAttribute(<span class="string">"user"</span>, user);</div><div class="line">    <span class="keyword">return</span> <span class="string">"userForm"</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[IoC容器的简单实现]]></title>
      <url>https://zhanghtk.github.io/2016/11/10/IoC%E5%AE%B9%E5%99%A8%E7%9A%84%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<p>记录临摹一个IoC容器的过程，使用对象容器进行控制反转，将对象间依赖关系的管理交给容器。</p>
<p>代码在<a href="https://github.com/zhanghTK/HelloIoC" target="_blank" rel="external">这里</a>，API参照了Spring IoC部分，实现的具体过程参照了<a href="https://github.com/code4craft/tiny-spring" target="_blank" rel="external">tiny-spring</a>和<a href="https://github.com/kevinlynx/ioc-sample" target="_blank" rel="external">ioc-sample</a>。先看看如何使用：</p>
<h1 id="像Spring一样用"><a href="#像Spring一样用" class="headerlink" title="像Spring一样用"></a>像Spring一样用</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"helloWorldOutputService"</span></span></div><div class="line">          <span class="attr">class</span>=<span class="string">"tk.zhangh.ioc.beans.HelloWorldOutputServiceImpl"</span>&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"helloWorld"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"outputService"</span> <span class="attr">ref</span>=<span class="string">"outputService"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register_get_bean_by_ClassPathXmlApplicationContextTest</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    ApplicationContext applicationContext = <span class="keyword">new</span></div><div class="line">      ClassPathXmlApplicationContext(<span class="string">"ioc.xml"</span>);</div><div class="line">    HelloWorldService helloWorldService = (HelloWorldService)</div><div class="line">      applicationContext.getBean(<span class="string">"helloWorldOutputService"</span>);</div><div class="line">    helloWorldService.sayHello();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>整个开发过程是这样的：</p>
<h1 id="自下而上"><a href="#自下而上" class="headerlink" title="自下而上"></a>自下而上</h1><p>大体的开发步骤以及思路参照了<a href="https://github.com/code4craft/tiny-spring" target="_blank" rel="external">tiny-spring</a>，实现步骤可以简述为：</p>
<h2 id="1-全手动式的Bean容器"><a href="#1-全手动式的Bean容器" class="headerlink" title="1.全手动式的Bean容器"></a>1.全手动式的Bean容器</h2><p>做容器的最重要的就是存取，针对bean容器就是bean信息的保存（注册）和bean实例的获取。</p>
<ul>
<li><p>bean信息注册</p>
<p>bean的基本信息包括：bean的名称、bean实例、bean的Class信息，bean的属性信息，把这些基本信息封装成了<code>BeanDefinition</code>。</p>
<p>以<code>key(beanName)=&gt;value(BeanDefinition)</code>的键值对就可以完成注册的功能</p>
</li>
<li><p>bean实例获取</p>
<p>从bean信息到bean实例中间还有一条鸿沟：怎么实例化bean。</p>
<p>为了方便实现，在初始化<code>BeanDefinition</code>实例的时候也对bean进行了初始化。</p>
</li>
</ul>
<p>站在客户端角度，怎么注册bean并不重要，因此bean容器接口只声明获取bena的方法。</p>
<p>在<code>BeanDefinition</code>中实例化bean带来一个严重问题：bean实例的创建不受容器控制的。</p>
<h2 id="2-定制Bean的实例化过程"><a href="#2-定制Bean的实例化过程" class="headerlink" title="2. 定制Bean的实例化过程"></a>2. 定制Bean的实例化过程</h2><p>针对上面的问题，<code>AbstractBeanFactory</code>抽象出实例化bean方法，并在<code>AutowireCapableBeanFactory</code>提供基板实现。在<code>BeanDefinition</code>中并不需要再实例化了（代码实现到这一步时没有修改,bug）。</p>
<p>新的<code>AutowireCapableBeanFactory</code>已经可以做到：</p>
<ol>
<li>注册保存<code>BeanDefinition</code></li>
<li>在注册时实例化bean</li>
<li>提供bean实例的获取</li>
</ol>
<p>现在，bean的实例化是受控于容器的。</p>
<p>但是初始化的时机不够灵活，整个生命周期只有在注册时刻有唯一一次初始化。</p>
<p>这样会影响bean实例属性的初始化，先看基本属性：</p>
<h2 id="3-支持基本属性依赖"><a href="#3-支持基本属性依赖" class="headerlink" title="3. 支持基本属性依赖"></a>3. 支持基本属性依赖</h2><p>对基本属性支持比较简单，整个过程完全由容器控制：</p>
<ol>
<li>根据<code>BeanDefinition</code>获取bean相关的属性信息</li>
<li>创建对应的属性对象</li>
<li>使用反射注入属性</li>
</ol>
<p>在bean实例构造完成后就对属性注入，但是现有的方案并不能支持bean属性的注入：</p>
<ol>
<li>属性bean从哪里来</li>
<li>bean属性本身依赖其他bean呢？如果存在循环依赖呢？</li>
</ol>
<h2 id="4-使用资源文件配置"><a href="#4-使用资源文件配置" class="headerlink" title="4. 使用资源文件配置"></a>4. 使用资源文件配置</h2><p>解决bean属性问题前，先完成支持资源文件的管理。</p>
<ol>
<li>创建资源文件表示类，以及资源加载类</li>
<li>创建信息读取接口，抽象类，以及具体的XML配置读取策略类</li>
</ol>
<p>添加对资源文件配置支持后，整个bean容器的过程为：</p>
<ol>
<li>读取加载配置文件信息</li>
<li>创建beanfactory</li>
<li>注册保存bean信息<ol>
<li>创建bean实例</li>
<li>设置bean实例的属性</li>
</ol>
</li>
</ol>
<p>支持资源文件配置后原来需要硬编码的bean信息可以以配置文件的形式展示。</p>
<p>但是，bean的实例构造时机、属性注入的时机没有改变，所以依赖存在对bean属性的支持问题。</p>
<h2 id="5-支持bean属性依赖"><a href="#5-支持bean属性依赖" class="headerlink" title="5. 支持bean属性依赖"></a>5. 支持bean属性依赖</h2><p>前面碰到的两个问题：</p>
<ol>
<li>属性bean从哪里来</li>
<li>bean属性本身依赖其他bean呢？如果存在循环依赖呢？</li>
</ol>
<p>属性bean也是bean，所以应该从工厂获取，循环依赖问题在Spring里是通过延迟实例化解决。</p>
<p>所以问题变成了怎么调整bean实例构造时机，让这个过程延迟，发生在所有bean注册完成后。</p>
<p>调整：在注册时只保存<code>BeanDefinition</code>，不对bena进行实例化。</p>
<p>所有bean的实例化延迟到第一次获取bean实例时再进行：</p>
<ol>
<li>先创建bean实例</li>
<li>遍历所有属性，基本属性直接注入，如果是其他bean引用重复以上过程。</li>
</ol>
<h2 id="6-进一步简化"><a href="#6-进一步简化" class="headerlink" title="6. 进一步简化"></a>6. 进一步简化</h2><p>回头看现在的客户端使用：</p>
<ol>
<li>加载资源</li>
<li>解析资源</li>
<li>创建beanFactory</li>
<li>注册bean</li>
<li>获取bean</li>
</ol>
<p>前四步实际是beanFactory的生命周期内容，客户端不关心这些细节，只要提供配置文件就可以。</p>
<p>所以使用<code>ApplicationContext</code>接口对外暴露获取bean的方法。</p>
<p>bean加载，解析，存取功能分别委托给：<code>BeanDefinitionReader</code>， <code>AbstractBeanFactory</code>。</p>
<p>整个Bean容器生命周期细节都可以封装起来，对外提供简单调用。</p>
<p>至此，一个简单的IoC容器就完成了</p>
<hr>
<h1 id="自上而下"><a href="#自上而下" class="headerlink" title="自上而下"></a>自上而下</h1><p>俯视这个IoC容器，基本的生命周期活动包括了：</p>
<ol>
<li>资源加载</li>
<li>资源解析</li>
<li>bean factory创建</li>
<li>bean注册</li>
<li>创建bean实例</li>
<li>bean获取</li>
</ol>
<p>所有的步骤都是以接口或抽象方法的形式提供或者是多态留白，具体的实现都交由子类实现。</p>
<table>
<thead>
<tr>
<th style="text-align:center">步骤</th>
<th style="text-align:center">抽象方法</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">资源加载</td>
<td style="text-align:center">Resources.getInputStream()</td>
</tr>
<tr>
<td style="text-align:center">资源解析</td>
<td style="text-align:center">BeanDefinitionReader.loadBeanDefinitions(String)</td>
</tr>
<tr>
<td style="text-align:center">bean factory创建</td>
<td style="text-align:center">this.beanFactory = beanFactory</td>
</tr>
<tr>
<td style="text-align:center">bean注册</td>
<td style="text-align:center">AbstractBeanFactory.registerBeanDefinition(String, BeanDefinition)</td>
</tr>
<tr>
<td style="text-align:center">bean实例化</td>
<td style="text-align:center">AbstractBeanFactory.doCreateBean(BeanDefinition)</td>
</tr>
<tr>
<td style="text-align:center">bean获取</td>
<td style="text-align:center">BeanFactory.getBean(String)</td>
</tr>
</tbody>
</table>
<p>各个模块的耦合以接口留白的形式而非具体实现类为扩展带来了极大的灵活。</p>
<p>在实现的时候并没有考虑这些，但实现完成后发现接口带来的灵活极大的方便了修改和扩展。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[HTTPS小记]]></title>
      <url>https://zhanghtk.github.io/2016/10/24/HTTPS%E5%B0%8F%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>最近好像跟HTTPS较上劲了，前几天的职级答辩问到了相关问题，最近维护的系统升级也碰到相关问题。</p>
<p>自己对HTTPS了解的并不多，今天简单了解了一下，在此做个记录。</p>
<p>首先有几个基本概念，TCP/IP协议，HTTP一些，对称/非对称加密，证书，公钥/私钥。</p>
<p>TCP/TP：</p>
<ul>
<li>传输层协议，主要解决数据如何在网络中传输</li>
</ul>
<p>HTTP：</p>
<ul>
<li>应用层协议，主要解决如何包装数据，依赖TCP/IP协议</li>
</ul>
<p>对称加密：</p>
<ul>
<li>加密密钥能够从解密密钥中推算出来，同时解密密钥也可以从加密密钥中推算出来</li>
</ul>
<p>非对称加密：</p>
<ul>
<li>加密和解密过程使用了不同的密钥。分为公钥和私钥，它们可以互相解密。</li>
<li>公钥加密，私钥解密</li>
<li>私钥数字签名，公钥验证</li>
</ul>
<p>证书：</p>
<ul>
<li>我理解主要是两个作用：验证证书持有者身份、提供证书持有者公钥</li>
</ul>
<h2 id="为什么用HTTPS"><a href="#为什么用HTTPS" class="headerlink" title="为什么用HTTPS"></a>为什么用HTTPS</h2><p>因为HTTP不安全。</p>
<ol>
<li>HTTP使用的是明文传输，容易被窃取</li>
<li>无法验证报文完整性，可能被篡改</li>
<li>无法验证通信双方的身份</li>
</ol>
<p>为了对HTTP提供安全保障，就依赖：</p>
<h3 id="SSL与TLS"><a href="#SSL与TLS" class="headerlink" title="SSL与TLS"></a>SSL与TLS</h3><p>SSL（Secure Socket Layer，安全套接字层）</p>
<p>TLS（Transport Layer Security，传输层安全协议）</p>
<p>TLS可以理解为SSL的增强版。</p>
<p>HTTP直接与TCP通信，而在HTTPS中首先与SSL通信，SSL再与TCP通信。我觉得可以理解成HTTPS = HTTP + SSL。</p>
<p>不论HTTP还是HTTPS，所有的通信、加解密都是最终都是建立在TCP/IP之上的。</p>
<h2 id="加密思路"><a href="#加密思路" class="headerlink" title="加密思路"></a>加密思路</h2><ol>
<li>客户端向服务器端索要并验证公钥；</li>
<li>双方协商生成”对话密钥”；</li>
<li>双方采用”对话密钥”进行加密通信；</li>
</ol>
<p>在通信过程中其实双方使用的还是对称的加密算法，但是为了让这个对称的加密算法足够安全。首先使用非对称的算法来获取对话密钥，之后再用对话密钥来对通信的内容加密解密。</p>
<p>所以关键问题就变成了：</p>
<h2 id="对话密钥的创建"><a href="#对话密钥的创建" class="headerlink" title="对话密钥的创建"></a>对话密钥的创建</h2><p>我没有仔细阅读相关协议，在网上查了一些资料，下面的内容是根据自己的理解写的。</p>
<p>简单描述一次对话密钥的获取过程：</p>
<blockquote>
<p>C：我想跟服务器A说悄悄话，我支持1,2,3版本的协议。我先跟你说个秘密X。</p>
<p>S：我是服务器A。我们用3版本的协议说话吧，我也给你说个秘密Y。我再给你个公钥，使用它加密后的信息就只有我能听懂了。</p>
<p>C：让我先看看你是不是服务器A。（确认是服务器A）那我再给你说个秘密Z，这次用你给我的公钥对Z加密，确保其他人都不知道。以后我们用X,Y,Z这三个秘密来验证彼此的消息。我要跟你确认的就这些。</p>
<p>S：好的，以后我们用X,Y,Z这三个秘密来验证彼此的消息。我要确认的也就这些内容。网上把上面四个步骤描述</p>
</blockquote>
<p>网上把上述的四个步骤描述为：</p>
<ul>
<li>客户端发出请求<ul>
<li>支持的协议版本，比如TLS 1.0版</li>
<li>一个随机数</li>
<li>支持的加密方法，比如RSA公钥加密</li>
<li>支持的压缩方法</li>
</ul>
</li>
<li>服务器回应<ul>
<li>协议的版本</li>
<li>加密的算法</li>
<li>生成随机数</li>
<li>服务器证书</li>
</ul>
</li>
<li>客户端回应<ul>
<li>对服务器下发的证书进行验证</li>
<li>再次产生一个随机数（第三个随机数）</li>
<li>使用服务器证书中的公钥进行加密</li>
<li>发送编码改变的消息</li>
<li>发送整个前面所有消息的hash值</li>
<li>根据三个随机数生成对话密钥</li>
</ul>
</li>
<li>服务器最终回应<ul>
<li>使用私钥解密接收到第三个随机数</li>
<li>验证数据完整性</li>
<li>使用跟客户端同样的方式生成对话密钥</li>
<li>告知客户端已经切换到协商过的加密套件状态</li>
<li>服务端发送消息验证加解密是否成功</li>
</ul>
</li>
</ul>
<p>如果服务器需要对客户端的身份进行认证，那么在第一次服务器回应中可以向客户端索取证书。客户端提供证书后，服务器通过验证客户端证书，从而验证客户端的身份。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[自下而上的开发实践]]></title>
      <url>https://zhanghtk.github.io/2016/10/22/%E8%87%AA%E4%B8%8B%E8%80%8C%E4%B8%8A%E7%9A%84%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5/</url>
      <content type="html"><![CDATA[<h2 id="两种开发思路"><a href="#两种开发思路" class="headerlink" title="两种开发思路"></a>两种开发思路</h2><p><strong>自上而下</strong>：设计先行，根据设计开发</p>
<p><strong>自下而上</strong>：开发先行，给予开发重构</p>
<h2 id="关注点分离"><a href="#关注点分离" class="headerlink" title="关注点分离"></a>关注点分离</h2><p>类似于文章段落的划分，代码拆分的简单过程可以概括为：</p>
<ul>
<li>分行<ul>
<li>方法真实逻辑与业务支撑逻辑的划分</li>
<li>基于模块层次的划分，而不是语句行数的划分</li>
</ul>
</li>
<li>注释<ul>
<li>良好命名要胜过写大量的注释</li>
</ul>
</li>
<li>抽象提取方法<ul>
<li>合理封装</li>
<li>参数内联</li>
<li>方法名、可访问性</li>
</ul>
</li>
<li>删除不必要的分行与注释</li>
</ul>
<h2 id="共性与可变性分析"><a href="#共性与可变性分析" class="headerlink" title="共性与可变性分析"></a>共性与可变性分析</h2><p>软件工程的两个敌人：</p>
<ul>
<li>共性：开发成本、维护成本 </li>
<li>可变性：维护成本</li>
</ul>
<p>共性的复用两种模式：</p>
<ul>
<li>继承<ul>
<li>强耦合关系，父类的修改影响所有子类</li>
<li>单继承限制</li>
<li>多态</li>
<li>差异式编程</li>
<li>钩子方法</li>
</ul>
</li>
<li>组合<ul>
<li>优先使用</li>
<li>依赖注入</li>
<li>优先组合接口而非实现<ul>
<li>控制翻转</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>context+role+collaborator</p>
<p>好处：类型确定，但实现可变、不确定</p>
<p>类与接口的关系类似于人与角色的关系：</p>
<ul>
<li>人可以有多个角色，类可以有多个接口</li>
<li>人的某一个角色的确定是由环境决定的，类某一接口的确定是由上下文环境决定的</li>
</ul>
<p>接口设计应当遵循的原则：<strong>接口隔离原则（SIP）</strong></p>
<p>接口应该是干净的，单一的，细粒度的，而不是混合过多的方法，职责单一</p>
<h2 id="扩展式设计的一般过程："><a href="#扩展式设计的一般过程：" class="headerlink" title="扩展式设计的一般过程："></a>扩展式设计的一般过程：</h2><ol>
<li>分离职责各司其职：关注点分离<ul>
<li>向上分离：继承</li>
<li>向外分离：组合</li>
</ul>
</li>
<li>统一接口：<ul>
<li>提炼接口，提供多态</li>
<li>面向接口编程</li>
</ul>
</li>
<li>引用接口预留空白<ul>
<li>依赖注入</li>
</ul>
</li>
</ol>
<p>以一个事务为例子展示扩展式设计的一般过程：</p>
<p>首先，有一个Service，在方法中业务逻辑与JDBC事务粘合在一起：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderService</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> DatabasePool dbPool;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribTrainings</span><span class="params">(List&lt;Training&gt; trainings, </span></span></div><div class="line">                                  Customer customer) <span class="keyword">throws</span> SQLException &#123;</div><div class="line">        <span class="comment">// 初始化方法</span></div><div class="line">      	Connection c = <span class="keyword">null</span>;</div><div class="line">        PreparedStatement ps = <span class="keyword">null</span>;</div><div class="line">        Statement s = <span class="keyword">null</span>;</div><div class="line">        ResultSet rs = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">boolean</span> transactionState = <span class="keyword">false</span>;</div><div class="line">      </div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">          	<span class="comment">// 开启事务 </span></div><div class="line">            s = c.createStatement();</div><div class="line">            transactionState = c.getAutoCommit();</div><div class="line">            c.setAutoCommit(<span class="keyword">false</span>);</div><div class="line">          </div><div class="line">          	<span class="comment">// 业务操作</span></div><div class="line">            <span class="keyword">for</span> (Training training : trainings) &#123;</div><div class="line">                addTrainingItem(customer, training);</div><div class="line">            &#125;</div><div class="line">            addOrder(customer, trainings);</div><div class="line">            </div><div class="line">          	<span class="comment">// 提交事务</span></div><div class="line">          	c.commit();</div><div class="line">        &#125; <span class="keyword">catch</span> (SQLException sqlx) &#123;</div><div class="line">          	<span class="comment">// 回滚</span></div><div class="line">            c.rollback();</div><div class="line">          </div><div class="line">            <span class="keyword">throw</span> sqlx;</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">          	<span class="comment">// 关闭操作</span></div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                c.setAutoCommit(transactionState);</div><div class="line">                dbPool.release(c);</div><div class="line">                <span class="keyword">if</span> (s != <span class="keyword">null</span>) s.close();</div><div class="line">                <span class="keyword">if</span> (ps != <span class="keyword">null</span>) ps.close();</div><div class="line">                <span class="keyword">if</span> (rs != <span class="keyword">null</span>) rs.close();</div><div class="line">            &#125; <span class="keyword">catch</span> (SQLException ignored) &#123;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addOrder</span><span class="params">(Customer customer, List&lt;Training&gt; trainings)</span> </span>&#123;</div><div class="line">	</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addTrainingItem</span><span class="params">(Customer customer, Training training)</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>第一步在原始代码上分段并添加注释后代码如上所示。对每段代码提取方法，向上抽象：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionScope</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> DatabasePool dbPool;</div><div class="line">    <span class="keyword">private</span> Connection connection;</div><div class="line">    <span class="keyword">private</span> PreparedStatement preparedStatement;</div><div class="line">    <span class="keyword">private</span> Statement statement;</div><div class="line">    <span class="keyword">private</span> ResultSet resultSet;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> transactionState;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">using</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">        setup();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            beginTransaction();</div><div class="line">            <span class="comment">// 留白一个具体的业务的实现:</span></div><div class="line">            <span class="comment">//      1. (模板方法)继承-&gt;钩子方法</span></div><div class="line">            <span class="comment">//      2. (委派)传递一个方法(方法接口)</span></div><div class="line">            commitTransaction();</div><div class="line">        &#125; <span class="keyword">catch</span> (SQLException sqlx) &#123;</div><div class="line">            rollbackTransaction();</div><div class="line">            <span class="keyword">throw</span> sqlx;</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            teardown();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rollbackTransaction</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">        connection.rollback();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</div><div class="line">        connection = <span class="keyword">null</span>;</div><div class="line">        preparedStatement = <span class="keyword">null</span>;</div><div class="line">        statement = <span class="keyword">null</span>;</div><div class="line">        resultSet = <span class="keyword">null</span>;</div><div class="line">        transactionState = <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">teardown</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            connection.setAutoCommit(transactionState);</div><div class="line">            dbPool.release(connection);</div><div class="line">            <span class="keyword">if</span> (statement != <span class="keyword">null</span>) statement.close();</div><div class="line">            <span class="keyword">if</span> (preparedStatement != <span class="keyword">null</span>) preparedStatement.close();</div><div class="line">            <span class="keyword">if</span> (resultSet != <span class="keyword">null</span>) resultSet.close();</div><div class="line">        &#125; <span class="keyword">catch</span> (SQLException ignored) &#123;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">commitTransaction</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">        connection.commit();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">beginTransaction</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">        statement = connection.createStatement();</div><div class="line">        transactionState = connection.getAutoCommit();</div><div class="line">        connection.setAutoCommit(<span class="keyword">false</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Command</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在提炼出了一个本地事务的基本控制模板，实现了事务控制与业务逻辑控制基本分离。</p>
<p>继续提炼事务控制类的接口，用于横向扩展继承使用：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TransactionScope</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">using</span><span class="params">(Command command)</span> <span class="keyword">throws</span> SQLException</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LocalTransactionScope</span> <span class="keyword">implements</span> <span class="title">TransactionScope</span> </span>&#123;</div><div class="line">  	<span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">using</span><span class="params">(Command action)</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">        setup();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            beginTransaction();</div><div class="line">            action.execute();  <span class="comment">// 具体的业务逻辑</span></div><div class="line">            commitTransaction();</div><div class="line">        &#125; <span class="keyword">catch</span> (SQLException sqlx) &#123;</div><div class="line">            rollbackTransaction();</div><div class="line">            <span class="keyword">throw</span> sqlx;</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            teardown();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DistructedTransactionScope</span> <span class="keyword">implements</span> <span class="title">TransactionScope</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">using</span><span class="params">(Command command)</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">      </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>调用方通过接口留白，实现依赖注入：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderService</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> TransactionScope transactionScope;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTransactionScope</span><span class="params">(TransactionScope transactionScope)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.transactionScope = transactionScope;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribTrainings</span><span class="params">(List&lt;Training&gt; trainings, </span></span></div><div class="line">                                  Customer customer) <span class="keyword">throws</span> SQLException &#123;</div><div class="line">        transactionScope.using(() -&gt; &#123;</div><div class="line">                <span class="keyword">for</span> (Training training : trainings) &#123;</div><div class="line">                    addTrainingItem(customer, training);</div><div class="line">                &#125;</div><div class="line">                addOrder(customer, trainings);</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[从依赖实现到依赖行为]]></title>
      <url>https://zhanghtk.github.io/2016/10/22/%E4%BB%8E%E4%BE%9D%E8%B5%96%E5%AE%9E%E7%8E%B0%E5%88%B0%E4%BE%9D%E8%B5%96%E8%A1%8C%E4%B8%BA/</url>
      <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>一个报表程序需要初始化报表参数。具体的参数分为三种类型，都实现了<code>Parameter</code>类型，具体的初始化过程由子类实现。</p>
<p>对报表参数初始化的过程，从对具体实现过程的依赖，依次经历对接口、对数据结构，最终对行为依赖，不断抽象依赖，实现更大程度的复用。</p>
<h2 id="对实现的依赖"><a href="#对实现的依赖" class="headerlink" title="对实现的依赖"></a>对实现的依赖</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParameterCollector</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fillParameters</span><span class="params">(ServletHttpRequest request, </span></span></div><div class="line">                                ParameterGraph parameterGraph) &#123;</div><div class="line">        <span class="keyword">for</span> (Parameter para : parameterGraph.getParmaeters()) &#123;</div><div class="line">            <span class="keyword">if</span> (para <span class="keyword">instanceof</span> SimpleParameter) &#123;</div><div class="line">                SimpleParameter simplePara = (SimpleParameter) para;</div><div class="line">                String[] values = request.getParameterValues(para.getName());</div><div class="line">                simplePara.setValue(values);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">if</span> (para <span class="keyword">instanceof</span> ItemParameter) &#123;</div><div class="line">                    ItemParameter itemPara = (ItemParameter) para;</div><div class="line">                    <span class="keyword">for</span> (Item item : itemPara.getItems()) &#123;</div><div class="line">                        String[] values = request.getParameterValues(item.getName());</div><div class="line">                        item.setValues(values);</div><div class="line">                    &#125;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    TableParameter tablePara = (TableParameter) para;</div><div class="line">                    String[] rows =</div><div class="line">                            request.getParameterValues(tablePara.getRowName());</div><div class="line">                    String[] columns =</div><div class="line">                            request.getParameterValues(tablePara.getColumnName());</div><div class="line">                    String[] dataCells =</div><div class="line">                            request.getParameterValues(tablePara.getDataCellName());</div><div class="line"></div><div class="line">                    <span class="keyword">int</span> columnSize = columns.length;</div><div class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rows.length; i++) &#123;</div><div class="line">                        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; columns.length; j++) &#123;</div><div class="line">                            TableParameterElement element = <span class="keyword">new</span> TableParameterElement();</div><div class="line">                            element.setRow(rows[i]);</div><div class="line">                            element.setColumn(columns[j]);</div><div class="line">                            element.setDataCell(dataCells[columnSize * i + j]);</div><div class="line">                            tablePara.addElement(element);</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>坏代码的味道：</p>
<ol>
<li>多层次的循环、IF嵌套，如果要在这个层次上加一个期限，那就是大于2。</li>
<li><code>IF/SWITCH instanceof Class</code>式的样板代码</li>
</ol>
<h2 id="对接口的依赖"><a href="#对接口的依赖" class="headerlink" title="对接口的依赖"></a>对接口的依赖</h2><p>多态替换分支语句，重构：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParameterCollector</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fillParameters</span><span class="params">(ServletHttpRequest request, </span></span></div><div class="line">                                ParameterGraph parameterGraph) &#123;</div><div class="line">        <span class="keyword">for</span> (Parameter para : parameterGraph.getParmaeters()) &#123;</div><div class="line">            para.fillParamter(request);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="对数据结构的依赖"><a href="#对数据结构的依赖" class="headerlink" title="对数据结构的依赖"></a>对数据结构的依赖</h2><p>上面的重构使用多态极大简化了<code>ParameterCollector</code>，同时也让不同实现的<code>Parameter</code>更加容易维护。但是在Parameter的方法中传递了request，这使得Parameter类所在的包也必须依赖ServletHttpRequest。这种包之间不必要的耦合可以使用Map保存需要的键值映射关系，弱化这种依赖关系。</p>
<p>进一步重构：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParameterCollector</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fillParameters</span><span class="params">(ServletHttpRequest request, </span></span></div><div class="line">                                ParameterGraph parameterGraph) &#123;</div><div class="line">        Map parmaeters = getParameterMap();           </div><div class="line">        <span class="keyword">for</span> (Parameter para : parameterGraph.getParmaeters()) &#123;</div><div class="line">            para.fillParamter(parmaeters);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>进一步重构后的代码虽然避免了对ServletHttpRequest的依赖，但是无法避免的对Map进行了依赖。</p>
<p>对类似Map这样具体的数据结构依赖，让人无法清晰知道方法参数含义并不是好的编码风格。</p>
<h2 id="对行为的依赖"><a href="#对行为的依赖" class="headerlink" title="对行为的依赖"></a>对行为的依赖</h2><p>在回头看最初的代码，与Servlet API强耦合的是这样一句<code>request.getParameterValues(para.getName())</code></p>
<p>依赖的到底是什么？站在函数式编程的角度，依赖的其实是一种行为：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">string -&gt;  request.getParameterValues(string)</div></pre></td></tr></table></figure>
<p>在Java语法中为了传递一个方法，必须让方法附属在一个接口上，像这样：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ParamterRequest</span> </span>&#123;</div><div class="line">    String[] getParameterValues(String string);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>为了让ServletHttpRequest与ParamterRequest相关联，必须适配器模式，对象的适配器实现像下面这样：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ParameterRequestAdapter</span> <span class="keyword">implements</span> <span class="title">ParamterRequest</span> </span>&#123;</div><div class="line">    ServletHttpRequest servletHttpRequest;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ParameterRequestAdapter</span><span class="params">(ServletHttpRequest servletHttpRequest)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.servletHttpRequest = servletHttpRequest;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> String[] getParameterValues(String string) &#123;</div><div class="line">        <span class="keyword">return</span> servletHttpRequest.getParameterValues(string);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用上面的适配器再进一步重构：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fillParameters</span><span class="params">(ServletHttpRequest request, ParameterGraph parameterGraph)</span> </span>&#123;</div><div class="line">	<span class="keyword">for</span> (Parameter para : parameterGraph.getParmaeters()) &#123;</div><div class="line">		para.fillParamter(<span class="keyword">new</span> ParameterRequestAdapter(request));</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们还可以使用匿名内部类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fillParameters</span><span class="params">(ServletHttpRequest request, ParameterGraph parameterGraph)</span> </span>&#123;</div><div class="line">  <span class="keyword">for</span> (Parameter para : parameterGraph.getParmaeters()) &#123;</div><div class="line">    para.fillParamter(<span class="keyword">new</span> ParamterRequest() &#123;</div><div class="line">      <span class="meta">@Override</span></div><div class="line">      <span class="keyword">public</span> String[] getParameterValues(String string) &#123;</div><div class="line">        <span class="keyword">return</span> request.getParameterValues(string);</div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在Java8我们还可以这样写：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fillParameters</span><span class="params">(ServletHttpRequest request, ParameterGraph parameterGraph)</span> </span>&#123;</div><div class="line">  <span class="keyword">for</span> (Parameter para : parameterGraph.getParmaeters()) &#123;</div><div class="line">    para.fillParamter(string -&gt;  request.getParameterValues(string));</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>甚至还可以这样：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fillParameters</span><span class="params">(ServletHttpRequest request, ParameterGraph parameterGraph)</span> </span>&#123;</div><div class="line">  <span class="keyword">for</span> (Parameter para : parameterGraph.getParmaeters()) &#123;</div><div class="line">    para.fillParamter(request::getParameterValues);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>回头看一眼原有大篇幅的方法，再看看多次重构过的代码。</p>
<p>最明显的感受<code>fillParameters</code>方法比以前薄了：</p>
<p>不相关的职责从方法中抽取出来放到单独的类维护了（职责单一）</p>
<p>当有更多参数类型需要添加时<code>fillParameters</code>不需要做任何的修改，只要添加对应类型就好（开闭原则）</p>
<p>之前对实现类的依赖现在变成了对接口的依赖（依赖倒置）</p>
<p>重构过程中<code>Parameter</code>从对<code>request</code>的依赖变为对数据结构（Map）的依赖，避免了Parameter所在模块与<code>Servlet API</code>之间的耦合。</p>
<p>从对数据结构的依赖最后变成了对接口（行为）的依赖，抽象程度进一步提高，可维护性也更好。</p>
<h2 id="面向对象与函数式编程"><a href="#面向对象与函数式编程" class="headerlink" title="面向对象与函数式编程"></a>面向对象与函数式编程</h2><p>面向对象强调对事物的抽象，强调名词</p>
<p>函数式编程强调对行为的抽象，强调动词</p>
<p>例如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> List&lt;Person&gt; persons = <span class="keyword">new</span> ArrayList&lt;Person&gt;();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;Person&gt; <span class="title">findByName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        List&lt;Person&gt; result = <span class="keyword">new</span> ArrayList&lt;Person&gt;();</div><div class="line">        <span class="keyword">for</span> (Person person : persons) &#123;</div><div class="line">            <span class="keyword">if</span> (person.getName().equals(name)) &#123;</div><div class="line">                result.add(person);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>例如我们有一个方法findByName，以后可能还需要更多方法例如findByAge，findByGender，findChildren等等方法，所有的方法其实都只有查找的过滤条件不同，可以抽象出函数式的写法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> List&lt;Person&gt; <span class="title">findPersons</span><span class="params">(Predicate&lt;Person&gt; predicate, Person people)</span> </span>&#123;</div><div class="line">  List&lt;Person&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">  <span class="keyword">for</span> (Person person : persons) &#123;</div><div class="line">    <span class="keyword">if</span> (predicate.test(people)) &#123;</div><div class="line">      result.add(person);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Java8可以简写成：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> List&lt;Person&gt; <span class="title">findPersons</span><span class="params">(Predicate&lt;Person&gt; predicate, Person people)</span> </span>&#123;</div><div class="line">  <span class="keyword">return</span> persons.stream().filter(predicate).collect(Collectors.toList());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[迪米特法则——合理的封装]]></title>
      <url>https://zhanghtk.github.io/2016/10/22/%E8%BF%AA%E7%B1%B3%E7%89%B9%E6%B3%95%E5%88%99%E2%80%94%E2%80%94%E5%90%88%E7%90%86%E7%9A%84%E5%B0%81%E8%A3%85/</url>
      <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>以服务员，客户，钱包为载体，模拟一个付款过程，阐述不恰当的封装行为。</p>
<p>说明合理封装的一般过程以及不合理封装所表现的一般形式，介绍迪米特法则相关的基本内容，遵循迪米特法则对问题代码进行重构。</p>
<h2 id="看似没有问题的问题"><a href="#看似没有问题的问题" class="headerlink" title="看似没有问题的问题"></a>看似没有问题的问题</h2><p>先看一个简单代码，分别描述钱包、客户、服务员：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Wallet</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">double</span> value;</div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getTotalMoney</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> value;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTotalMoney</span><span class="params">(<span class="keyword">double</span> newValue)</span> </span>&#123;</div><div class="line">        value = newValue;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addMoney</span><span class="params">(<span class="keyword">double</span> deposit)</span> </span>&#123;</div><div class="line">        value += deposit;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subtractMoney</span><span class="params">(<span class="keyword">double</span> debit)</span> </span>&#123;</div><div class="line">        value -= debit;</div><div class="line">    &#125;</div><div class="line">	<span class="comment">// 省略其它字段，方法</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Wallet myWallet;</div><div class="line">	<span class="comment">// 省略其它字段，方法</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Paperboy</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> Customer myCustomer;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pay</span><span class="params">(<span class="keyword">double</span> payment)</span> </span>&#123;</div><div class="line">    Wallet theWallet = myCustomer.getWallet();</div><div class="line">    <span class="keyword">if</span> (theWallet.getTotalMoney() &gt; payment) &#123;</div><div class="line">        theWallet.subtractMoney(payment);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">//money not enough</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>一眼看过去，没毛病。几个基本的简单类在Paperboy的pay方法中实现了简单的业务逻辑，但翻译成“人类语言”就有点问题了：</p>
<p>业务的第一步造作：通过客户获取其钱包。</p>
<p>等等这样真的好吗?现实生活中仿佛讲不通啊，程序设计中其实违反了迪米特法则。</p>
<p>听到迪米特法则那一瞬间，我想到的是各种设计模式概念，尴尬的是就是想不起迪米特到底是个啥!</p>
<h2 id="迪米特法则"><a href="#迪米特法则" class="headerlink" title="迪米特法则"></a>迪米特法则</h2><p>迪米特法则（最小知识法则，强调专注性）：</p>
<p>任何一个对象或者方法，它应该只能调用下列对象：</p>
<ul>
<li>该对象本身和对象的属性</li>
<li>作为参数传进方法的对象</li>
<li>在方法内创建的对象</li>
</ul>
<p>这下好像清晰多了，其实再通俗一点上面的代码就是违反了<strong>封装</strong>的原则。</p>
<p><strong>合理的封装分为两步</strong>：</p>
<ol>
<li><strong>分辨职责</strong><ol>
<li>依据：数据与行为应该封装在一起（信息专家模式）</li>
<li>过程：职责操作哪些数据，数据在哪个（些）类，进而确定职责在哪个类</li>
</ol>
</li>
<li>判别哪些是实现细节，哪些是可以<strong>公开的接口</strong>，以保证对<strong>细节的合理隐藏</strong></li>
</ol>
<p><strong>不良封装造成的结果</strong>：Feature Envy（依恋情结）</p>
<p><strong>不良封装可能的代码样式</strong>：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">obj1.obj1_fun().obj2_fun();</div></pre></td></tr></table></figure>
<p>类似链式的方法调用，但方法返回的是不同对象，这时候的代码很有可能是不良封装，违反迪米特法则了。</p>
<h2 id="问题的解决"><a href="#问题的解决" class="headerlink" title="问题的解决"></a>问题的解决</h2><p>上面代码良好的封装示例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Wallet myWallet;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pay</span><span class="params">(<span class="keyword">float</span> payment)</span> </span>&#123;</div><div class="line">        Wallet theWallet = myWallet;</div><div class="line">        <span class="keyword">if</span> (theWallet.getTotalMoney() &gt; payment) &#123;</div><div class="line">            theWallet.subtractMoney(payment);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">//money not enough</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Paperboy</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Customer myCustomer;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pay</span><span class="params">(<span class="keyword">float</span> payment)</span> </span>&#123;</div><div class="line">        myCustomer.pay(payment);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用Builder模式改进多参数方法]]></title>
      <url>https://zhanghtk.github.io/2016/10/16/%E4%BD%BF%E7%94%A8Builder%E6%A8%A1%E5%BC%8F%E6%94%B9%E8%BF%9B%E5%A4%9A%E5%8F%82%E6%95%B0%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>记一次工作当中对多参数方法重构。</p>
<ol>
<li>使用对象封装对多参数，简化方法调用</li>
<li>使用Builder（创建者）模式简化多属性对象的创建</li>
</ol>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>业务系统中统一的邮件发送服务接口在改造前大概长着个样子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * 不帶附件的邮件发送</div><div class="line">    * 未使用建造者模式的原始方法（不良代码）</div><div class="line">    * <span class="doctag">@param</span> template                      模板</div><div class="line">    * <span class="doctag">@param</span> subjects                      主题</div><div class="line">    * <span class="doctag">@param</span> contents                      内容</div><div class="line">    * <span class="doctag">@param</span> toPersons                     收件人</div><div class="line">    * <span class="doctag">@param</span> ccPersons                     抄送人</div><div class="line">    * <span class="doctag">@param</span> bccPersons                    暗送人</div><div class="line">    */</div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sendEmail</span><span class="params">(String template, List&lt;String&gt; subjects, List&lt;String&gt; contents, List&lt;String&gt; toPersons,</span></span></div><div class="line">                                 List&lt;String&gt; ccPersons, List&lt;String&gt; bccPersons)&#123;</div><div class="line">       logger.info(<span class="string">"send email"</span>);</div><div class="line">   &#125;</div><div class="line"></div><div class="line"></div><div class="line">   <span class="comment">/**</span></div><div class="line">    * 带附件的邮件发送</div><div class="line">    * 未使用建造者模式的原始方法（不良）</div><div class="line">    * <span class="doctag">@param</span> template                      模板</div><div class="line">    * <span class="doctag">@param</span> subjects                      主题</div><div class="line">    * <span class="doctag">@param</span> contents                      内容</div><div class="line">    * <span class="doctag">@param</span> toPersons                     收件人</div><div class="line">    * <span class="doctag">@param</span> ccPersons                     抄送人</div><div class="line">    * <span class="doctag">@param</span> bccPersons                    暗送人</div><div class="line">    * <span class="doctag">@param</span> docName                       文档名称</div><div class="line">    * <span class="doctag">@param</span> fileName                      文件名称(单个文件)</div><div class="line">    */</div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sendEmail</span><span class="params">(String template, List&lt;String&gt; subjects, List&lt;String&gt; contents, List&lt;String&gt; toPersons,</span></span></div><div class="line">                                 List&lt;String&gt; ccPersons, List&lt;String&gt; bccPersons, String docName, String fileName)&#123;</div><div class="line">       logger.info(<span class="string">"send email"</span>);</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="comment">/**</span></div><div class="line">    * 带附件的邮件发送</div><div class="line">    * 未使用建造者模式的原始方法（不良代码）</div><div class="line">    * <span class="doctag">@param</span> template                      模板</div><div class="line">    * <span class="doctag">@param</span> subjects                      主题</div><div class="line">    * <span class="doctag">@param</span> contents                      内容</div><div class="line">    * <span class="doctag">@param</span> toPersons                     收件人</div><div class="line">    * <span class="doctag">@param</span> ccPersons                     抄送人</div><div class="line">    * <span class="doctag">@param</span> bccPersons                    暗送人</div><div class="line">    * <span class="doctag">@param</span> docName                       文档名称</div><div class="line">    * <span class="doctag">@param</span> fileNames                     文件名称(多个文件,文件名称列表)</div><div class="line">    */</div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sendEmail</span><span class="params">(String template, List&lt;String&gt; subjects, List&lt;String&gt; contents, List&lt;String&gt; toPersons,</span></span></div><div class="line">                                 List&lt;String&gt; ccPersons, List&lt;String&gt; bccPersons, String docName, List&lt;String&gt; fileNames)&#123;</div><div class="line">       logger.info(<span class="string">"send email"</span>);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>接口有个重要的内容注释中并没有说明：参数中“模板”和“收件人”是必填的，而其他参数是非必填的。</p>
<p>接口的可配置程度还是不错的，但是调用的过程就比较痛苦了。</p>
<p>一大堆String和List接口暴露出来，同时又使用了不同的参数个数来进行重载。</p>
<p>调用的时候光是创建这些参数就够麻烦的了，还要考虑哪些参数是必填的以及参数的正确位置。更糟糕的是参数传错位置你会发现很有可能并没有显式的暴露出问题，邮件还是发送了只是发送到错误的相关人员那里。</p>
<p>其他人看到方法调用也无法清晰知道这个到底是要发什么邮件，给哪些人。</p>
<p>这应该就是坏代码的味道吧。</p>
<h2 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h2><p>简单的改进思路就是把参数做成一个modle封装起来，以后传递model给方法。就像这样：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 邮件发送通用接口</div><div class="line"> * <span class="doctag">@param</span> email 邮件发送参数对象</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sendEmail</span><span class="params">(EmailSendMain email)</span></span>&#123;</div><div class="line">	logger.info(<span class="string">"send email:"</span> + email);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>但是问题还是没有根本解决，对象的构造还是需要多个参数的构造方法，可能还需要重载。</p>
<p>比较容易想到的改进是使用Java Bean模式。简化构造方法字段，构造方法只传入必要的字段，使用setter方法设置其他值。我就是这么肤浅的想到这个地步了。</p>
<p>乍一看问题是解决了，其实不然。</p>
<ol>
<li>在对象创建过程中Java Bean可能处于不一致状态</li>
<li>使用Java Bean就将不能创建不可变对象</li>
</ol>
<p>读了《Effective Java》只是第二章就有了更好的解决思路——Builder模式。</p>
<p>先看改进后的代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 复杂类型构建接口</div><div class="line"> *</div><div class="line"> * 建造者模式中的抽象构建者</div><div class="line"> * Created by ZhangHao on 2016/10/15.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Builder</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">    <span class="function">T <span class="title">build</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 邮件发送参数对象</div><div class="line"> * 包含多个字段的复杂类型，使用内部类实现Builder接口创建对象</div><div class="line"> *</div><div class="line"> * 建造者模式中的产品类</div><div class="line"> * Created by ZhangHao on 2016/10/15.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">EmailSendMain</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String template;  <span class="comment">// 模板名称</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;String&gt; subjects;  <span class="comment">// 主题参数列表</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;String&gt; contents;  <span class="comment">// 内容参数列表</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;String&gt; toPersons;  <span class="comment">// 收件人列表</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;String&gt; ccPersons;  <span class="comment">// 抄送人列表</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;String&gt; bccPersons;  <span class="comment">// 暗送人列表</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String docName;  <span class="comment">// 文档名称</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;String&gt; fileNames;  <span class="comment">// 文件名称列表</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">EmailSendMain</span><span class="params">(Builder builder)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.template = builder.template;</div><div class="line">        <span class="keyword">this</span>.subjects = builder.subjects;</div><div class="line">        <span class="keyword">this</span>.contents = builder.contents;</div><div class="line">        <span class="keyword">this</span>.toPersons = builder.toPersons;</div><div class="line">        <span class="keyword">this</span>.ccPersons = builder.ccPersons;</div><div class="line">        <span class="keyword">this</span>.bccPersons = builder.bccPersons;</div><div class="line">        <span class="keyword">this</span>.docName = builder.docName;</div><div class="line">        <span class="keyword">this</span>.fileNames = builder.fileNames;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 实现Builder接口的构建类，用于创建EmailSendMain</div><div class="line">     *</div><div class="line">     * 建造者模式中的建造类</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> <span class="keyword">implements</span> <span class="title">tk</span>.<span class="title">zhangh</span>.<span class="title">pattern</span>.<span class="title">create</span>.<span class="title">builder</span>.<span class="title">demo1</span>.<span class="title">Builder</span>&lt;<span class="title">EmailSendMain</span>&gt; </span>&#123;</div><div class="line">        <span class="keyword">private</span> String template;  <span class="comment">// 模板名称</span></div><div class="line">        <span class="keyword">private</span> List&lt;String&gt; subjects;  <span class="comment">// 主题参数列表</span></div><div class="line">        <span class="keyword">private</span> List&lt;String&gt; contents;  <span class="comment">// 内容参数列表</span></div><div class="line">        <span class="keyword">private</span> List&lt;String&gt; toPersons;  <span class="comment">// 收件人列表</span></div><div class="line">        <span class="keyword">private</span> List&lt;String&gt; ccPersons;  <span class="comment">// 抄送人列表</span></div><div class="line">        <span class="keyword">private</span> List&lt;String&gt; bccPersons;  <span class="comment">// 暗送人列表</span></div><div class="line">        <span class="keyword">private</span> String docName;  <span class="comment">// 文档名称</span></div><div class="line">        <span class="keyword">private</span> List&lt;String&gt; fileNames;  <span class="comment">// 文件名称列表</span></div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Builder</span><span class="params">(String template, List&lt;String&gt; toPersons)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.template = template;</div><div class="line">            <span class="keyword">this</span>.toPersons = toPersons;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> EmailSendMain <span class="title">build</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> EmailSendMain(<span class="keyword">this</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">subjects</span><span class="params">(List&lt;String&gt; subjects)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.subjects = subjects;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">contents</span><span class="params">(List&lt;String&gt; contents)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.contents = contents;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">ccPersons</span><span class="params">(List&lt;String&gt; ccPersons)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.ccPersons = ccPersons;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">bccPersons</span><span class="params">(List&lt;String&gt; bccPersons)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.bccPersons = bccPersons;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">docName</span><span class="params">(String docName)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.docName = docName;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">fileNames</span><span class="params">(List&lt;String&gt; fileNames)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.fileNames = fileNames;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// getter,toString方法省略</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>重写做的接口方法封装：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 邮件发送通用接口</div><div class="line"> * <span class="doctag">@param</span> email 邮件发送参数对象</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sendEmail</span><span class="params">(EmailSendMain email)</span></span>&#123;</div><div class="line">    logger.info(<span class="string">"send email:"</span> + email);</div><div class="line">    <span class="keyword">if</span> ((email.getDocName() == <span class="keyword">null</span> || email.getDocName().equals(<span class="string">""</span>)) ||</div><div class="line">            (email.getFileNames() == <span class="keyword">null</span> || email.getFileNames().size() == <span class="number">0</span>)) &#123;</div><div class="line">        sendEmail(email.getTemplate(), email.getSubjects(), email.getContents(), email.getToPersons(),</div><div class="line">                email.getCcPersons(), email.getBccPersons());</div><div class="line">    &#125;<span class="keyword">else</span> &#123;</div><div class="line">        sendEmail(email.getTemplate(), email.getSubjects(), email.getContents(), email.getToPersons(),</div><div class="line">                email.getCcPersons(), email.getBccPersons(), email.getDocName(), email.getFileNames());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>客户端调用：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSendEmail</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    EmailSendMain email =</div><div class="line">            <span class="keyword">new</span> EmailSendMain.Builder(<span class="string">"邮件模版名"</span>,toPersons).</div><div class="line">                    subjects(subjects).</div><div class="line">                    contents(contents).</div><div class="line">                    ccPersons(ccPersons).</div><div class="line">                    bccPersons(bccPersons).build();</div><div class="line">    SendEmailUtil.sendEmail(email);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>问题圆满解决，支持可选参数的链式结构调用，创建过程也确保了一致性，使用不可变类也没问题。</p>
<p>如果说缺点，其实不难看出EmailSendMain的字段和它的内部类Builder字段完全重复了。为了创建EmailSendMain的对象将必须先创建Builder也会带来轻微的性能问题。创建的调用过程虽然看起来更清晰，但也更加冗长。</p>
<p>但是Builder模式还是创建多参数类的不错选择，尤其是大多数参数是可选。</p>
<h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p>这篇文章的思路是根据《Effective Java》得来的，文章只提到书中建议的第二条，实际关于上面使用到的内部类，泛型，在书中的建议都让我有了更多的认识。我就不赘述了，连上8天班我要去偷懒了。</p>
<p>写这篇文章的时候看到有个系列专门讲Java方法参数太多的问题</p>
<p>传送门：<a href="https://dzone.com/articles/too-many-parameters-java" target="_blank" rel="external">https://dzone.com/articles/too-many-parameters-java</a></p>
<p>以及翻译：<a href="http://www.importnew.com/6518.html" target="_blank" rel="external">http://www.importnew.com/6518.html</a></p>
<p>代码我放在了学习设计模式的项目下：</p>
<p>传送门：<a href="https://github.com/zhanghTK/HelloDesignPattern" target="_blank" rel="external">https://github.com/zhanghTK/HelloDesignPattern</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[《Java并发编程实战》读书笔记]]></title>
      <url>https://zhanghtk.github.io/2016/09/29/%E3%80%8AJava%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p>右键-&gt;新标签页中打开图片-&gt;放大预览<br><img src="https://ooo.0o0.ooo/2016/09/29/57eca40868441.png" alt="Java并发编程实战.png"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ThreadLocal小记]]></title>
      <url>https://zhanghtk.github.io/2016/09/11/ThreadLocal%E5%B0%8F%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h1 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h1><p>最近《Java并发编程实战》第三章谈及了对象共享的问题。对共享的可变数据最简单粗暴的做法当然是同步，但是同步的缺点也很明显，代码复杂可维护性降低。针对这个问题，书上谈及到了通过线程封闭避免同步，其中的ThreadLocal类就是帮助维持线程封闭性的。</p>
<p>之前对ThreadLocal的认识非常简单，就是把一个变量绑定到线程上。参照网上的例子自己也实现了类似功能的例子ThreadLocalVariable(<a href="https://github.com/zhanghTK/HelloJava/blob/master/src/main/java/tk/zhangh/java/thread/ThreadLocalVariable.java)，但总的来说没什么体会。今天参照别人的文章看了一下ThreadLocal的实现，发现还是有蛮多注意点的。" target="_blank" rel="external">https://github.com/zhanghTK/HelloJava/blob/master/src/main/java/tk/zhangh/java/thread/ThreadLocalVariable.java)，但总的来说没什么体会。今天参照别人的文章看了一下ThreadLocal的实现，发现还是有蛮多注意点的。</a></p>
<p>看JDK之前想当然的以为ThreadLocal应该就是简单对<code>Map&lt;Thread, Object&gt;</code>做一个封装，然而实际并没有这么简单。参照了网上一些文章的说法，早期的ThreadLocal确实是这样实现的。但是这样实现存在一些问题：</p>
<ol>
<li>线程安全问题，如果使用线程安全的Map实现那么就会带来性能问题，当有大量的线程使用ThreadLocal，伴随着线程生命周期ThreadLocal也需要频繁向底层的Map添加删除数据。</li>
<li>内存回收问题，用Thread当key，除非手动调用remove，否则即使线程退出了会导致：1)该Thread对象无法回收；2)该线程在所有ThreadLocal中对应的value也无法回收。</li>
</ol>
<p>ThreadLocal实际给出了不同的实现方式。首先绑定到线程的变量没有维护在ThreadLocal内，而是维护在各个Thread类实例内——在Thread类内使用了ThreadLocal的静态内部类<code>ThreadLocalMap</code>实例去维护需要绑定到线程的变量。这样原本需要维护在ThreadLocal内的数据现在就分散到了各个线程内去维护。</p>
<p>在Thread中ThreadLocalMap的声明长这样：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 真的就只是声明了一下，什么都没干    </span></div><div class="line">ThreadLocal.ThreadLocalMap threadLocals = <span class="keyword">null</span>;</div></pre></td></tr></table></figure>
<p>ThreadLocal一共只有五个非私有的方法，首先是两个并没有什么卵用的方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 构造，什么都没干</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadLocal</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="comment">// 设置ThreadLocal的初始值，protected很明显是希望子类重写</span></div><div class="line"><span class="function"><span class="keyword">protected</span> T <span class="title">initialValue</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> <span class="keyword">null</span>&#125;</div></pre></td></tr></table></figure>
<p>看看其余三个方法的实现（JDK8）</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">()</span> </span>&#123;</div><div class="line">    Thread t = Thread.currentThread();</div><div class="line">    <span class="comment">// 从线程里获取ThreadLocalMap</span></div><div class="line">    ThreadLocalMap map = getMap(t);</div><div class="line">    <span class="keyword">if</span> (map != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="comment">// 根据ThreadLocal实例获取Entity</span></div><div class="line">        <span class="comment">// 一会看ThreadLocal的实现</span></div><div class="line">        <span class="comment">// 暂时可以看做类似Map&lt;ThreadLocal,Object&gt;</span></div><div class="line">        <span class="comment">// 注意key类型是ThreadLocal，不是Thread</span></div><div class="line">        ThreadLocalMap.Entry e = map.getEntry(<span class="keyword">this</span>);</div><div class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">            T result = (T)e.value;</div><div class="line">            <span class="keyword">return</span> result;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 如果获得的map为null或者从map通过key获取的value为空时获取一个初始值</span></div><div class="line">    <span class="comment">// setInitialValue方法里调用了initialValue方法</span></div><div class="line">    <span class="comment">// 宝宝不管，反正宝宝想要有值，宝宝不想为null</span></div><div class="line">    <span class="keyword">return</span> setInitialValue();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(T value)</span> </span>&#123;</div><div class="line">    Thread t = Thread.currentThread();</div><div class="line">    ThreadLocalMap map = getMap(t);</div><div class="line">    <span class="keyword">if</span> (map != <span class="keyword">null</span>)</div><div class="line">        <span class="comment">// 没什么说的set进去</span></div><div class="line">        map.set(<span class="keyword">this</span>, value);</div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="comment">// 当map不存在时，使用初始值创建一个</span></div><div class="line">        createMap(t, value);</div><div class="line">&#125;</div><div class="line"></div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</div><div class="line">     ThreadLocalMap m = getMap(Thread.currentThread());</div><div class="line">     <span class="keyword">if</span> (m != <span class="keyword">null</span>)</div><div class="line">         <span class="comment">// 没什么说的，remove掉</span></div><div class="line">         m.remove(<span class="keyword">this</span>);</div><div class="line"> &#125;</div><div class="line"></div><div class="line"><span class="function">ThreadLocalMap <span class="title">getMap</span><span class="params">(Thread t)</span> </span>&#123;</div><div class="line">    <span class="comment">// 你给我一个线程，我换你一个map</span></div><div class="line">    <span class="keyword">return</span> t.threadLocals;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>ThreadLocal所有的操作都是围绕着内部类ThreadLocalMap的，ThreadLocal只是让ThreadLocalMap更加容易访问。咦，有点耳熟，没错外观模式。</p>
<p>下面看一下ThreadLocal的静态内部类ThreadLocalMap，JDK文档对它的描述主要集中在一下几点：</p>
<ol>
<li>是什么：定制的hash map用于维护本地线程变量</li>
<li>可见性：ThreadLocal之外没有任何方法可访问，Thread类使用它定义了私有属性</li>
<li>特殊性：为了管理大对象、长生命周期对象，使用WeakReference包装ThreadLocal对象作为key</li>
</ol>
<p>前面两点没什么好说的，主要是第三点：key使用了弱引用类型管理（关于弱引用可以先参考<a href="https://github.com/zhanghTK/HelloJava/blob/master/src/main/java/tk/zhangh/java/jvm/reference/ReferenceTest.java，后面我会单独写文章记录Java引用的使用，先挖个坑）。" target="_blank" rel="external">https://github.com/zhanghTK/HelloJava/blob/master/src/main/java/tk/zhangh/java/jvm/reference/ReferenceTest.java，后面我会单独写文章记录Java引用的使用，先挖个坑）。</a></p>
<p><img src="http://img.blog.csdn.net/20160121000731607" alt="image"></p>
<p>图片来自互联网，实线表示强引用，虚线表示弱引用。</p>
<p>简而言之，一个对象在没有强引用引用，只有弱引用引用时，当GC发生这个对象就会被标记回收。将ThreadLocal对象设置成弱引用作为key的好处是显而易见：当ThreadLocal没有任何强引用引用时，只有ThreadLocalMap的Entry对它存在弱引用，这样GC的时候这个ThreadLocal对象就可以被回收了。但是这又带来了一个问题：Entry的key可能被回收了，但留下了一个并没有什么卵用的value。只要线程生命周期不结束，那么这个value对象始终保持了一个强引用链条：</p>
<p>Thread Ref -&gt; Thread -&gt; ThreadLocalMap -&gt; Entry -&gt; value</p>
<p>当内存有大量驻留的线程时，因为强引用存在，GC始终无法回收，就导致了内存泄漏。</p>
<p>真对这个问题ThreadLocalMap在实现的时候也采取了一些防护措施，比如ThreadLocalMap的get（set，remove方法也类似，限于篇幅不展开了）：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> Entry <span class="title">getEntry</span><span class="params">(ThreadLocal&lt;?&gt; key)</span> </span>&#123;</div><div class="line">    <span class="comment">// hash函数获取索引位置</span></div><div class="line">    <span class="keyword">int</span> i = key.threadLocalHashCode &amp; (table.length - <span class="number">1</span>);</div><div class="line">    Entry e = table[i];</div><div class="line">    <span class="keyword">if</span> (e != <span class="keyword">null</span> &amp;&amp; e.get() == key)</div><div class="line">        <span class="comment">// 命中了</span></div><div class="line">        <span class="keyword">return</span> e;</div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="comment">// miss了</span></div><div class="line">        <span class="keyword">return</span> getEntryAfterMiss(key, i, e);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> Entry <span class="title">getEntryAfterMiss</span><span class="params">(ThreadLocal&lt;?&gt; key, <span class="keyword">int</span> i, Entry e)</span> </span>&#123;</div><div class="line">    Entry[] tab = table;</div><div class="line">    <span class="keyword">int</span> len = tab.length;</div><div class="line">		</div><div class="line">    <span class="comment">// 遍历table</span></div><div class="line">    <span class="keyword">while</span> (e != <span class="keyword">null</span>) &#123;</div><div class="line">        ThreadLocal&lt;?&gt; k = e.get();</div><div class="line">        <span class="keyword">if</span> (k == key)</div><div class="line">            <span class="comment">// 找到了</span></div><div class="line">            <span class="keyword">return</span> e;</div><div class="line">        <span class="keyword">if</span> (k == <span class="keyword">null</span>)</div><div class="line">            <span class="comment">// 发现key为空（也就是上面描述的内存泄漏的情况），做删除</span></div><div class="line">            expungeStaleEntry(i);</div><div class="line">        <span class="keyword">else</span></div><div class="line">            <span class="comment">// 找下一个Entty位置</span></div><div class="line">            i = nextIndex(i, len);</div><div class="line">        e = tab[i];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在get的过程中凡是碰到了key为null的Entry，这个Entry就会被擦除，从而避免内存泄漏。类似的思路在set，remove方法中都有实现。针对内存泄漏问题ThreadLocal实际是需要手动触发函数删除key为null的Entry，所以当不要再需要一个变量当定到线程时手动的remove还是很有必要的。</p>
<p>最后，在网上看到对ThreadLocal有多种说法：ThreadLocal为解决多线程程序的并发问题提供了一种新的思路；ThreadLocal的目的是为了解决多线程访问资源时的共享问题。</p>
<p>关于第一种说法我觉得是部分正确的，ThreadLocal将需要共享的对象封闭在了线程内确实解决了并发的一部分问题，但并不是万能的。比如重写initialValue方法时返回的是一个全局共享的对象，那实际上ThreadLocal只是把这个全局共享的对象又封装到了Thread对象里，ThreadLocal本身并没有做类似深拷贝的操作，因此这个变量依然是线程不安全的（逸出）。</p>
<p>关于第二种说法，我觉得问题就比较大了。ThreadLocal根本不是为了线程间共享，实际是为了将状态封闭在线程内以确保线程安全。这样做确实带来了访问共享状态的便利，但这个状态的共享是在单个线程内的，而不是线程之间的。比如在action中将session对象绑定在线程内，在service、dao里都可以方便的共享，但所有的共享都是在单个的线程内部，而不是在多个的线程之间共享。</p>
<p>参考资料：</p>
<p>《Java并发编程实战》</p>
<p>JDK8帮助手册</p>
<p><a href="http://qifuguang.me/2015/09/02/[Java%E5%B9%B6%E5%8F%91%E5%8C%85%E5%AD%A6%E4%B9%A0%E4%B8%83]%E8%A7%A3%E5%AF%86ThreadLocal/" target="_blank" rel="external">http://qifuguang.me/2015/09/02/[Java%E5%B9%B6%E5%8F%91%E5%8C%85%E5%AD%A6%E4%B9%A0%E4%B8%83]%E8%A7%A3%E5%AF%86ThreadLocal/</a></p>
<p><a href="http://my.oschina.net/xianggao/blog/392440#navbar-header" target="_blank" rel="external">http://my.oschina.net/xianggao/blog/392440#navbar-header</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[《函数式编程思维》读书笔记]]></title>
      <url>https://zhanghtk.github.io/2016/08/27/%E3%80%8A%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E6%80%9D%E7%BB%B4%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p><img src="http://i2.buimg.com/4851/efe49260863d5566.png" alt="函数式编程思维.png"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java内存区域]]></title>
      <url>https://zhanghtk.github.io/2016/08/14/Java%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F/</url>
      <content type="html"><![CDATA[<p><img src="https://ooo.0o0.ooo/2016/08/14/57b08be587b3a.png" alt="Java内存区域.png"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[HTML与CSS小记]]></title>
      <url>https://zhanghtk.github.io/2016/07/31/HTML%E4%B8%8ECSS%E5%B0%8F%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p><img src="https://ooo.0o0.ooo/2016/07/31/579dd779d1389.png" alt="jjj"></p>
]]></content>
    </entry>
    
  
  
</search>
